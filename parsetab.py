
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALIAS AND ARRAY AT BEGIN BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR BREAK CASE CLASS COLON COMMA COMPLEX CONSTANT DEDENT DEF DEFINED DIVIDE DO DOT EACH ELSE ELSEIF END_LOWER END_UPPER ENSURE EQUAL EQUALS EXPONENT FALSE FILE FLOAT FOR GLOBAL GREATER_THAN GREATER_THAN_EQUAL HASH HASHAS ID IF IN INDENT INT LBRACKET LCURLYBRACKET LESS_THAN LESS_THAN_EQUAL LINE LOOP LPARENTHESIS MINUS MODULE MODULO MULTIPLY NEXT NIL NOT NOT_EQUAL OP_AND OP_NOT OP_OR OR PLUS PUTS RATIONAL RBRACKET RCURLYBRACKET REDO RESCUE RETRY RETURN RPARENTHESIS SELF SEMICOLON SET SHIFT_LEFT SHIFT_RIGHT STR SUPER SYMBOL THEN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELDstatement : expressionexpression : ID EQUALS expression\n    expression : expression PLUS expression\n    | expression MINUS expression\n    | expression MULTIPLY expression\n    | expression DIVIDE expression\n    \n    statement : set_vacio\n    | set_elementos\n    \n    set_vacio : ID EQUALS SET LCURLYBRACKET RCURLYBRACKET\n    \n    set_elementos : ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET\n    \n    varios_set_elementos : INT\n    | STR\n    | FLOAT\n    | INT COMMA varios_set_elementos\n    | FLOAT COMMA varios_set_elementos\n    | STR COMMA varios_set_elementos \n    \n    statement : array_vacio\n    \n    array_vacio : ID EQUALS LBRACKET RBRACKET\n    \n    array_str : ID EQUALS LBRACKET varios_str RBRACKET\n    \n    varios_str : STR\n    | STR COMMA STR\n    \n    statement : hash_vacio\n    | hash_elementos\n    \n    hash_vacio : ID EQUALS LCURLYBRACKET RCURLYBRACKET\n    \n    hash_elementos : ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET\n    \n    varios_pares_hash : ID COLON expression\n    | STR HASHAS expression\n    | ID COLON expression COMMA varios_pares_hash\n    | STR HASHAS expression COMMA varios_pares_hash\n    expression : INTexpression : FLOATexpression : STRexpression : ID\n    statement : PUTS STR\n    \n    statement : PUTS INT\n    \n    statement : PUTS FLOAT\n    '
    
_lr_action_items = {'PUTS':([0,],[8,]),'ID':([0,13,14,15,16,20,28,30,42,44,54,55,],[12,22,22,22,22,22,32,22,22,22,32,32,]),'INT':([0,8,13,14,15,16,20,30,31,42,44,46,47,48,],[10,18,10,10,10,10,10,10,39,10,10,39,39,39,]),'FLOAT':([0,8,13,14,15,16,20,30,31,42,44,46,47,48,],[11,19,11,11,11,11,11,11,41,11,11,41,41,41,]),'STR':([0,8,13,14,15,16,20,28,30,31,42,44,46,47,48,54,55,],[9,17,9,9,9,9,9,35,9,40,9,9,40,40,40,35,35,]),'$end':([1,2,3,4,5,6,7,9,10,11,12,17,18,19,21,22,23,24,25,26,33,36,37,43,45,],[0,-1,-7,-8,-17,-22,-23,-32,-30,-31,-33,-34,-35,-36,-3,-33,-4,-5,-6,-2,-24,-18,-9,-25,-10,]),'PLUS':([2,9,10,11,12,21,22,23,24,25,26,49,50,],[13,-32,-30,-31,-33,13,-33,13,13,13,13,13,13,]),'MINUS':([2,9,10,11,12,21,22,23,24,25,26,49,50,],[14,-32,-30,-31,-33,14,-33,14,14,14,14,14,14,]),'MULTIPLY':([2,9,10,11,12,21,22,23,24,25,26,49,50,],[15,-32,-30,-31,-33,15,-33,15,15,15,15,15,15,]),'DIVIDE':([2,9,10,11,12,21,22,23,24,25,26,49,50,],[16,-32,-30,-31,-33,16,-33,16,16,16,16,16,16,]),'COMMA':([9,10,11,21,22,23,24,25,26,39,40,41,49,50,],[-32,-30,-31,-3,-33,-4,-5,-6,-2,46,47,48,54,55,]),'RCURLYBRACKET':([9,10,11,21,22,23,24,25,26,28,31,34,38,39,40,41,49,50,51,52,53,56,57,],[-32,-30,-31,-3,-33,-4,-5,-6,-2,33,37,43,45,-11,-12,-13,-26,-27,-14,-16,-15,-28,-29,]),'EQUALS':([12,22,],[20,30,]),'SET':([20,],[27,]),'LBRACKET':([20,],[29,]),'LCURLYBRACKET':([20,27,],[28,31,]),'RBRACKET':([29,],[36,]),'COLON':([32,],[42,]),'HASHAS':([35,],[44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,13,14,15,16,20,30,42,44,],[2,21,23,24,25,26,26,49,50,]),'set_vacio':([0,],[3,]),'set_elementos':([0,],[4,]),'array_vacio':([0,],[5,]),'hash_vacio':([0,],[6,]),'hash_elementos':([0,],[7,]),'varios_pares_hash':([28,54,55,],[34,56,57,]),'varios_set_elementos':([31,46,47,48,],[38,51,52,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expression','analizer_ruby.py',12),
  ('expression -> ID EQUALS expression','expression',3,'p_expression_assignment','analizer_ruby.py',17),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary_operation','analizer_ruby.py',27),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary_operation','analizer_ruby.py',28),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binary_operation','analizer_ruby.py',29),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary_operation','analizer_ruby.py',30),
  ('statement -> set_vacio','statement',1,'p_set','analizer_ruby.py',52),
  ('statement -> set_elementos','statement',1,'p_set','analizer_ruby.py',53),
  ('set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET','set_vacio',5,'p_set_vacio','analizer_ruby.py',58),
  ('set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET','set_elementos',6,'p_set_elementos','analizer_ruby.py',69),
  ('varios_set_elementos -> INT','varios_set_elementos',1,'p_varios_set_elementos','analizer_ruby.py',80),
  ('varios_set_elementos -> STR','varios_set_elementos',1,'p_varios_set_elementos','analizer_ruby.py',81),
  ('varios_set_elementos -> FLOAT','varios_set_elementos',1,'p_varios_set_elementos','analizer_ruby.py',82),
  ('varios_set_elementos -> INT COMMA varios_set_elementos','varios_set_elementos',3,'p_varios_set_elementos','analizer_ruby.py',83),
  ('varios_set_elementos -> FLOAT COMMA varios_set_elementos','varios_set_elementos',3,'p_varios_set_elementos','analizer_ruby.py',84),
  ('varios_set_elementos -> STR COMMA varios_set_elementos','varios_set_elementos',3,'p_varios_set_elementos','analizer_ruby.py',85),
  ('statement -> array_vacio','statement',1,'p_array','analizer_ruby.py',95),
  ('array_vacio -> ID EQUALS LBRACKET RBRACKET','array_vacio',4,'p_array_vacio','analizer_ruby.py',101),
  ('array_str -> ID EQUALS LBRACKET varios_str RBRACKET','array_str',5,'p_array_str','analizer_ruby.py',116),
  ('varios_str -> STR','varios_str',1,'p_varios_str','analizer_ruby.py',120),
  ('varios_str -> STR COMMA STR','varios_str',3,'p_varios_str','analizer_ruby.py',121),
  ('statement -> hash_vacio','statement',1,'p_hash','analizer_ruby.py',127),
  ('statement -> hash_elementos','statement',1,'p_hash','analizer_ruby.py',128),
  ('hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET','hash_vacio',4,'p_hash_vacio','analizer_ruby.py',134),
  ('hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET','hash_elementos',5,'p_hash_elementos','analizer_ruby.py',147),
  ('varios_pares_hash -> ID COLON expression','varios_pares_hash',3,'p_varios_pares_hash','analizer_ruby.py',161),
  ('varios_pares_hash -> STR HASHAS expression','varios_pares_hash',3,'p_varios_pares_hash','analizer_ruby.py',162),
  ('varios_pares_hash -> ID COLON expression COMMA varios_pares_hash','varios_pares_hash',5,'p_varios_pares_hash','analizer_ruby.py',163),
  ('varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash','varios_pares_hash',5,'p_varios_pares_hash','analizer_ruby.py',164),
  ('expression -> INT','expression',1,'p_expression_int','analizer_ruby.py',179),
  ('expression -> FLOAT','expression',1,'p_expression_float','analizer_ruby.py',184),
  ('expression -> STR','expression',1,'p_expression_string','analizer_ruby.py',189),
  ('expression -> ID','expression',1,'p_expression_id','analizer_ruby.py',194),
  ('statement -> PUTS STR','statement',2,'p_print_str','analizer_ruby.py',205),
  ('statement -> PUTS INT','statement',2,'p_print_int','analizer_ruby.py',213),
  ('statement -> PUTS FLOAT','statement',2,'p_print_float','analizer_ruby.py',219),
]
