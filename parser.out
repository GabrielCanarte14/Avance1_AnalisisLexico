Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    ARRAY
    AT
    BEGIN
    BITWISE_AND
    BITWISE_NOT
    BITWISE_OR
    BITWISE_XOR
    CASE
    CLASS
    COMPLEX
    CONSTANT
    DEDENT
    DEFINED
    DIVIDE
    DOT
    EACH
    ELSE
    ELSEIF
    ENSURE
    EXPONENT
    FALSE
    FILE
    FOR
    GLOBAL
    HASH
    IN
    INDENT
    LINE
    MINUS
    MODULE
    MODULO
    MULTIPLY
    NEXT
    NIL
    NOT
    OP_NOT
    OR
    PLUS
    PUTS
    RATIONAL
    REDO
    RESCUE
    RETRY
    RETURN
    SELF
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SUPER
    SYMBOL
    THEN
    TRUE
    UNDEF
    UNLESS
    UNTIL
    WHEN
    WHILE
    YIELD

Grammar

Rule 0     S' -> statement
Rule 1     statement -> set_vacio
Rule 2     statement -> set_numero
Rule 3     statement -> set_str
Rule 4     statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER
Rule 5     statement -> LOOP DO statement BREAK IF comparacion
Rule 6     varios_str -> STR
Rule 7     varios_str -> STR COMMA STR
Rule 8     set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 9     set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
Rule 10    set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
Rule 11    statement -> array_vacio
Rule 12    statement -> array_numero
Rule 13    statement -> array_str
Rule 14    array_vacio -> ID EQUALS LBRACKET RBRACKET
Rule 15    array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET
Rule 16    array_str -> ID EQUALS LBRACKET varios_str RBRACKET
Rule 17    statement -> ID EQUALS valor
Rule 18    valor -> numero
Rule 19    valor -> STR
Rule 20    valor -> ID
Rule 21    statement -> IF comparaciones statement END_LOWER
Rule 22    statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
Rule 23    argumentos -> ID
Rule 24    argumentos -> ID COMMA argumentos
Rule 25    statement_list -> statement_list statement
Rule 26    statement_list -> statement
Rule 27    comparador -> EQUAL
Rule 28    comparador -> NOT_EQUAL
Rule 29    comparador -> GREATER_THAN
Rule 30    comparador -> LESS_THAN
Rule 31    comparador -> GREATER_THAN_EQUAL
Rule 32    comparador -> LESS_THAN_EQUAL
Rule 33    comparacion_num -> numero comparador numero
Rule 34    comparacion_variables -> ID EQUAL ID
Rule 35    comparacion_variables -> ID NOT_EQUAL ID
Rule 36    comparacion -> comparacion_num
Rule 37    comparacion -> comparacion_variables
Rule 38    comparaciones -> comparacion
Rule 39    comparaciones -> comparacion conector comparacion
Rule 40    conector -> OP_AND
Rule 41    conector -> OP_OR
Rule 42    numero -> INT
Rule 43    numero -> FLOAT
Rule 44    varios_numeros -> numero
Rule 45    varios_numeros -> numero COMMA varios_numeros
Rule 46    statement -> hash_vacio
Rule 47    statement -> hash_elementos
Rule 48    hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 49    hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
Rule 50    varios_pares_hash -> ID COLON valor
Rule 51    varios_pares_hash -> STR HASHAS valor
Rule 52    varios_pares_hash -> ID COLON valor COMMA varios_pares_hash
Rule 53    varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash

Terminals, with rules where they appear

ALIAS                : 
AND                  : 
ARRAY                : 
AT                   : 
BEGIN                : 
BITWISE_AND          : 
BITWISE_NOT          : 
BITWISE_OR           : 
BITWISE_XOR          : 
BREAK                : 5
CASE                 : 
CLASS                : 
COLON                : 50 52
COMMA                : 7 24 45 52 53
COMPLEX              : 
CONSTANT             : 
DEDENT               : 
DEF                  : 4 22
DEFINED              : 
DIVIDE               : 
DO                   : 5
DOT                  : 
EACH                 : 
ELSE                 : 
ELSEIF               : 
END_LOWER            : 21 22
END_UPPER            : 4
ENSURE               : 
EQUAL                : 27 34
EQUALS               : 8 9 10 14 15 16 17 48 49
EXPONENT             : 
FALSE                : 
FILE                 : 
FLOAT                : 43
FOR                  : 
GLOBAL               : 
GREATER_THAN         : 29
GREATER_THAN_EQUAL   : 31
HASH                 : 
HASHAS               : 51 53
ID                   : 4 8 9 10 14 15 16 17 20 22 23 24 34 34 35 35 48 49 50 52
IF                   : 5 21
IN                   : 
INDENT               : 
INT                  : 42
LBRACKET             : 14 15 16
LCURLYBRACKET        : 8 9 10 48 49
LESS_THAN            : 30
LESS_THAN_EQUAL      : 32
LINE                 : 
LOOP                 : 5
LPARENTHESIS         : 4 22
MINUS                : 
MODULE               : 
MODULO               : 
MULTIPLY             : 
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 28 35
OP_AND               : 40
OP_NOT               : 
OP_OR                : 41
OR                   : 
PLUS                 : 
PUTS                 : 
RATIONAL             : 
RBRACKET             : 14 15 16
RCURLYBRACKET        : 8 9 10 48 49
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPARENTHESIS         : 4 22
SELF                 : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
STR                  : 6 7 7 19 51 53
SUPER                : 
SYMBOL               : 
THEN                 : 
TRUE                 : 
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 
WHILE                : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

argumentos           : 22 24
array_numero         : 12
array_str            : 13
array_vacio          : 11
comparacion          : 5 38 39 39
comparacion_num      : 36
comparacion_variables : 37
comparaciones        : 21
comparador           : 33
conector             : 39
hash_elementos       : 47
hash_vacio           : 46
numero               : 18 33 33 44 45
set_numero           : 2
set_str              : 3
set_vacio            : 1
statement            : 4 5 21 22 25 26 0
statement_list       : 25
valor                : 17 50 51 52 53
varios_numeros       : 9 15 45
varios_pares_hash    : 49 52 53
varios_str           : 10 16

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER
    (5) statement -> . LOOP DO statement BREAK IF comparacion
    (11) statement -> . array_vacio
    (12) statement -> . array_numero
    (13) statement -> . array_str
    (17) statement -> . ID EQUALS valor
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (46) statement -> . hash_vacio
    (47) statement -> . hash_elementos
    (8) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (9) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (10) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (14) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (15) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (16) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (48) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (49) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    DEF             shift and go to state 5
    LOOP            shift and go to state 7
    ID              shift and go to state 6
    IF              shift and go to state 8

    statement                      shift and go to state 1
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 9
    array_numero                   shift and go to state 10
    array_str                      shift and go to state 11
    hash_vacio                     shift and go to state 12
    hash_elementos                 shift and go to state 13

state 1

    (0) S' -> statement .



state 2

    (1) statement -> set_vacio .

    $end            reduce using rule 1 (statement -> set_vacio .)
    BREAK           reduce using rule 1 (statement -> set_vacio .)
    END_LOWER       reduce using rule 1 (statement -> set_vacio .)
    END_UPPER       reduce using rule 1 (statement -> set_vacio .)


state 3

    (2) statement -> set_numero .

    $end            reduce using rule 2 (statement -> set_numero .)
    BREAK           reduce using rule 2 (statement -> set_numero .)
    END_LOWER       reduce using rule 2 (statement -> set_numero .)
    END_UPPER       reduce using rule 2 (statement -> set_numero .)


state 4

    (3) statement -> set_str .

    $end            reduce using rule 3 (statement -> set_str .)
    BREAK           reduce using rule 3 (statement -> set_str .)
    END_LOWER       reduce using rule 3 (statement -> set_str .)
    END_UPPER       reduce using rule 3 (statement -> set_str .)


state 5

    (4) statement -> DEF . ID LPARENTHESIS RPARENTHESIS statement END_UPPER
    (22) statement -> DEF . ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER

    ID              shift and go to state 14


state 6

    (17) statement -> ID . EQUALS valor
    (8) set_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (9) set_numero -> ID . EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (10) set_str -> ID . EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (14) array_vacio -> ID . EQUALS LBRACKET RBRACKET
    (15) array_numero -> ID . EQUALS LBRACKET varios_numeros RBRACKET
    (16) array_str -> ID . EQUALS LBRACKET varios_str RBRACKET
    (48) hash_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (49) hash_elementos -> ID . EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    EQUALS          shift and go to state 15


state 7

    (5) statement -> LOOP . DO statement BREAK IF comparacion

    DO              shift and go to state 16


state 8

    (21) statement -> IF . comparaciones statement END_LOWER
    (38) comparaciones -> . comparacion
    (39) comparaciones -> . comparacion conector comparacion
    (36) comparacion -> . comparacion_num
    (37) comparacion -> . comparacion_variables
    (33) comparacion_num -> . numero comparador numero
    (34) comparacion_variables -> . ID EQUAL ID
    (35) comparacion_variables -> . ID NOT_EQUAL ID
    (42) numero -> . INT
    (43) numero -> . FLOAT

    ID              shift and go to state 22
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    comparaciones                  shift and go to state 17
    comparacion                    shift and go to state 18
    comparacion_num                shift and go to state 19
    comparacion_variables          shift and go to state 20
    numero                         shift and go to state 21

state 9

    (11) statement -> array_vacio .

    $end            reduce using rule 11 (statement -> array_vacio .)
    BREAK           reduce using rule 11 (statement -> array_vacio .)
    END_LOWER       reduce using rule 11 (statement -> array_vacio .)
    END_UPPER       reduce using rule 11 (statement -> array_vacio .)


state 10

    (12) statement -> array_numero .

    $end            reduce using rule 12 (statement -> array_numero .)
    BREAK           reduce using rule 12 (statement -> array_numero .)
    END_LOWER       reduce using rule 12 (statement -> array_numero .)
    END_UPPER       reduce using rule 12 (statement -> array_numero .)


state 11

    (13) statement -> array_str .

    $end            reduce using rule 13 (statement -> array_str .)
    BREAK           reduce using rule 13 (statement -> array_str .)
    END_LOWER       reduce using rule 13 (statement -> array_str .)
    END_UPPER       reduce using rule 13 (statement -> array_str .)


state 12

    (46) statement -> hash_vacio .

    $end            reduce using rule 46 (statement -> hash_vacio .)
    BREAK           reduce using rule 46 (statement -> hash_vacio .)
    END_LOWER       reduce using rule 46 (statement -> hash_vacio .)
    END_UPPER       reduce using rule 46 (statement -> hash_vacio .)


state 13

    (47) statement -> hash_elementos .

    $end            reduce using rule 47 (statement -> hash_elementos .)
    BREAK           reduce using rule 47 (statement -> hash_elementos .)
    END_LOWER       reduce using rule 47 (statement -> hash_elementos .)
    END_UPPER       reduce using rule 47 (statement -> hash_elementos .)


state 14

    (4) statement -> DEF ID . LPARENTHESIS RPARENTHESIS statement END_UPPER
    (22) statement -> DEF ID . LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER

    LPARENTHESIS    shift and go to state 25


state 15

    (17) statement -> ID EQUALS . valor
    (8) set_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (9) set_numero -> ID EQUALS . LCURLYBRACKET varios_numeros RCURLYBRACKET
    (10) set_str -> ID EQUALS . LCURLYBRACKET varios_str RCURLYBRACKET
    (14) array_vacio -> ID EQUALS . LBRACKET RBRACKET
    (15) array_numero -> ID EQUALS . LBRACKET varios_numeros RBRACKET
    (16) array_str -> ID EQUALS . LBRACKET varios_str RBRACKET
    (48) hash_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (49) hash_elementos -> ID EQUALS . LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (18) valor -> . numero
    (19) valor -> . STR
    (20) valor -> . ID
    (42) numero -> . INT
    (43) numero -> . FLOAT

    LCURLYBRACKET   shift and go to state 28
    LBRACKET        shift and go to state 29
    STR             shift and go to state 31
    ID              shift and go to state 26
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    valor                          shift and go to state 27
    numero                         shift and go to state 30

state 16

    (5) statement -> LOOP DO . statement BREAK IF comparacion
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER
    (5) statement -> . LOOP DO statement BREAK IF comparacion
    (11) statement -> . array_vacio
    (12) statement -> . array_numero
    (13) statement -> . array_str
    (17) statement -> . ID EQUALS valor
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (46) statement -> . hash_vacio
    (47) statement -> . hash_elementos
    (8) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (9) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (10) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (14) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (15) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (16) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (48) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (49) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    DEF             shift and go to state 5
    LOOP            shift and go to state 7
    ID              shift and go to state 6
    IF              shift and go to state 8

    statement                      shift and go to state 32
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 9
    array_numero                   shift and go to state 10
    array_str                      shift and go to state 11
    hash_vacio                     shift and go to state 12
    hash_elementos                 shift and go to state 13

state 17

    (21) statement -> IF comparaciones . statement END_LOWER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER
    (5) statement -> . LOOP DO statement BREAK IF comparacion
    (11) statement -> . array_vacio
    (12) statement -> . array_numero
    (13) statement -> . array_str
    (17) statement -> . ID EQUALS valor
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (46) statement -> . hash_vacio
    (47) statement -> . hash_elementos
    (8) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (9) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (10) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (14) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (15) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (16) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (48) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (49) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    DEF             shift and go to state 5
    LOOP            shift and go to state 7
    ID              shift and go to state 6
    IF              shift and go to state 8

    statement                      shift and go to state 33
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 9
    array_numero                   shift and go to state 10
    array_str                      shift and go to state 11
    hash_vacio                     shift and go to state 12
    hash_elementos                 shift and go to state 13

state 18

    (38) comparaciones -> comparacion .
    (39) comparaciones -> comparacion . conector comparacion
    (40) conector -> . OP_AND
    (41) conector -> . OP_OR

    DEF             reduce using rule 38 (comparaciones -> comparacion .)
    LOOP            reduce using rule 38 (comparaciones -> comparacion .)
    ID              reduce using rule 38 (comparaciones -> comparacion .)
    IF              reduce using rule 38 (comparaciones -> comparacion .)
    OP_AND          shift and go to state 35
    OP_OR           shift and go to state 36

    conector                       shift and go to state 34

state 19

    (36) comparacion -> comparacion_num .

    OP_AND          reduce using rule 36 (comparacion -> comparacion_num .)
    OP_OR           reduce using rule 36 (comparacion -> comparacion_num .)
    DEF             reduce using rule 36 (comparacion -> comparacion_num .)
    LOOP            reduce using rule 36 (comparacion -> comparacion_num .)
    ID              reduce using rule 36 (comparacion -> comparacion_num .)
    IF              reduce using rule 36 (comparacion -> comparacion_num .)
    $end            reduce using rule 36 (comparacion -> comparacion_num .)
    BREAK           reduce using rule 36 (comparacion -> comparacion_num .)
    END_LOWER       reduce using rule 36 (comparacion -> comparacion_num .)
    END_UPPER       reduce using rule 36 (comparacion -> comparacion_num .)


state 20

    (37) comparacion -> comparacion_variables .

    OP_AND          reduce using rule 37 (comparacion -> comparacion_variables .)
    OP_OR           reduce using rule 37 (comparacion -> comparacion_variables .)
    DEF             reduce using rule 37 (comparacion -> comparacion_variables .)
    LOOP            reduce using rule 37 (comparacion -> comparacion_variables .)
    ID              reduce using rule 37 (comparacion -> comparacion_variables .)
    IF              reduce using rule 37 (comparacion -> comparacion_variables .)
    $end            reduce using rule 37 (comparacion -> comparacion_variables .)
    BREAK           reduce using rule 37 (comparacion -> comparacion_variables .)
    END_LOWER       reduce using rule 37 (comparacion -> comparacion_variables .)
    END_UPPER       reduce using rule 37 (comparacion -> comparacion_variables .)


state 21

    (33) comparacion_num -> numero . comparador numero
    (27) comparador -> . EQUAL
    (28) comparador -> . NOT_EQUAL
    (29) comparador -> . GREATER_THAN
    (30) comparador -> . LESS_THAN
    (31) comparador -> . GREATER_THAN_EQUAL
    (32) comparador -> . LESS_THAN_EQUAL

    EQUAL           shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    GREATER_THAN    shift and go to state 40
    LESS_THAN       shift and go to state 41
    GREATER_THAN_EQUAL shift and go to state 42
    LESS_THAN_EQUAL shift and go to state 43

    comparador                     shift and go to state 37

state 22

    (34) comparacion_variables -> ID . EQUAL ID
    (35) comparacion_variables -> ID . NOT_EQUAL ID

    EQUAL           shift and go to state 44
    NOT_EQUAL       shift and go to state 45


state 23

    (42) numero -> INT .

    EQUAL           reduce using rule 42 (numero -> INT .)
    NOT_EQUAL       reduce using rule 42 (numero -> INT .)
    GREATER_THAN    reduce using rule 42 (numero -> INT .)
    LESS_THAN       reduce using rule 42 (numero -> INT .)
    GREATER_THAN_EQUAL reduce using rule 42 (numero -> INT .)
    LESS_THAN_EQUAL reduce using rule 42 (numero -> INT .)
    $end            reduce using rule 42 (numero -> INT .)
    BREAK           reduce using rule 42 (numero -> INT .)
    END_LOWER       reduce using rule 42 (numero -> INT .)
    END_UPPER       reduce using rule 42 (numero -> INT .)
    COMMA           reduce using rule 42 (numero -> INT .)
    RCURLYBRACKET   reduce using rule 42 (numero -> INT .)
    RBRACKET        reduce using rule 42 (numero -> INT .)
    OP_AND          reduce using rule 42 (numero -> INT .)
    OP_OR           reduce using rule 42 (numero -> INT .)
    DEF             reduce using rule 42 (numero -> INT .)
    LOOP            reduce using rule 42 (numero -> INT .)
    ID              reduce using rule 42 (numero -> INT .)
    IF              reduce using rule 42 (numero -> INT .)


state 24

    (43) numero -> FLOAT .

    EQUAL           reduce using rule 43 (numero -> FLOAT .)
    NOT_EQUAL       reduce using rule 43 (numero -> FLOAT .)
    GREATER_THAN    reduce using rule 43 (numero -> FLOAT .)
    LESS_THAN       reduce using rule 43 (numero -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 43 (numero -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 43 (numero -> FLOAT .)
    $end            reduce using rule 43 (numero -> FLOAT .)
    BREAK           reduce using rule 43 (numero -> FLOAT .)
    END_LOWER       reduce using rule 43 (numero -> FLOAT .)
    END_UPPER       reduce using rule 43 (numero -> FLOAT .)
    COMMA           reduce using rule 43 (numero -> FLOAT .)
    RCURLYBRACKET   reduce using rule 43 (numero -> FLOAT .)
    RBRACKET        reduce using rule 43 (numero -> FLOAT .)
    OP_AND          reduce using rule 43 (numero -> FLOAT .)
    OP_OR           reduce using rule 43 (numero -> FLOAT .)
    DEF             reduce using rule 43 (numero -> FLOAT .)
    LOOP            reduce using rule 43 (numero -> FLOAT .)
    ID              reduce using rule 43 (numero -> FLOAT .)
    IF              reduce using rule 43 (numero -> FLOAT .)


state 25

    (4) statement -> DEF ID LPARENTHESIS . RPARENTHESIS statement END_UPPER
    (22) statement -> DEF ID LPARENTHESIS . argumentos RPARENTHESIS statement END_LOWER
    (23) argumentos -> . ID
    (24) argumentos -> . ID COMMA argumentos

    RPARENTHESIS    shift and go to state 47
    ID              shift and go to state 46

    argumentos                     shift and go to state 48

state 26

    (20) valor -> ID .

    $end            reduce using rule 20 (valor -> ID .)
    BREAK           reduce using rule 20 (valor -> ID .)
    END_LOWER       reduce using rule 20 (valor -> ID .)
    END_UPPER       reduce using rule 20 (valor -> ID .)
    COMMA           reduce using rule 20 (valor -> ID .)
    RCURLYBRACKET   reduce using rule 20 (valor -> ID .)


state 27

    (17) statement -> ID EQUALS valor .

    $end            reduce using rule 17 (statement -> ID EQUALS valor .)
    BREAK           reduce using rule 17 (statement -> ID EQUALS valor .)
    END_LOWER       reduce using rule 17 (statement -> ID EQUALS valor .)
    END_UPPER       reduce using rule 17 (statement -> ID EQUALS valor .)


state 28

    (8) set_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (9) set_numero -> ID EQUALS LCURLYBRACKET . varios_numeros RCURLYBRACKET
    (10) set_str -> ID EQUALS LCURLYBRACKET . varios_str RCURLYBRACKET
    (48) hash_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (49) hash_elementos -> ID EQUALS LCURLYBRACKET . varios_pares_hash RCURLYBRACKET
    (44) varios_numeros -> . numero
    (45) varios_numeros -> . numero COMMA varios_numeros
    (6) varios_str -> . STR
    (7) varios_str -> . STR COMMA STR
    (50) varios_pares_hash -> . ID COLON valor
    (51) varios_pares_hash -> . STR HASHAS valor
    (52) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (53) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash
    (42) numero -> . INT
    (43) numero -> . FLOAT

    RCURLYBRACKET   shift and go to state 50
    STR             shift and go to state 55
    ID              shift and go to state 49
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    varios_numeros                 shift and go to state 51
    varios_str                     shift and go to state 52
    varios_pares_hash              shift and go to state 53
    numero                         shift and go to state 54

state 29

    (14) array_vacio -> ID EQUALS LBRACKET . RBRACKET
    (15) array_numero -> ID EQUALS LBRACKET . varios_numeros RBRACKET
    (16) array_str -> ID EQUALS LBRACKET . varios_str RBRACKET
    (44) varios_numeros -> . numero
    (45) varios_numeros -> . numero COMMA varios_numeros
    (6) varios_str -> . STR
    (7) varios_str -> . STR COMMA STR
    (42) numero -> . INT
    (43) numero -> . FLOAT

    RBRACKET        shift and go to state 56
    STR             shift and go to state 59
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    varios_numeros                 shift and go to state 57
    varios_str                     shift and go to state 58
    numero                         shift and go to state 54

state 30

    (18) valor -> numero .

    $end            reduce using rule 18 (valor -> numero .)
    BREAK           reduce using rule 18 (valor -> numero .)
    END_LOWER       reduce using rule 18 (valor -> numero .)
    END_UPPER       reduce using rule 18 (valor -> numero .)
    COMMA           reduce using rule 18 (valor -> numero .)
    RCURLYBRACKET   reduce using rule 18 (valor -> numero .)


state 31

    (19) valor -> STR .

    $end            reduce using rule 19 (valor -> STR .)
    BREAK           reduce using rule 19 (valor -> STR .)
    END_LOWER       reduce using rule 19 (valor -> STR .)
    END_UPPER       reduce using rule 19 (valor -> STR .)
    COMMA           reduce using rule 19 (valor -> STR .)
    RCURLYBRACKET   reduce using rule 19 (valor -> STR .)


state 32

    (5) statement -> LOOP DO statement . BREAK IF comparacion

    BREAK           shift and go to state 60


state 33

    (21) statement -> IF comparaciones statement . END_LOWER

    END_LOWER       shift and go to state 61


state 34

    (39) comparaciones -> comparacion conector . comparacion
    (36) comparacion -> . comparacion_num
    (37) comparacion -> . comparacion_variables
    (33) comparacion_num -> . numero comparador numero
    (34) comparacion_variables -> . ID EQUAL ID
    (35) comparacion_variables -> . ID NOT_EQUAL ID
    (42) numero -> . INT
    (43) numero -> . FLOAT

    ID              shift and go to state 22
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    comparacion                    shift and go to state 62
    comparacion_num                shift and go to state 19
    comparacion_variables          shift and go to state 20
    numero                         shift and go to state 21

state 35

    (40) conector -> OP_AND .

    ID              reduce using rule 40 (conector -> OP_AND .)
    INT             reduce using rule 40 (conector -> OP_AND .)
    FLOAT           reduce using rule 40 (conector -> OP_AND .)


state 36

    (41) conector -> OP_OR .

    ID              reduce using rule 41 (conector -> OP_OR .)
    INT             reduce using rule 41 (conector -> OP_OR .)
    FLOAT           reduce using rule 41 (conector -> OP_OR .)


state 37

    (33) comparacion_num -> numero comparador . numero
    (42) numero -> . INT
    (43) numero -> . FLOAT

    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    numero                         shift and go to state 63

state 38

    (27) comparador -> EQUAL .

    INT             reduce using rule 27 (comparador -> EQUAL .)
    FLOAT           reduce using rule 27 (comparador -> EQUAL .)


state 39

    (28) comparador -> NOT_EQUAL .

    INT             reduce using rule 28 (comparador -> NOT_EQUAL .)
    FLOAT           reduce using rule 28 (comparador -> NOT_EQUAL .)


state 40

    (29) comparador -> GREATER_THAN .

    INT             reduce using rule 29 (comparador -> GREATER_THAN .)
    FLOAT           reduce using rule 29 (comparador -> GREATER_THAN .)


state 41

    (30) comparador -> LESS_THAN .

    INT             reduce using rule 30 (comparador -> LESS_THAN .)
    FLOAT           reduce using rule 30 (comparador -> LESS_THAN .)


state 42

    (31) comparador -> GREATER_THAN_EQUAL .

    INT             reduce using rule 31 (comparador -> GREATER_THAN_EQUAL .)
    FLOAT           reduce using rule 31 (comparador -> GREATER_THAN_EQUAL .)


state 43

    (32) comparador -> LESS_THAN_EQUAL .

    INT             reduce using rule 32 (comparador -> LESS_THAN_EQUAL .)
    FLOAT           reduce using rule 32 (comparador -> LESS_THAN_EQUAL .)


state 44

    (34) comparacion_variables -> ID EQUAL . ID

    ID              shift and go to state 64


state 45

    (35) comparacion_variables -> ID NOT_EQUAL . ID

    ID              shift and go to state 65


state 46

    (23) argumentos -> ID .
    (24) argumentos -> ID . COMMA argumentos

    RPARENTHESIS    reduce using rule 23 (argumentos -> ID .)
    COMMA           shift and go to state 66


state 47

    (4) statement -> DEF ID LPARENTHESIS RPARENTHESIS . statement END_UPPER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER
    (5) statement -> . LOOP DO statement BREAK IF comparacion
    (11) statement -> . array_vacio
    (12) statement -> . array_numero
    (13) statement -> . array_str
    (17) statement -> . ID EQUALS valor
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (46) statement -> . hash_vacio
    (47) statement -> . hash_elementos
    (8) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (9) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (10) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (14) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (15) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (16) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (48) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (49) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    DEF             shift and go to state 5
    LOOP            shift and go to state 7
    ID              shift and go to state 6
    IF              shift and go to state 8

    statement                      shift and go to state 67
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 9
    array_numero                   shift and go to state 10
    array_str                      shift and go to state 11
    hash_vacio                     shift and go to state 12
    hash_elementos                 shift and go to state 13

state 48

    (22) statement -> DEF ID LPARENTHESIS argumentos . RPARENTHESIS statement END_LOWER

    RPARENTHESIS    shift and go to state 68


state 49

    (50) varios_pares_hash -> ID . COLON valor
    (52) varios_pares_hash -> ID . COLON valor COMMA varios_pares_hash

    COLON           shift and go to state 69


state 50

    (8) set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .
    (48) hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .

  ! reduce/reduce conflict for $end resolved using rule 8 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for BREAK resolved using rule 8 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 8 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for END_UPPER resolved using rule 8 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    $end            reduce using rule 8 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    BREAK           reduce using rule 8 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    END_LOWER       reduce using rule 8 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    END_UPPER       reduce using rule 8 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)

  ! $end            [ reduce using rule 48 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! BREAK           [ reduce using rule 48 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! END_LOWER       [ reduce using rule 48 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! END_UPPER       [ reduce using rule 48 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]


state 51

    (9) set_numero -> ID EQUALS LCURLYBRACKET varios_numeros . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 70


state 52

    (10) set_str -> ID EQUALS LCURLYBRACKET varios_str . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 71


state 53

    (49) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 72


state 54

    (44) varios_numeros -> numero .
    (45) varios_numeros -> numero . COMMA varios_numeros

    RCURLYBRACKET   reduce using rule 44 (varios_numeros -> numero .)
    RBRACKET        reduce using rule 44 (varios_numeros -> numero .)
    COMMA           shift and go to state 73


state 55

    (6) varios_str -> STR .
    (7) varios_str -> STR . COMMA STR
    (51) varios_pares_hash -> STR . HASHAS valor
    (53) varios_pares_hash -> STR . HASHAS valor COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 6 (varios_str -> STR .)
    COMMA           shift and go to state 74
    HASHAS          shift and go to state 75


state 56

    (14) array_vacio -> ID EQUALS LBRACKET RBRACKET .

    $end            reduce using rule 14 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    BREAK           reduce using rule 14 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    END_LOWER       reduce using rule 14 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    END_UPPER       reduce using rule 14 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)


state 57

    (15) array_numero -> ID EQUALS LBRACKET varios_numeros . RBRACKET

    RBRACKET        shift and go to state 76


state 58

    (16) array_str -> ID EQUALS LBRACKET varios_str . RBRACKET

    RBRACKET        shift and go to state 77


state 59

    (6) varios_str -> STR .
    (7) varios_str -> STR . COMMA STR

    RBRACKET        reduce using rule 6 (varios_str -> STR .)
    COMMA           shift and go to state 74


state 60

    (5) statement -> LOOP DO statement BREAK . IF comparacion

    IF              shift and go to state 78


state 61

    (21) statement -> IF comparaciones statement END_LOWER .

    $end            reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    BREAK           reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    END_LOWER       reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    END_UPPER       reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)


state 62

    (39) comparaciones -> comparacion conector comparacion .

    DEF             reduce using rule 39 (comparaciones -> comparacion conector comparacion .)
    LOOP            reduce using rule 39 (comparaciones -> comparacion conector comparacion .)
    ID              reduce using rule 39 (comparaciones -> comparacion conector comparacion .)
    IF              reduce using rule 39 (comparaciones -> comparacion conector comparacion .)


state 63

    (33) comparacion_num -> numero comparador numero .

    OP_AND          reduce using rule 33 (comparacion_num -> numero comparador numero .)
    OP_OR           reduce using rule 33 (comparacion_num -> numero comparador numero .)
    DEF             reduce using rule 33 (comparacion_num -> numero comparador numero .)
    LOOP            reduce using rule 33 (comparacion_num -> numero comparador numero .)
    ID              reduce using rule 33 (comparacion_num -> numero comparador numero .)
    IF              reduce using rule 33 (comparacion_num -> numero comparador numero .)
    $end            reduce using rule 33 (comparacion_num -> numero comparador numero .)
    BREAK           reduce using rule 33 (comparacion_num -> numero comparador numero .)
    END_LOWER       reduce using rule 33 (comparacion_num -> numero comparador numero .)
    END_UPPER       reduce using rule 33 (comparacion_num -> numero comparador numero .)


state 64

    (34) comparacion_variables -> ID EQUAL ID .

    OP_AND          reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    OP_OR           reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    DEF             reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    LOOP            reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    ID              reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    IF              reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    $end            reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    BREAK           reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    END_LOWER       reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)
    END_UPPER       reduce using rule 34 (comparacion_variables -> ID EQUAL ID .)


state 65

    (35) comparacion_variables -> ID NOT_EQUAL ID .

    OP_AND          reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    OP_OR           reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    DEF             reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    LOOP            reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    ID              reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    IF              reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    $end            reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    BREAK           reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    END_LOWER       reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)
    END_UPPER       reduce using rule 35 (comparacion_variables -> ID NOT_EQUAL ID .)


state 66

    (24) argumentos -> ID COMMA . argumentos
    (23) argumentos -> . ID
    (24) argumentos -> . ID COMMA argumentos

    ID              shift and go to state 46

    argumentos                     shift and go to state 79

state 67

    (4) statement -> DEF ID LPARENTHESIS RPARENTHESIS statement . END_UPPER

    END_UPPER       shift and go to state 80


state 68

    (22) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS . statement END_LOWER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER
    (5) statement -> . LOOP DO statement BREAK IF comparacion
    (11) statement -> . array_vacio
    (12) statement -> . array_numero
    (13) statement -> . array_str
    (17) statement -> . ID EQUALS valor
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (46) statement -> . hash_vacio
    (47) statement -> . hash_elementos
    (8) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (9) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (10) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (14) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (15) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (16) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (48) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (49) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    DEF             shift and go to state 5
    LOOP            shift and go to state 7
    ID              shift and go to state 6
    IF              shift and go to state 8

    statement                      shift and go to state 81
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 9
    array_numero                   shift and go to state 10
    array_str                      shift and go to state 11
    hash_vacio                     shift and go to state 12
    hash_elementos                 shift and go to state 13

state 69

    (50) varios_pares_hash -> ID COLON . valor
    (52) varios_pares_hash -> ID COLON . valor COMMA varios_pares_hash
    (18) valor -> . numero
    (19) valor -> . STR
    (20) valor -> . ID
    (42) numero -> . INT
    (43) numero -> . FLOAT

    STR             shift and go to state 31
    ID              shift and go to state 26
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    valor                          shift and go to state 82
    numero                         shift and go to state 30

state 70

    (9) set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .

    $end            reduce using rule 9 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    BREAK           reduce using rule 9 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    END_LOWER       reduce using rule 9 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    END_UPPER       reduce using rule 9 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)


state 71

    (10) set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .

    $end            reduce using rule 10 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    BREAK           reduce using rule 10 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    END_LOWER       reduce using rule 10 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    END_UPPER       reduce using rule 10 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)


state 72

    (49) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .

    $end            reduce using rule 49 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    BREAK           reduce using rule 49 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    END_LOWER       reduce using rule 49 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    END_UPPER       reduce using rule 49 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)


state 73

    (45) varios_numeros -> numero COMMA . varios_numeros
    (44) varios_numeros -> . numero
    (45) varios_numeros -> . numero COMMA varios_numeros
    (42) numero -> . INT
    (43) numero -> . FLOAT

    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    numero                         shift and go to state 54
    varios_numeros                 shift and go to state 83

state 74

    (7) varios_str -> STR COMMA . STR

    STR             shift and go to state 84


state 75

    (51) varios_pares_hash -> STR HASHAS . valor
    (53) varios_pares_hash -> STR HASHAS . valor COMMA varios_pares_hash
    (18) valor -> . numero
    (19) valor -> . STR
    (20) valor -> . ID
    (42) numero -> . INT
    (43) numero -> . FLOAT

    STR             shift and go to state 31
    ID              shift and go to state 26
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    valor                          shift and go to state 85
    numero                         shift and go to state 30

state 76

    (15) array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .

    $end            reduce using rule 15 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    BREAK           reduce using rule 15 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    END_LOWER       reduce using rule 15 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    END_UPPER       reduce using rule 15 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)


state 77

    (16) array_str -> ID EQUALS LBRACKET varios_str RBRACKET .

    $end            reduce using rule 16 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    BREAK           reduce using rule 16 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    END_LOWER       reduce using rule 16 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    END_UPPER       reduce using rule 16 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)


state 78

    (5) statement -> LOOP DO statement BREAK IF . comparacion
    (36) comparacion -> . comparacion_num
    (37) comparacion -> . comparacion_variables
    (33) comparacion_num -> . numero comparador numero
    (34) comparacion_variables -> . ID EQUAL ID
    (35) comparacion_variables -> . ID NOT_EQUAL ID
    (42) numero -> . INT
    (43) numero -> . FLOAT

    ID              shift and go to state 22
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    comparacion                    shift and go to state 86
    comparacion_num                shift and go to state 19
    comparacion_variables          shift and go to state 20
    numero                         shift and go to state 21

state 79

    (24) argumentos -> ID COMMA argumentos .

    RPARENTHESIS    reduce using rule 24 (argumentos -> ID COMMA argumentos .)


state 80

    (4) statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER .

    $end            reduce using rule 4 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER .)
    BREAK           reduce using rule 4 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER .)
    END_LOWER       reduce using rule 4 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER .)
    END_UPPER       reduce using rule 4 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_UPPER .)


state 81

    (22) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement . END_LOWER

    END_LOWER       shift and go to state 87


state 82

    (50) varios_pares_hash -> ID COLON valor .
    (52) varios_pares_hash -> ID COLON valor . COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 50 (varios_pares_hash -> ID COLON valor .)
    COMMA           shift and go to state 88


state 83

    (45) varios_numeros -> numero COMMA varios_numeros .

    RCURLYBRACKET   reduce using rule 45 (varios_numeros -> numero COMMA varios_numeros .)
    RBRACKET        reduce using rule 45 (varios_numeros -> numero COMMA varios_numeros .)


state 84

    (7) varios_str -> STR COMMA STR .

    RCURLYBRACKET   reduce using rule 7 (varios_str -> STR COMMA STR .)
    RBRACKET        reduce using rule 7 (varios_str -> STR COMMA STR .)


state 85

    (51) varios_pares_hash -> STR HASHAS valor .
    (53) varios_pares_hash -> STR HASHAS valor . COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 51 (varios_pares_hash -> STR HASHAS valor .)
    COMMA           shift and go to state 89


state 86

    (5) statement -> LOOP DO statement BREAK IF comparacion .

    $end            reduce using rule 5 (statement -> LOOP DO statement BREAK IF comparacion .)
    BREAK           reduce using rule 5 (statement -> LOOP DO statement BREAK IF comparacion .)
    END_LOWER       reduce using rule 5 (statement -> LOOP DO statement BREAK IF comparacion .)
    END_UPPER       reduce using rule 5 (statement -> LOOP DO statement BREAK IF comparacion .)


state 87

    (22) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .

    $end            reduce using rule 22 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    BREAK           reduce using rule 22 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    END_LOWER       reduce using rule 22 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    END_UPPER       reduce using rule 22 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)


state 88

    (52) varios_pares_hash -> ID COLON valor COMMA . varios_pares_hash
    (50) varios_pares_hash -> . ID COLON valor
    (51) varios_pares_hash -> . STR HASHAS valor
    (52) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (53) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash

    ID              shift and go to state 49
    STR             shift and go to state 91

    varios_pares_hash              shift and go to state 90

state 89

    (53) varios_pares_hash -> STR HASHAS valor COMMA . varios_pares_hash
    (50) varios_pares_hash -> . ID COLON valor
    (51) varios_pares_hash -> . STR HASHAS valor
    (52) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (53) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash

    ID              shift and go to state 49
    STR             shift and go to state 91

    varios_pares_hash              shift and go to state 92

state 90

    (52) varios_pares_hash -> ID COLON valor COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 52 (varios_pares_hash -> ID COLON valor COMMA varios_pares_hash .)


state 91

    (51) varios_pares_hash -> STR . HASHAS valor
    (53) varios_pares_hash -> STR . HASHAS valor COMMA varios_pares_hash

    HASHAS          shift and go to state 75


state 92

    (53) varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 53 (varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 50 resolved using rule (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET)
WARNING: rejected rule (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET) in state 50
WARNING: Rule (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET) is never reduced
