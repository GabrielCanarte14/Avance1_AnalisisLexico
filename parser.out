Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    ARRAY
    BEGIN
    BITWISE_AND
    BITWISE_NOT
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CLASS
    COMPLEX
    CONSTANT
    DEDENT
    DEFINED
    DO
    DOT
    DOUBLYAT
    EACH
    ELSEIF
    END_UPPER
    ENSURE
    EQUAL
    EXPONENT
    FILE
    FOR
    GREATER_THAN
    GREATER_THAN_EQUAL
    HASH
    HASHTAG
    IF
    IN
    INDENT
    LESS_THAN
    LESS_THAN_EQUAL
    LINE
    LOOP
    MODULE
    MODULO
    NEWLINE
    NEXT
    NIL
    NOT
    NOT_EQUAL
    OP_AND
    OP_NOT
    OP_OR
    OR
    RATIONAL
    REDO
    RESCUE
    RETRY
    RETURN
    SELF
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SUPER
    SYMBOL
    UNDEF
    UNLESS
    UNTIL
    WHILE
    YIELD

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> variable_list EQUALS expression_list
Rule 3     variable_list -> ID
Rule 4     variable_list -> variable_list COMMA ID
Rule 5     expression_list -> expression
Rule 6     expression_list -> expression_list COMMA expression
Rule 7     expression -> ID EQUALS expression
Rule 8     expression -> AT ID EQUALS expression
Rule 9     expression -> GLOBAL ID EQUALS expression
Rule 10    expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
Rule 11    expression -> expression PLUS expression
Rule 12    expression -> expression MINUS expression
Rule 13    expression -> expression MULTIPLY expression
Rule 14    expression -> expression DIVIDE expression
Rule 15    statement -> set_vacio
Rule 16    statement -> set_elementos
Rule 17    set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
Rule 18    set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
Rule 19    varios_set_elementos -> INT
Rule 20    varios_set_elementos -> STR
Rule 21    varios_set_elementos -> FLOAT
Rule 22    varios_set_elementos -> INT COMMA varios_set_elementos
Rule 23    varios_set_elementos -> FLOAT COMMA varios_set_elementos
Rule 24    varios_set_elementos -> STR COMMA varios_set_elementos
Rule 25    statement -> array
Rule 26    array -> ID EQUALS LBRACKET RBRACKET
Rule 27    array -> ID EQUALS LBRACKET string_lista RBRACKET
Rule 28    string_lista -> STR
Rule 29    string_lista -> STR COMMA string_lista
Rule 30    array -> ID EQUALS LBRACKET int_lista RBRACKET
Rule 31    int_lista -> INT
Rule 32    int_lista -> INT COMMA int_lista
Rule 33    statement -> hash_vacio
Rule 34    statement -> hash_elementos
Rule 35    hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 36    hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
Rule 37    varios_pares_hash -> ID COLON expression
Rule 38    varios_pares_hash -> STR HASHAS expression
Rule 39    varios_pares_hash -> ID COLON expression COMMA varios_pares_hash
Rule 40    varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash
Rule 41    expression -> INT
Rule 42    expression -> FLOAT
Rule 43    expression -> STR
Rule 44    expression -> TRUE
Rule 45    expression -> FALSE
Rule 46    expression -> COLON ID
Rule 47    expression -> ID
Rule 48    statement -> PUTS STR
Rule 49    statement -> PRINT STR
Rule 50    statement -> PUTS INT
Rule 51    statement -> PRINT INT
Rule 52    statement -> PUTS FLOAT
Rule 53    statement -> PRINT FLOAT
Rule 54    statement -> PUTS ID
Rule 55    statement -> PRINT ID
Rule 56    statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
Rule 57    statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
Rule 58    parameters -> ID
Rule 59    parameters -> parameters COMMA ID
Rule 60    statements -> statement
Rule 61    statements -> statements COMMA statement
Rule 62    statement -> CASE expression case_when_list ELSE statement_list END_LOWER
Rule 63    case_when_list -> case_when
Rule 64    case_when_list -> case_when_list case_when
Rule 65    case_when -> WHEN expression THEN statement_list
Rule 66    case_when -> ELSE THEN statement_list
Rule 67    statement_list -> statement
Rule 68    statement_list -> statement_list statement

Terminals, with rules where they appear

ALIAS                : 
AND                  : 
ARRAY                : 
AT                   : 8
BEGIN                : 
BITWISE_AND          : 
BITWISE_NOT          : 
BITWISE_OR           : 
BITWISE_XOR          : 
BREAK                : 
CASE                 : 62
CLASS                : 
COLON                : 37 39 46
COMMA                : 4 6 10 22 23 24 29 32 39 40 59 61
COMPLEX              : 
CONSTANT             : 
DEDENT               : 
DEF                  : 56 57
DEFINED              : 
DIVIDE               : 14
DO                   : 
DOT                  : 
DOUBLYAT             : 
EACH                 : 
ELSE                 : 62 66
ELSEIF               : 
END_LOWER            : 62
END_UPPER            : 
ENSURE               : 
EQUAL                : 
EQUALS               : 2 7 8 9 10 17 18 26 27 30 35 36
EXPONENT             : 
FALSE                : 45
FILE                 : 
FLOAT                : 21 23 42 52 53
FOR                  : 
GLOBAL               : 9
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
HASH                 : 
HASHAS               : 38 40
HASHTAG              : 
ID                   : 3 4 7 8 9 10 17 18 26 27 30 35 36 37 39 46 47 54 55 56 57 58 59
IF                   : 
IN                   : 
INDENT               : 
INT                  : 10 10 19 22 31 32 41 50 51
LBRACKET             : 26 27 30
LCURLYBRACKET        : 17 18 35 36 56 57
LESS_THAN            : 
LESS_THAN_EQUAL      : 
LINE                 : 
LOOP                 : 
LPARENTHESIS         : 10 56 57
MINUS                : 12
MODULE               : 
MODULO               : 
MULTIPLY             : 13
NEWLINE              : 
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 
OP_AND               : 
OP_NOT               : 
OP_OR                : 
OR                   : 
PLUS                 : 11
PRINT                : 49 51 53 55
PUTS                 : 48 50 52 54
RATIONAL             : 
RBRACKET             : 26 27 30
RCURLYBRACKET        : 17 18 35 36 56 57
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPARENTHESIS         : 10 56 57
Rational             : 10
SELF                 : 
SEMICOLON            : 
SET                  : 17 18
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
STR                  : 20 24 28 29 38 40 43 48 49
SUPER                : 
SYMBOL               : 
THEN                 : 65 66
TRUE                 : 44
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 65
WHILE                : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

array                : 25
case_when            : 63 64
case_when_list       : 62 64
expression           : 1 5 6 7 8 9 11 11 12 12 13 13 14 14 37 38 39 40 62 65
expression_list      : 2 6
hash_elementos       : 34
hash_vacio           : 33
int_lista            : 30 32
parameters           : 57 59
set_elementos        : 16
set_vacio            : 15
statement            : 60 61 67 68 0
statement_list       : 62 65 66 68
statements           : 56 57 61
string_lista         : 27 29
variable_list        : 2 4
varios_pares_hash    : 36 39 40
varios_set_elementos : 18 22 23 24

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    END_LOWER       reduce using rule 1 (statement -> expression .)
    PUTS            reduce using rule 1 (statement -> expression .)
    PRINT           reduce using rule 1 (statement -> expression .)
    DEF             reduce using rule 1 (statement -> expression .)
    CASE            reduce using rule 1 (statement -> expression .)
    ID              reduce using rule 1 (statement -> expression .)
    AT              reduce using rule 1 (statement -> expression .)
    GLOBAL          reduce using rule 1 (statement -> expression .)
    INT             reduce using rule 1 (statement -> expression .)
    FLOAT           reduce using rule 1 (statement -> expression .)
    STR             reduce using rule 1 (statement -> expression .)
    TRUE            reduce using rule 1 (statement -> expression .)
    FALSE           reduce using rule 1 (statement -> expression .)
    COLON           reduce using rule 1 (statement -> expression .)
    ELSE            reduce using rule 1 (statement -> expression .)
    WHEN            reduce using rule 1 (statement -> expression .)
    RCURLYBRACKET   reduce using rule 1 (statement -> expression .)
    COMMA           reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25


state 3

    (15) statement -> set_vacio .

    $end            reduce using rule 15 (statement -> set_vacio .)
    END_LOWER       reduce using rule 15 (statement -> set_vacio .)
    PUTS            reduce using rule 15 (statement -> set_vacio .)
    PRINT           reduce using rule 15 (statement -> set_vacio .)
    DEF             reduce using rule 15 (statement -> set_vacio .)
    CASE            reduce using rule 15 (statement -> set_vacio .)
    ID              reduce using rule 15 (statement -> set_vacio .)
    AT              reduce using rule 15 (statement -> set_vacio .)
    GLOBAL          reduce using rule 15 (statement -> set_vacio .)
    INT             reduce using rule 15 (statement -> set_vacio .)
    FLOAT           reduce using rule 15 (statement -> set_vacio .)
    STR             reduce using rule 15 (statement -> set_vacio .)
    TRUE            reduce using rule 15 (statement -> set_vacio .)
    FALSE           reduce using rule 15 (statement -> set_vacio .)
    COLON           reduce using rule 15 (statement -> set_vacio .)
    ELSE            reduce using rule 15 (statement -> set_vacio .)
    WHEN            reduce using rule 15 (statement -> set_vacio .)
    RCURLYBRACKET   reduce using rule 15 (statement -> set_vacio .)
    COMMA           reduce using rule 15 (statement -> set_vacio .)


state 4

    (16) statement -> set_elementos .

    $end            reduce using rule 16 (statement -> set_elementos .)
    END_LOWER       reduce using rule 16 (statement -> set_elementos .)
    PUTS            reduce using rule 16 (statement -> set_elementos .)
    PRINT           reduce using rule 16 (statement -> set_elementos .)
    DEF             reduce using rule 16 (statement -> set_elementos .)
    CASE            reduce using rule 16 (statement -> set_elementos .)
    ID              reduce using rule 16 (statement -> set_elementos .)
    AT              reduce using rule 16 (statement -> set_elementos .)
    GLOBAL          reduce using rule 16 (statement -> set_elementos .)
    INT             reduce using rule 16 (statement -> set_elementos .)
    FLOAT           reduce using rule 16 (statement -> set_elementos .)
    STR             reduce using rule 16 (statement -> set_elementos .)
    TRUE            reduce using rule 16 (statement -> set_elementos .)
    FALSE           reduce using rule 16 (statement -> set_elementos .)
    COLON           reduce using rule 16 (statement -> set_elementos .)
    ELSE            reduce using rule 16 (statement -> set_elementos .)
    WHEN            reduce using rule 16 (statement -> set_elementos .)
    RCURLYBRACKET   reduce using rule 16 (statement -> set_elementos .)
    COMMA           reduce using rule 16 (statement -> set_elementos .)


state 5

    (25) statement -> array .

    $end            reduce using rule 25 (statement -> array .)
    END_LOWER       reduce using rule 25 (statement -> array .)
    PUTS            reduce using rule 25 (statement -> array .)
    PRINT           reduce using rule 25 (statement -> array .)
    DEF             reduce using rule 25 (statement -> array .)
    CASE            reduce using rule 25 (statement -> array .)
    ID              reduce using rule 25 (statement -> array .)
    AT              reduce using rule 25 (statement -> array .)
    GLOBAL          reduce using rule 25 (statement -> array .)
    INT             reduce using rule 25 (statement -> array .)
    FLOAT           reduce using rule 25 (statement -> array .)
    STR             reduce using rule 25 (statement -> array .)
    TRUE            reduce using rule 25 (statement -> array .)
    FALSE           reduce using rule 25 (statement -> array .)
    COLON           reduce using rule 25 (statement -> array .)
    ELSE            reduce using rule 25 (statement -> array .)
    WHEN            reduce using rule 25 (statement -> array .)
    RCURLYBRACKET   reduce using rule 25 (statement -> array .)
    COMMA           reduce using rule 25 (statement -> array .)


state 6

    (33) statement -> hash_vacio .

    $end            reduce using rule 33 (statement -> hash_vacio .)
    END_LOWER       reduce using rule 33 (statement -> hash_vacio .)
    PUTS            reduce using rule 33 (statement -> hash_vacio .)
    PRINT           reduce using rule 33 (statement -> hash_vacio .)
    DEF             reduce using rule 33 (statement -> hash_vacio .)
    CASE            reduce using rule 33 (statement -> hash_vacio .)
    ID              reduce using rule 33 (statement -> hash_vacio .)
    AT              reduce using rule 33 (statement -> hash_vacio .)
    GLOBAL          reduce using rule 33 (statement -> hash_vacio .)
    INT             reduce using rule 33 (statement -> hash_vacio .)
    FLOAT           reduce using rule 33 (statement -> hash_vacio .)
    STR             reduce using rule 33 (statement -> hash_vacio .)
    TRUE            reduce using rule 33 (statement -> hash_vacio .)
    FALSE           reduce using rule 33 (statement -> hash_vacio .)
    COLON           reduce using rule 33 (statement -> hash_vacio .)
    ELSE            reduce using rule 33 (statement -> hash_vacio .)
    WHEN            reduce using rule 33 (statement -> hash_vacio .)
    RCURLYBRACKET   reduce using rule 33 (statement -> hash_vacio .)
    COMMA           reduce using rule 33 (statement -> hash_vacio .)


state 7

    (34) statement -> hash_elementos .

    $end            reduce using rule 34 (statement -> hash_elementos .)
    END_LOWER       reduce using rule 34 (statement -> hash_elementos .)
    PUTS            reduce using rule 34 (statement -> hash_elementos .)
    PRINT           reduce using rule 34 (statement -> hash_elementos .)
    DEF             reduce using rule 34 (statement -> hash_elementos .)
    CASE            reduce using rule 34 (statement -> hash_elementos .)
    ID              reduce using rule 34 (statement -> hash_elementos .)
    AT              reduce using rule 34 (statement -> hash_elementos .)
    GLOBAL          reduce using rule 34 (statement -> hash_elementos .)
    INT             reduce using rule 34 (statement -> hash_elementos .)
    FLOAT           reduce using rule 34 (statement -> hash_elementos .)
    STR             reduce using rule 34 (statement -> hash_elementos .)
    TRUE            reduce using rule 34 (statement -> hash_elementos .)
    FALSE           reduce using rule 34 (statement -> hash_elementos .)
    COLON           reduce using rule 34 (statement -> hash_elementos .)
    ELSE            reduce using rule 34 (statement -> hash_elementos .)
    WHEN            reduce using rule 34 (statement -> hash_elementos .)
    RCURLYBRACKET   reduce using rule 34 (statement -> hash_elementos .)
    COMMA           reduce using rule 34 (statement -> hash_elementos .)


state 8

    (48) statement -> PUTS . STR
    (50) statement -> PUTS . INT
    (52) statement -> PUTS . FLOAT
    (54) statement -> PUTS . ID

    STR             shift and go to state 26
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    ID              shift and go to state 29


state 9

    (43) expression -> STR .

    PLUS            reduce using rule 43 (expression -> STR .)
    MINUS           reduce using rule 43 (expression -> STR .)
    MULTIPLY        reduce using rule 43 (expression -> STR .)
    DIVIDE          reduce using rule 43 (expression -> STR .)
    $end            reduce using rule 43 (expression -> STR .)
    WHEN            reduce using rule 43 (expression -> STR .)
    ELSE            reduce using rule 43 (expression -> STR .)
    END_LOWER       reduce using rule 43 (expression -> STR .)
    PUTS            reduce using rule 43 (expression -> STR .)
    PRINT           reduce using rule 43 (expression -> STR .)
    DEF             reduce using rule 43 (expression -> STR .)
    CASE            reduce using rule 43 (expression -> STR .)
    ID              reduce using rule 43 (expression -> STR .)
    AT              reduce using rule 43 (expression -> STR .)
    GLOBAL          reduce using rule 43 (expression -> STR .)
    INT             reduce using rule 43 (expression -> STR .)
    FLOAT           reduce using rule 43 (expression -> STR .)
    STR             reduce using rule 43 (expression -> STR .)
    TRUE            reduce using rule 43 (expression -> STR .)
    FALSE           reduce using rule 43 (expression -> STR .)
    COLON           reduce using rule 43 (expression -> STR .)
    RCURLYBRACKET   reduce using rule 43 (expression -> STR .)
    COMMA           reduce using rule 43 (expression -> STR .)
    THEN            reduce using rule 43 (expression -> STR .)


state 10

    (49) statement -> PRINT . STR
    (51) statement -> PRINT . INT
    (53) statement -> PRINT . FLOAT
    (55) statement -> PRINT . ID

    STR             shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    ID              shift and go to state 33


state 11

    (41) expression -> INT .

    PLUS            reduce using rule 41 (expression -> INT .)
    MINUS           reduce using rule 41 (expression -> INT .)
    MULTIPLY        reduce using rule 41 (expression -> INT .)
    DIVIDE          reduce using rule 41 (expression -> INT .)
    $end            reduce using rule 41 (expression -> INT .)
    WHEN            reduce using rule 41 (expression -> INT .)
    ELSE            reduce using rule 41 (expression -> INT .)
    END_LOWER       reduce using rule 41 (expression -> INT .)
    PUTS            reduce using rule 41 (expression -> INT .)
    PRINT           reduce using rule 41 (expression -> INT .)
    DEF             reduce using rule 41 (expression -> INT .)
    CASE            reduce using rule 41 (expression -> INT .)
    ID              reduce using rule 41 (expression -> INT .)
    AT              reduce using rule 41 (expression -> INT .)
    GLOBAL          reduce using rule 41 (expression -> INT .)
    INT             reduce using rule 41 (expression -> INT .)
    FLOAT           reduce using rule 41 (expression -> INT .)
    STR             reduce using rule 41 (expression -> INT .)
    TRUE            reduce using rule 41 (expression -> INT .)
    FALSE           reduce using rule 41 (expression -> INT .)
    COLON           reduce using rule 41 (expression -> INT .)
    RCURLYBRACKET   reduce using rule 41 (expression -> INT .)
    COMMA           reduce using rule 41 (expression -> INT .)
    THEN            reduce using rule 41 (expression -> INT .)


state 12

    (42) expression -> FLOAT .

    PLUS            reduce using rule 42 (expression -> FLOAT .)
    MINUS           reduce using rule 42 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 42 (expression -> FLOAT .)
    DIVIDE          reduce using rule 42 (expression -> FLOAT .)
    $end            reduce using rule 42 (expression -> FLOAT .)
    WHEN            reduce using rule 42 (expression -> FLOAT .)
    ELSE            reduce using rule 42 (expression -> FLOAT .)
    END_LOWER       reduce using rule 42 (expression -> FLOAT .)
    PUTS            reduce using rule 42 (expression -> FLOAT .)
    PRINT           reduce using rule 42 (expression -> FLOAT .)
    DEF             reduce using rule 42 (expression -> FLOAT .)
    CASE            reduce using rule 42 (expression -> FLOAT .)
    ID              reduce using rule 42 (expression -> FLOAT .)
    AT              reduce using rule 42 (expression -> FLOAT .)
    GLOBAL          reduce using rule 42 (expression -> FLOAT .)
    INT             reduce using rule 42 (expression -> FLOAT .)
    FLOAT           reduce using rule 42 (expression -> FLOAT .)
    STR             reduce using rule 42 (expression -> FLOAT .)
    TRUE            reduce using rule 42 (expression -> FLOAT .)
    FALSE           reduce using rule 42 (expression -> FLOAT .)
    COLON           reduce using rule 42 (expression -> FLOAT .)
    RCURLYBRACKET   reduce using rule 42 (expression -> FLOAT .)
    COMMA           reduce using rule 42 (expression -> FLOAT .)
    THEN            reduce using rule 42 (expression -> FLOAT .)


state 13

    (7) expression -> ID . EQUALS expression
    (10) expression -> ID . EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (47) expression -> ID .
    (17) set_vacio -> ID . EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> ID . EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> ID . EQUALS LBRACKET RBRACKET
    (27) array -> ID . EQUALS LBRACKET string_lista RBRACKET
    (30) array -> ID . EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> ID . EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> ID .

  ! shift/reduce conflict for EQUALS resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 3 (variable_list -> ID .)
    EQUALS          shift and go to state 34
    PLUS            reduce using rule 47 (expression -> ID .)
    MINUS           reduce using rule 47 (expression -> ID .)
    MULTIPLY        reduce using rule 47 (expression -> ID .)
    DIVIDE          reduce using rule 47 (expression -> ID .)
    $end            reduce using rule 47 (expression -> ID .)
    END_LOWER       reduce using rule 47 (expression -> ID .)
    PUTS            reduce using rule 47 (expression -> ID .)
    PRINT           reduce using rule 47 (expression -> ID .)
    DEF             reduce using rule 47 (expression -> ID .)
    CASE            reduce using rule 47 (expression -> ID .)
    ID              reduce using rule 47 (expression -> ID .)
    AT              reduce using rule 47 (expression -> ID .)
    GLOBAL          reduce using rule 47 (expression -> ID .)
    INT             reduce using rule 47 (expression -> ID .)
    FLOAT           reduce using rule 47 (expression -> ID .)
    STR             reduce using rule 47 (expression -> ID .)
    TRUE            reduce using rule 47 (expression -> ID .)
    FALSE           reduce using rule 47 (expression -> ID .)
    COLON           reduce using rule 47 (expression -> ID .)
    ELSE            reduce using rule 47 (expression -> ID .)
    WHEN            reduce using rule 47 (expression -> ID .)
    RCURLYBRACKET   reduce using rule 47 (expression -> ID .)
    COMMA           reduce using rule 3 (variable_list -> ID .)

  ! COMMA           [ reduce using rule 47 (expression -> ID .) ]
  ! EQUALS          [ reduce using rule 3 (variable_list -> ID .) ]


state 14

    (56) statement -> DEF . ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> DEF . ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET

    ID              shift and go to state 35


state 15

    (62) statement -> CASE . expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 36
    variable_list                  shift and go to state 16

state 16

    (2) expression -> variable_list . EQUALS expression_list
    (4) variable_list -> variable_list . COMMA ID

    EQUALS          shift and go to state 38
    COMMA           shift and go to state 39


state 17

    (8) expression -> AT . ID EQUALS expression

    ID              shift and go to state 40


state 18

    (9) expression -> GLOBAL . ID EQUALS expression

    ID              shift and go to state 41


state 19

    (44) expression -> TRUE .

    PLUS            reduce using rule 44 (expression -> TRUE .)
    MINUS           reduce using rule 44 (expression -> TRUE .)
    MULTIPLY        reduce using rule 44 (expression -> TRUE .)
    DIVIDE          reduce using rule 44 (expression -> TRUE .)
    $end            reduce using rule 44 (expression -> TRUE .)
    WHEN            reduce using rule 44 (expression -> TRUE .)
    ELSE            reduce using rule 44 (expression -> TRUE .)
    END_LOWER       reduce using rule 44 (expression -> TRUE .)
    PUTS            reduce using rule 44 (expression -> TRUE .)
    PRINT           reduce using rule 44 (expression -> TRUE .)
    DEF             reduce using rule 44 (expression -> TRUE .)
    CASE            reduce using rule 44 (expression -> TRUE .)
    ID              reduce using rule 44 (expression -> TRUE .)
    AT              reduce using rule 44 (expression -> TRUE .)
    GLOBAL          reduce using rule 44 (expression -> TRUE .)
    INT             reduce using rule 44 (expression -> TRUE .)
    FLOAT           reduce using rule 44 (expression -> TRUE .)
    STR             reduce using rule 44 (expression -> TRUE .)
    TRUE            reduce using rule 44 (expression -> TRUE .)
    FALSE           reduce using rule 44 (expression -> TRUE .)
    COLON           reduce using rule 44 (expression -> TRUE .)
    RCURLYBRACKET   reduce using rule 44 (expression -> TRUE .)
    COMMA           reduce using rule 44 (expression -> TRUE .)
    THEN            reduce using rule 44 (expression -> TRUE .)


state 20

    (45) expression -> FALSE .

    PLUS            reduce using rule 45 (expression -> FALSE .)
    MINUS           reduce using rule 45 (expression -> FALSE .)
    MULTIPLY        reduce using rule 45 (expression -> FALSE .)
    DIVIDE          reduce using rule 45 (expression -> FALSE .)
    $end            reduce using rule 45 (expression -> FALSE .)
    WHEN            reduce using rule 45 (expression -> FALSE .)
    ELSE            reduce using rule 45 (expression -> FALSE .)
    END_LOWER       reduce using rule 45 (expression -> FALSE .)
    PUTS            reduce using rule 45 (expression -> FALSE .)
    PRINT           reduce using rule 45 (expression -> FALSE .)
    DEF             reduce using rule 45 (expression -> FALSE .)
    CASE            reduce using rule 45 (expression -> FALSE .)
    ID              reduce using rule 45 (expression -> FALSE .)
    AT              reduce using rule 45 (expression -> FALSE .)
    GLOBAL          reduce using rule 45 (expression -> FALSE .)
    INT             reduce using rule 45 (expression -> FALSE .)
    FLOAT           reduce using rule 45 (expression -> FALSE .)
    STR             reduce using rule 45 (expression -> FALSE .)
    TRUE            reduce using rule 45 (expression -> FALSE .)
    FALSE           reduce using rule 45 (expression -> FALSE .)
    COLON           reduce using rule 45 (expression -> FALSE .)
    RCURLYBRACKET   reduce using rule 45 (expression -> FALSE .)
    COMMA           reduce using rule 45 (expression -> FALSE .)
    THEN            reduce using rule 45 (expression -> FALSE .)


state 21

    (46) expression -> COLON . ID

    ID              shift and go to state 42


state 22

    (11) expression -> expression PLUS . expression
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 43
    variable_list                  shift and go to state 16

state 23

    (12) expression -> expression MINUS . expression
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 44
    variable_list                  shift and go to state 16

state 24

    (13) expression -> expression MULTIPLY . expression
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 45
    variable_list                  shift and go to state 16

state 25

    (14) expression -> expression DIVIDE . expression
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 46
    variable_list                  shift and go to state 16

state 26

    (48) statement -> PUTS STR .

    $end            reduce using rule 48 (statement -> PUTS STR .)
    END_LOWER       reduce using rule 48 (statement -> PUTS STR .)
    PUTS            reduce using rule 48 (statement -> PUTS STR .)
    PRINT           reduce using rule 48 (statement -> PUTS STR .)
    DEF             reduce using rule 48 (statement -> PUTS STR .)
    CASE            reduce using rule 48 (statement -> PUTS STR .)
    ID              reduce using rule 48 (statement -> PUTS STR .)
    AT              reduce using rule 48 (statement -> PUTS STR .)
    GLOBAL          reduce using rule 48 (statement -> PUTS STR .)
    INT             reduce using rule 48 (statement -> PUTS STR .)
    FLOAT           reduce using rule 48 (statement -> PUTS STR .)
    STR             reduce using rule 48 (statement -> PUTS STR .)
    TRUE            reduce using rule 48 (statement -> PUTS STR .)
    FALSE           reduce using rule 48 (statement -> PUTS STR .)
    COLON           reduce using rule 48 (statement -> PUTS STR .)
    ELSE            reduce using rule 48 (statement -> PUTS STR .)
    WHEN            reduce using rule 48 (statement -> PUTS STR .)
    RCURLYBRACKET   reduce using rule 48 (statement -> PUTS STR .)
    COMMA           reduce using rule 48 (statement -> PUTS STR .)


state 27

    (50) statement -> PUTS INT .

    $end            reduce using rule 50 (statement -> PUTS INT .)
    END_LOWER       reduce using rule 50 (statement -> PUTS INT .)
    PUTS            reduce using rule 50 (statement -> PUTS INT .)
    PRINT           reduce using rule 50 (statement -> PUTS INT .)
    DEF             reduce using rule 50 (statement -> PUTS INT .)
    CASE            reduce using rule 50 (statement -> PUTS INT .)
    ID              reduce using rule 50 (statement -> PUTS INT .)
    AT              reduce using rule 50 (statement -> PUTS INT .)
    GLOBAL          reduce using rule 50 (statement -> PUTS INT .)
    INT             reduce using rule 50 (statement -> PUTS INT .)
    FLOAT           reduce using rule 50 (statement -> PUTS INT .)
    STR             reduce using rule 50 (statement -> PUTS INT .)
    TRUE            reduce using rule 50 (statement -> PUTS INT .)
    FALSE           reduce using rule 50 (statement -> PUTS INT .)
    COLON           reduce using rule 50 (statement -> PUTS INT .)
    ELSE            reduce using rule 50 (statement -> PUTS INT .)
    WHEN            reduce using rule 50 (statement -> PUTS INT .)
    RCURLYBRACKET   reduce using rule 50 (statement -> PUTS INT .)
    COMMA           reduce using rule 50 (statement -> PUTS INT .)


state 28

    (52) statement -> PUTS FLOAT .

    $end            reduce using rule 52 (statement -> PUTS FLOAT .)
    END_LOWER       reduce using rule 52 (statement -> PUTS FLOAT .)
    PUTS            reduce using rule 52 (statement -> PUTS FLOAT .)
    PRINT           reduce using rule 52 (statement -> PUTS FLOAT .)
    DEF             reduce using rule 52 (statement -> PUTS FLOAT .)
    CASE            reduce using rule 52 (statement -> PUTS FLOAT .)
    ID              reduce using rule 52 (statement -> PUTS FLOAT .)
    AT              reduce using rule 52 (statement -> PUTS FLOAT .)
    GLOBAL          reduce using rule 52 (statement -> PUTS FLOAT .)
    INT             reduce using rule 52 (statement -> PUTS FLOAT .)
    FLOAT           reduce using rule 52 (statement -> PUTS FLOAT .)
    STR             reduce using rule 52 (statement -> PUTS FLOAT .)
    TRUE            reduce using rule 52 (statement -> PUTS FLOAT .)
    FALSE           reduce using rule 52 (statement -> PUTS FLOAT .)
    COLON           reduce using rule 52 (statement -> PUTS FLOAT .)
    ELSE            reduce using rule 52 (statement -> PUTS FLOAT .)
    WHEN            reduce using rule 52 (statement -> PUTS FLOAT .)
    RCURLYBRACKET   reduce using rule 52 (statement -> PUTS FLOAT .)
    COMMA           reduce using rule 52 (statement -> PUTS FLOAT .)


state 29

    (54) statement -> PUTS ID .

    $end            reduce using rule 54 (statement -> PUTS ID .)
    END_LOWER       reduce using rule 54 (statement -> PUTS ID .)
    PUTS            reduce using rule 54 (statement -> PUTS ID .)
    PRINT           reduce using rule 54 (statement -> PUTS ID .)
    DEF             reduce using rule 54 (statement -> PUTS ID .)
    CASE            reduce using rule 54 (statement -> PUTS ID .)
    ID              reduce using rule 54 (statement -> PUTS ID .)
    AT              reduce using rule 54 (statement -> PUTS ID .)
    GLOBAL          reduce using rule 54 (statement -> PUTS ID .)
    INT             reduce using rule 54 (statement -> PUTS ID .)
    FLOAT           reduce using rule 54 (statement -> PUTS ID .)
    STR             reduce using rule 54 (statement -> PUTS ID .)
    TRUE            reduce using rule 54 (statement -> PUTS ID .)
    FALSE           reduce using rule 54 (statement -> PUTS ID .)
    COLON           reduce using rule 54 (statement -> PUTS ID .)
    ELSE            reduce using rule 54 (statement -> PUTS ID .)
    WHEN            reduce using rule 54 (statement -> PUTS ID .)
    RCURLYBRACKET   reduce using rule 54 (statement -> PUTS ID .)
    COMMA           reduce using rule 54 (statement -> PUTS ID .)


state 30

    (49) statement -> PRINT STR .

    $end            reduce using rule 49 (statement -> PRINT STR .)
    END_LOWER       reduce using rule 49 (statement -> PRINT STR .)
    PUTS            reduce using rule 49 (statement -> PRINT STR .)
    PRINT           reduce using rule 49 (statement -> PRINT STR .)
    DEF             reduce using rule 49 (statement -> PRINT STR .)
    CASE            reduce using rule 49 (statement -> PRINT STR .)
    ID              reduce using rule 49 (statement -> PRINT STR .)
    AT              reduce using rule 49 (statement -> PRINT STR .)
    GLOBAL          reduce using rule 49 (statement -> PRINT STR .)
    INT             reduce using rule 49 (statement -> PRINT STR .)
    FLOAT           reduce using rule 49 (statement -> PRINT STR .)
    STR             reduce using rule 49 (statement -> PRINT STR .)
    TRUE            reduce using rule 49 (statement -> PRINT STR .)
    FALSE           reduce using rule 49 (statement -> PRINT STR .)
    COLON           reduce using rule 49 (statement -> PRINT STR .)
    ELSE            reduce using rule 49 (statement -> PRINT STR .)
    WHEN            reduce using rule 49 (statement -> PRINT STR .)
    RCURLYBRACKET   reduce using rule 49 (statement -> PRINT STR .)
    COMMA           reduce using rule 49 (statement -> PRINT STR .)


state 31

    (51) statement -> PRINT INT .

    $end            reduce using rule 51 (statement -> PRINT INT .)
    END_LOWER       reduce using rule 51 (statement -> PRINT INT .)
    PUTS            reduce using rule 51 (statement -> PRINT INT .)
    PRINT           reduce using rule 51 (statement -> PRINT INT .)
    DEF             reduce using rule 51 (statement -> PRINT INT .)
    CASE            reduce using rule 51 (statement -> PRINT INT .)
    ID              reduce using rule 51 (statement -> PRINT INT .)
    AT              reduce using rule 51 (statement -> PRINT INT .)
    GLOBAL          reduce using rule 51 (statement -> PRINT INT .)
    INT             reduce using rule 51 (statement -> PRINT INT .)
    FLOAT           reduce using rule 51 (statement -> PRINT INT .)
    STR             reduce using rule 51 (statement -> PRINT INT .)
    TRUE            reduce using rule 51 (statement -> PRINT INT .)
    FALSE           reduce using rule 51 (statement -> PRINT INT .)
    COLON           reduce using rule 51 (statement -> PRINT INT .)
    ELSE            reduce using rule 51 (statement -> PRINT INT .)
    WHEN            reduce using rule 51 (statement -> PRINT INT .)
    RCURLYBRACKET   reduce using rule 51 (statement -> PRINT INT .)
    COMMA           reduce using rule 51 (statement -> PRINT INT .)


state 32

    (53) statement -> PRINT FLOAT .

    $end            reduce using rule 53 (statement -> PRINT FLOAT .)
    END_LOWER       reduce using rule 53 (statement -> PRINT FLOAT .)
    PUTS            reduce using rule 53 (statement -> PRINT FLOAT .)
    PRINT           reduce using rule 53 (statement -> PRINT FLOAT .)
    DEF             reduce using rule 53 (statement -> PRINT FLOAT .)
    CASE            reduce using rule 53 (statement -> PRINT FLOAT .)
    ID              reduce using rule 53 (statement -> PRINT FLOAT .)
    AT              reduce using rule 53 (statement -> PRINT FLOAT .)
    GLOBAL          reduce using rule 53 (statement -> PRINT FLOAT .)
    INT             reduce using rule 53 (statement -> PRINT FLOAT .)
    FLOAT           reduce using rule 53 (statement -> PRINT FLOAT .)
    STR             reduce using rule 53 (statement -> PRINT FLOAT .)
    TRUE            reduce using rule 53 (statement -> PRINT FLOAT .)
    FALSE           reduce using rule 53 (statement -> PRINT FLOAT .)
    COLON           reduce using rule 53 (statement -> PRINT FLOAT .)
    ELSE            reduce using rule 53 (statement -> PRINT FLOAT .)
    WHEN            reduce using rule 53 (statement -> PRINT FLOAT .)
    RCURLYBRACKET   reduce using rule 53 (statement -> PRINT FLOAT .)
    COMMA           reduce using rule 53 (statement -> PRINT FLOAT .)


state 33

    (55) statement -> PRINT ID .

    $end            reduce using rule 55 (statement -> PRINT ID .)
    END_LOWER       reduce using rule 55 (statement -> PRINT ID .)
    PUTS            reduce using rule 55 (statement -> PRINT ID .)
    PRINT           reduce using rule 55 (statement -> PRINT ID .)
    DEF             reduce using rule 55 (statement -> PRINT ID .)
    CASE            reduce using rule 55 (statement -> PRINT ID .)
    ID              reduce using rule 55 (statement -> PRINT ID .)
    AT              reduce using rule 55 (statement -> PRINT ID .)
    GLOBAL          reduce using rule 55 (statement -> PRINT ID .)
    INT             reduce using rule 55 (statement -> PRINT ID .)
    FLOAT           reduce using rule 55 (statement -> PRINT ID .)
    STR             reduce using rule 55 (statement -> PRINT ID .)
    TRUE            reduce using rule 55 (statement -> PRINT ID .)
    FALSE           reduce using rule 55 (statement -> PRINT ID .)
    COLON           reduce using rule 55 (statement -> PRINT ID .)
    ELSE            reduce using rule 55 (statement -> PRINT ID .)
    WHEN            reduce using rule 55 (statement -> PRINT ID .)
    RCURLYBRACKET   reduce using rule 55 (statement -> PRINT ID .)
    COMMA           reduce using rule 55 (statement -> PRINT ID .)


state 34

    (7) expression -> ID EQUALS . expression
    (10) expression -> ID EQUALS . Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (17) set_vacio -> ID EQUALS . SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> ID EQUALS . SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> ID EQUALS . LBRACKET RBRACKET
    (27) array -> ID EQUALS . LBRACKET string_lista RBRACKET
    (30) array -> ID EQUALS . LBRACKET int_lista RBRACKET
    (35) hash_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> ID EQUALS . LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    Rational        shift and go to state 48
    SET             shift and go to state 49
    LBRACKET        shift and go to state 51
    LCURLYBRACKET   shift and go to state 50
    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 47
    variable_list                  shift and go to state 16

state 35

    (56) statement -> DEF ID . LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> DEF ID . LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET

    LPARENTHESIS    shift and go to state 52


state 36

    (62) statement -> CASE expression . case_when_list ELSE statement_list END_LOWER
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (63) case_when_list -> . case_when
    (64) case_when_list -> . case_when_list case_when
    (65) case_when -> . WHEN expression THEN statement_list
    (66) case_when -> . ELSE THEN statement_list

    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25
    WHEN            shift and go to state 56
    ELSE            shift and go to state 54

    case_when_list                 shift and go to state 53
    case_when                      shift and go to state 55

state 37

    (7) expression -> ID . EQUALS expression
    (10) expression -> ID . EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (47) expression -> ID .
    (3) variable_list -> ID .

  ! shift/reduce conflict for EQUALS resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 3 (variable_list -> ID .)
    EQUALS          shift and go to state 57
    PLUS            reduce using rule 47 (expression -> ID .)
    MINUS           reduce using rule 47 (expression -> ID .)
    MULTIPLY        reduce using rule 47 (expression -> ID .)
    DIVIDE          reduce using rule 47 (expression -> ID .)
    WHEN            reduce using rule 47 (expression -> ID .)
    ELSE            reduce using rule 47 (expression -> ID .)
    $end            reduce using rule 47 (expression -> ID .)
    END_LOWER       reduce using rule 47 (expression -> ID .)
    PUTS            reduce using rule 47 (expression -> ID .)
    PRINT           reduce using rule 47 (expression -> ID .)
    DEF             reduce using rule 47 (expression -> ID .)
    CASE            reduce using rule 47 (expression -> ID .)
    ID              reduce using rule 47 (expression -> ID .)
    AT              reduce using rule 47 (expression -> ID .)
    GLOBAL          reduce using rule 47 (expression -> ID .)
    INT             reduce using rule 47 (expression -> ID .)
    FLOAT           reduce using rule 47 (expression -> ID .)
    STR             reduce using rule 47 (expression -> ID .)
    TRUE            reduce using rule 47 (expression -> ID .)
    FALSE           reduce using rule 47 (expression -> ID .)
    COLON           reduce using rule 47 (expression -> ID .)
    RCURLYBRACKET   reduce using rule 47 (expression -> ID .)
    THEN            reduce using rule 47 (expression -> ID .)
    COMMA           reduce using rule 3 (variable_list -> ID .)

  ! COMMA           [ reduce using rule 47 (expression -> ID .) ]
  ! EQUALS          [ reduce using rule 3 (variable_list -> ID .) ]


state 38

    (2) expression -> variable_list EQUALS . expression_list
    (5) expression_list -> . expression
    (6) expression_list -> . expression_list COMMA expression
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    variable_list                  shift and go to state 16
    expression_list                shift and go to state 58
    expression                     shift and go to state 59

state 39

    (4) variable_list -> variable_list COMMA . ID

    ID              shift and go to state 60


state 40

    (8) expression -> AT ID . EQUALS expression

    EQUALS          shift and go to state 61


state 41

    (9) expression -> GLOBAL ID . EQUALS expression

    EQUALS          shift and go to state 62


state 42

    (46) expression -> COLON ID .

    PLUS            reduce using rule 46 (expression -> COLON ID .)
    MINUS           reduce using rule 46 (expression -> COLON ID .)
    MULTIPLY        reduce using rule 46 (expression -> COLON ID .)
    DIVIDE          reduce using rule 46 (expression -> COLON ID .)
    $end            reduce using rule 46 (expression -> COLON ID .)
    WHEN            reduce using rule 46 (expression -> COLON ID .)
    ELSE            reduce using rule 46 (expression -> COLON ID .)
    END_LOWER       reduce using rule 46 (expression -> COLON ID .)
    PUTS            reduce using rule 46 (expression -> COLON ID .)
    PRINT           reduce using rule 46 (expression -> COLON ID .)
    DEF             reduce using rule 46 (expression -> COLON ID .)
    CASE            reduce using rule 46 (expression -> COLON ID .)
    ID              reduce using rule 46 (expression -> COLON ID .)
    AT              reduce using rule 46 (expression -> COLON ID .)
    GLOBAL          reduce using rule 46 (expression -> COLON ID .)
    INT             reduce using rule 46 (expression -> COLON ID .)
    FLOAT           reduce using rule 46 (expression -> COLON ID .)
    STR             reduce using rule 46 (expression -> COLON ID .)
    TRUE            reduce using rule 46 (expression -> COLON ID .)
    FALSE           reduce using rule 46 (expression -> COLON ID .)
    COLON           reduce using rule 46 (expression -> COLON ID .)
    RCURLYBRACKET   reduce using rule 46 (expression -> COLON ID .)
    COMMA           reduce using rule 46 (expression -> COLON ID .)
    THEN            reduce using rule 46 (expression -> COLON ID .)


state 43

    (11) expression -> expression PLUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 11 (expression -> expression PLUS expression .)
    WHEN            reduce using rule 11 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 11 (expression -> expression PLUS expression .)
    END_LOWER       reduce using rule 11 (expression -> expression PLUS expression .)
    PUTS            reduce using rule 11 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 11 (expression -> expression PLUS expression .)
    DEF             reduce using rule 11 (expression -> expression PLUS expression .)
    CASE            reduce using rule 11 (expression -> expression PLUS expression .)
    ID              reduce using rule 11 (expression -> expression PLUS expression .)
    AT              reduce using rule 11 (expression -> expression PLUS expression .)
    GLOBAL          reduce using rule 11 (expression -> expression PLUS expression .)
    INT             reduce using rule 11 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 11 (expression -> expression PLUS expression .)
    STR             reduce using rule 11 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 11 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 11 (expression -> expression PLUS expression .)
    COLON           reduce using rule 11 (expression -> expression PLUS expression .)
    RCURLYBRACKET   reduce using rule 11 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 11 (expression -> expression PLUS expression .)
    THEN            reduce using rule 11 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression PLUS expression .) ]


state 44

    (12) expression -> expression MINUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 12 (expression -> expression MINUS expression .)
    WHEN            reduce using rule 12 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 12 (expression -> expression MINUS expression .)
    END_LOWER       reduce using rule 12 (expression -> expression MINUS expression .)
    PUTS            reduce using rule 12 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 12 (expression -> expression MINUS expression .)
    DEF             reduce using rule 12 (expression -> expression MINUS expression .)
    CASE            reduce using rule 12 (expression -> expression MINUS expression .)
    ID              reduce using rule 12 (expression -> expression MINUS expression .)
    AT              reduce using rule 12 (expression -> expression MINUS expression .)
    GLOBAL          reduce using rule 12 (expression -> expression MINUS expression .)
    INT             reduce using rule 12 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 12 (expression -> expression MINUS expression .)
    STR             reduce using rule 12 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 12 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 12 (expression -> expression MINUS expression .)
    COLON           reduce using rule 12 (expression -> expression MINUS expression .)
    RCURLYBRACKET   reduce using rule 12 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 12 (expression -> expression MINUS expression .)
    THEN            reduce using rule 12 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (expression -> expression MINUS expression .) ]


state 45

    (13) expression -> expression MULTIPLY expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    WHEN            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    ELSE            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    END_LOWER       reduce using rule 13 (expression -> expression MULTIPLY expression .)
    PUTS            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 13 (expression -> expression MULTIPLY expression .)
    DEF             reduce using rule 13 (expression -> expression MULTIPLY expression .)
    CASE            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    ID              reduce using rule 13 (expression -> expression MULTIPLY expression .)
    AT              reduce using rule 13 (expression -> expression MULTIPLY expression .)
    GLOBAL          reduce using rule 13 (expression -> expression MULTIPLY expression .)
    INT             reduce using rule 13 (expression -> expression MULTIPLY expression .)
    FLOAT           reduce using rule 13 (expression -> expression MULTIPLY expression .)
    STR             reduce using rule 13 (expression -> expression MULTIPLY expression .)
    TRUE            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    FALSE           reduce using rule 13 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 13 (expression -> expression MULTIPLY expression .)
    RCURLYBRACKET   reduce using rule 13 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 13 (expression -> expression MULTIPLY expression .)
    THEN            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 13 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 13 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 13 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> expression MULTIPLY expression .) ]


state 46

    (14) expression -> expression DIVIDE expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 14 (expression -> expression DIVIDE expression .)
    WHEN            reduce using rule 14 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 14 (expression -> expression DIVIDE expression .)
    END_LOWER       reduce using rule 14 (expression -> expression DIVIDE expression .)
    PUTS            reduce using rule 14 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 14 (expression -> expression DIVIDE expression .)
    DEF             reduce using rule 14 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 14 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 14 (expression -> expression DIVIDE expression .)
    AT              reduce using rule 14 (expression -> expression DIVIDE expression .)
    GLOBAL          reduce using rule 14 (expression -> expression DIVIDE expression .)
    INT             reduce using rule 14 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 14 (expression -> expression DIVIDE expression .)
    STR             reduce using rule 14 (expression -> expression DIVIDE expression .)
    TRUE            reduce using rule 14 (expression -> expression DIVIDE expression .)
    FALSE           reduce using rule 14 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 14 (expression -> expression DIVIDE expression .)
    RCURLYBRACKET   reduce using rule 14 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 14 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 14 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 14 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 14 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 14 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression DIVIDE expression .) ]


state 47

    (7) expression -> ID EQUALS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 7 (expression -> ID EQUALS expression .)
    WHEN            reduce using rule 7 (expression -> ID EQUALS expression .)
    ELSE            reduce using rule 7 (expression -> ID EQUALS expression .)
    END_LOWER       reduce using rule 7 (expression -> ID EQUALS expression .)
    PUTS            reduce using rule 7 (expression -> ID EQUALS expression .)
    PRINT           reduce using rule 7 (expression -> ID EQUALS expression .)
    DEF             reduce using rule 7 (expression -> ID EQUALS expression .)
    CASE            reduce using rule 7 (expression -> ID EQUALS expression .)
    ID              reduce using rule 7 (expression -> ID EQUALS expression .)
    AT              reduce using rule 7 (expression -> ID EQUALS expression .)
    GLOBAL          reduce using rule 7 (expression -> ID EQUALS expression .)
    INT             reduce using rule 7 (expression -> ID EQUALS expression .)
    FLOAT           reduce using rule 7 (expression -> ID EQUALS expression .)
    STR             reduce using rule 7 (expression -> ID EQUALS expression .)
    TRUE            reduce using rule 7 (expression -> ID EQUALS expression .)
    FALSE           reduce using rule 7 (expression -> ID EQUALS expression .)
    COLON           reduce using rule 7 (expression -> ID EQUALS expression .)
    RCURLYBRACKET   reduce using rule 7 (expression -> ID EQUALS expression .)
    COMMA           reduce using rule 7 (expression -> ID EQUALS expression .)
    THEN            reduce using rule 7 (expression -> ID EQUALS expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 7 (expression -> ID EQUALS expression .) ]
  ! MINUS           [ reduce using rule 7 (expression -> ID EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 7 (expression -> ID EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> ID EQUALS expression .) ]


state 48

    (10) expression -> ID EQUALS Rational . LPARENTHESIS INT COMMA INT RPARENTHESIS

    LPARENTHESIS    shift and go to state 63


state 49

    (17) set_vacio -> ID EQUALS SET . LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> ID EQUALS SET . LCURLYBRACKET varios_set_elementos RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 64


state 50

    (35) hash_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (36) hash_elementos -> ID EQUALS LCURLYBRACKET . varios_pares_hash RCURLYBRACKET
    (37) varios_pares_hash -> . ID COLON expression
    (38) varios_pares_hash -> . STR HASHAS expression
    (39) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (40) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    RCURLYBRACKET   shift and go to state 66
    ID              shift and go to state 65
    STR             shift and go to state 68

    varios_pares_hash              shift and go to state 67

state 51

    (26) array -> ID EQUALS LBRACKET . RBRACKET
    (27) array -> ID EQUALS LBRACKET . string_lista RBRACKET
    (30) array -> ID EQUALS LBRACKET . int_lista RBRACKET
    (28) string_lista -> . STR
    (29) string_lista -> . STR COMMA string_lista
    (31) int_lista -> . INT
    (32) int_lista -> . INT COMMA int_lista

    RBRACKET        shift and go to state 69
    STR             shift and go to state 72
    INT             shift and go to state 73

    string_lista                   shift and go to state 70
    int_lista                      shift and go to state 71

state 52

    (56) statement -> DEF ID LPARENTHESIS . RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> DEF ID LPARENTHESIS . parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (58) parameters -> . ID
    (59) parameters -> . parameters COMMA ID

    RPARENTHESIS    shift and go to state 75
    ID              shift and go to state 74

    parameters                     shift and go to state 76

state 53

    (62) statement -> CASE expression case_when_list . ELSE statement_list END_LOWER
    (64) case_when_list -> case_when_list . case_when
    (65) case_when -> . WHEN expression THEN statement_list
    (66) case_when -> . ELSE THEN statement_list

    ELSE            shift and go to state 77
    WHEN            shift and go to state 56

    case_when                      shift and go to state 78

state 54

    (66) case_when -> ELSE . THEN statement_list

    THEN            shift and go to state 79


state 55

    (63) case_when_list -> case_when .

    ELSE            reduce using rule 63 (case_when_list -> case_when .)
    WHEN            reduce using rule 63 (case_when_list -> case_when .)


state 56

    (65) case_when -> WHEN . expression THEN statement_list
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 80
    variable_list                  shift and go to state 16

state 57

    (7) expression -> ID EQUALS . expression
    (10) expression -> ID EQUALS . Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    Rational        shift and go to state 48
    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 47
    variable_list                  shift and go to state 16

state 58

    (2) expression -> variable_list EQUALS expression_list .
    (6) expression_list -> expression_list . COMMA expression

  ! shift/reduce conflict for COMMA resolved as shift
    PLUS            reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    MINUS           reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    MULTIPLY        reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    DIVIDE          reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    $end            reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    WHEN            reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    ELSE            reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    END_LOWER       reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    PUTS            reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    PRINT           reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    DEF             reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    CASE            reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    ID              reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    AT              reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    GLOBAL          reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    INT             reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    FLOAT           reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    STR             reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    TRUE            reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    FALSE           reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    COLON           reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    RCURLYBRACKET   reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    THEN            reduce using rule 2 (expression -> variable_list EQUALS expression_list .)
    COMMA           shift and go to state 81

  ! COMMA           [ reduce using rule 2 (expression -> variable_list EQUALS expression_list .) ]


state 59

    (5) expression_list -> expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 5 (expression_list -> expression .)
    WHEN            reduce using rule 5 (expression_list -> expression .)
    ELSE            reduce using rule 5 (expression_list -> expression .)
    END_LOWER       reduce using rule 5 (expression_list -> expression .)
    PUTS            reduce using rule 5 (expression_list -> expression .)
    PRINT           reduce using rule 5 (expression_list -> expression .)
    DEF             reduce using rule 5 (expression_list -> expression .)
    CASE            reduce using rule 5 (expression_list -> expression .)
    ID              reduce using rule 5 (expression_list -> expression .)
    AT              reduce using rule 5 (expression_list -> expression .)
    GLOBAL          reduce using rule 5 (expression_list -> expression .)
    INT             reduce using rule 5 (expression_list -> expression .)
    FLOAT           reduce using rule 5 (expression_list -> expression .)
    STR             reduce using rule 5 (expression_list -> expression .)
    TRUE            reduce using rule 5 (expression_list -> expression .)
    FALSE           reduce using rule 5 (expression_list -> expression .)
    COLON           reduce using rule 5 (expression_list -> expression .)
    RCURLYBRACKET   reduce using rule 5 (expression_list -> expression .)
    COMMA           reduce using rule 5 (expression_list -> expression .)
    THEN            reduce using rule 5 (expression_list -> expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 5 (expression_list -> expression .) ]
  ! MINUS           [ reduce using rule 5 (expression_list -> expression .) ]
  ! MULTIPLY        [ reduce using rule 5 (expression_list -> expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression_list -> expression .) ]


state 60

    (4) variable_list -> variable_list COMMA ID .

    EQUALS          reduce using rule 4 (variable_list -> variable_list COMMA ID .)
    COMMA           reduce using rule 4 (variable_list -> variable_list COMMA ID .)


state 61

    (8) expression -> AT ID EQUALS . expression
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 82
    variable_list                  shift and go to state 16

state 62

    (9) expression -> GLOBAL ID EQUALS . expression
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 83
    variable_list                  shift and go to state 16

state 63

    (10) expression -> ID EQUALS Rational LPARENTHESIS . INT COMMA INT RPARENTHESIS

    INT             shift and go to state 84


state 64

    (17) set_vacio -> ID EQUALS SET LCURLYBRACKET . RCURLYBRACKET
    (18) set_elementos -> ID EQUALS SET LCURLYBRACKET . varios_set_elementos RCURLYBRACKET
    (19) varios_set_elementos -> . INT
    (20) varios_set_elementos -> . STR
    (21) varios_set_elementos -> . FLOAT
    (22) varios_set_elementos -> . INT COMMA varios_set_elementos
    (23) varios_set_elementos -> . FLOAT COMMA varios_set_elementos
    (24) varios_set_elementos -> . STR COMMA varios_set_elementos

    RCURLYBRACKET   shift and go to state 85
    INT             shift and go to state 87
    STR             shift and go to state 88
    FLOAT           shift and go to state 89

    varios_set_elementos           shift and go to state 86

state 65

    (37) varios_pares_hash -> ID . COLON expression
    (39) varios_pares_hash -> ID . COLON expression COMMA varios_pares_hash

    COLON           shift and go to state 90


state 66

    (35) hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .

    $end            reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    END_LOWER       reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    PUTS            reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    PRINT           reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    DEF             reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    CASE            reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    ID              reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    AT              reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    GLOBAL          reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    INT             reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    FLOAT           reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    STR             reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    TRUE            reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    FALSE           reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    COLON           reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    ELSE            reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    WHEN            reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    COMMA           reduce using rule 35 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)


state 67

    (36) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 91


state 68

    (38) varios_pares_hash -> STR . HASHAS expression
    (40) varios_pares_hash -> STR . HASHAS expression COMMA varios_pares_hash

    HASHAS          shift and go to state 92


state 69

    (26) array -> ID EQUALS LBRACKET RBRACKET .

    $end            reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    END_LOWER       reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    PUTS            reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    PRINT           reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    DEF             reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    CASE            reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    ID              reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    AT              reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    GLOBAL          reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    INT             reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    FLOAT           reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    STR             reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    TRUE            reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    FALSE           reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    COLON           reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    ELSE            reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    WHEN            reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    RCURLYBRACKET   reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)
    COMMA           reduce using rule 26 (array -> ID EQUALS LBRACKET RBRACKET .)


state 70

    (27) array -> ID EQUALS LBRACKET string_lista . RBRACKET

    RBRACKET        shift and go to state 93


state 71

    (30) array -> ID EQUALS LBRACKET int_lista . RBRACKET

    RBRACKET        shift and go to state 94


state 72

    (28) string_lista -> STR .
    (29) string_lista -> STR . COMMA string_lista

    RBRACKET        reduce using rule 28 (string_lista -> STR .)
    COMMA           shift and go to state 95


state 73

    (31) int_lista -> INT .
    (32) int_lista -> INT . COMMA int_lista

    RBRACKET        reduce using rule 31 (int_lista -> INT .)
    COMMA           shift and go to state 96


state 74

    (58) parameters -> ID .

    RPARENTHESIS    reduce using rule 58 (parameters -> ID .)
    COMMA           reduce using rule 58 (parameters -> ID .)


state 75

    (56) statement -> DEF ID LPARENTHESIS RPARENTHESIS . LCURLYBRACKET statements RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 97


state 76

    (57) statement -> DEF ID LPARENTHESIS parameters . RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (59) parameters -> parameters . COMMA ID

    RPARENTHESIS    shift and go to state 98
    COMMA           shift and go to state 99


state 77

    (62) statement -> CASE expression case_when_list ELSE . statement_list END_LOWER
    (66) case_when -> ELSE . THEN statement_list
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    THEN            shift and go to state 79
    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 2
    statement_list                 shift and go to state 100
    statement                      shift and go to state 101
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 78

    (64) case_when_list -> case_when_list case_when .

    ELSE            reduce using rule 64 (case_when_list -> case_when_list case_when .)
    WHEN            reduce using rule 64 (case_when_list -> case_when_list case_when .)


state 79

    (66) case_when -> ELSE THEN . statement_list
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    statement_list                 shift and go to state 102
    statement                      shift and go to state 101
    expression                     shift and go to state 2
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 80

    (65) case_when -> WHEN expression . THEN statement_list
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

    THEN            shift and go to state 103
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25


state 81

    (6) expression_list -> expression_list COMMA . expression
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 104
    variable_list                  shift and go to state 16

state 82

    (8) expression -> AT ID EQUALS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 8 (expression -> AT ID EQUALS expression .)
    WHEN            reduce using rule 8 (expression -> AT ID EQUALS expression .)
    ELSE            reduce using rule 8 (expression -> AT ID EQUALS expression .)
    END_LOWER       reduce using rule 8 (expression -> AT ID EQUALS expression .)
    PUTS            reduce using rule 8 (expression -> AT ID EQUALS expression .)
    PRINT           reduce using rule 8 (expression -> AT ID EQUALS expression .)
    DEF             reduce using rule 8 (expression -> AT ID EQUALS expression .)
    CASE            reduce using rule 8 (expression -> AT ID EQUALS expression .)
    ID              reduce using rule 8 (expression -> AT ID EQUALS expression .)
    AT              reduce using rule 8 (expression -> AT ID EQUALS expression .)
    GLOBAL          reduce using rule 8 (expression -> AT ID EQUALS expression .)
    INT             reduce using rule 8 (expression -> AT ID EQUALS expression .)
    FLOAT           reduce using rule 8 (expression -> AT ID EQUALS expression .)
    STR             reduce using rule 8 (expression -> AT ID EQUALS expression .)
    TRUE            reduce using rule 8 (expression -> AT ID EQUALS expression .)
    FALSE           reduce using rule 8 (expression -> AT ID EQUALS expression .)
    COLON           reduce using rule 8 (expression -> AT ID EQUALS expression .)
    RCURLYBRACKET   reduce using rule 8 (expression -> AT ID EQUALS expression .)
    COMMA           reduce using rule 8 (expression -> AT ID EQUALS expression .)
    THEN            reduce using rule 8 (expression -> AT ID EQUALS expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 8 (expression -> AT ID EQUALS expression .) ]
  ! MINUS           [ reduce using rule 8 (expression -> AT ID EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 8 (expression -> AT ID EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> AT ID EQUALS expression .) ]


state 83

    (9) expression -> GLOBAL ID EQUALS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    WHEN            reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    ELSE            reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    END_LOWER       reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    PUTS            reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    PRINT           reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    DEF             reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    CASE            reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    ID              reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    AT              reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    GLOBAL          reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    INT             reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    FLOAT           reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    STR             reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    TRUE            reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    FALSE           reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    COLON           reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    RCURLYBRACKET   reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    COMMA           reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    THEN            reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .) ]
  ! MINUS           [ reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> GLOBAL ID EQUALS expression .) ]


state 84

    (10) expression -> ID EQUALS Rational LPARENTHESIS INT . COMMA INT RPARENTHESIS

    COMMA           shift and go to state 105


state 85

    (17) set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .

    $end            reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    END_LOWER       reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    PUTS            reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    PRINT           reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    DEF             reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    CASE            reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    ID              reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    AT              reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    GLOBAL          reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    INT             reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    FLOAT           reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    STR             reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    TRUE            reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    FALSE           reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    COLON           reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    ELSE            reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    WHEN            reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)
    COMMA           reduce using rule 17 (set_vacio -> ID EQUALS SET LCURLYBRACKET RCURLYBRACKET .)


state 86

    (18) set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 106


state 87

    (19) varios_set_elementos -> INT .
    (22) varios_set_elementos -> INT . COMMA varios_set_elementos

    RCURLYBRACKET   reduce using rule 19 (varios_set_elementos -> INT .)
    COMMA           shift and go to state 107


state 88

    (20) varios_set_elementos -> STR .
    (24) varios_set_elementos -> STR . COMMA varios_set_elementos

    RCURLYBRACKET   reduce using rule 20 (varios_set_elementos -> STR .)
    COMMA           shift and go to state 108


state 89

    (21) varios_set_elementos -> FLOAT .
    (23) varios_set_elementos -> FLOAT . COMMA varios_set_elementos

    RCURLYBRACKET   reduce using rule 21 (varios_set_elementos -> FLOAT .)
    COMMA           shift and go to state 109


state 90

    (37) varios_pares_hash -> ID COLON . expression
    (39) varios_pares_hash -> ID COLON . expression COMMA varios_pares_hash
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 110
    variable_list                  shift and go to state 16

state 91

    (36) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .

    $end            reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    END_LOWER       reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    PUTS            reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    PRINT           reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    DEF             reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    CASE            reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    ID              reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    AT              reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    GLOBAL          reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    INT             reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    FLOAT           reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    STR             reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    TRUE            reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    FALSE           reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    COLON           reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    ELSE            reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    WHEN            reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    COMMA           reduce using rule 36 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)


state 92

    (38) varios_pares_hash -> STR HASHAS . expression
    (40) varios_pares_hash -> STR HASHAS . expression COMMA varios_pares_hash
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ID              shift and go to state 37
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 111
    variable_list                  shift and go to state 16

state 93

    (27) array -> ID EQUALS LBRACKET string_lista RBRACKET .

    $end            reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    END_LOWER       reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    PUTS            reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    PRINT           reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    DEF             reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    CASE            reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    ID              reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    AT              reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    GLOBAL          reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    INT             reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    FLOAT           reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    STR             reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    TRUE            reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    FALSE           reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    COLON           reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    ELSE            reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    WHEN            reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    RCURLYBRACKET   reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)
    COMMA           reduce using rule 27 (array -> ID EQUALS LBRACKET string_lista RBRACKET .)


state 94

    (30) array -> ID EQUALS LBRACKET int_lista RBRACKET .

    $end            reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    END_LOWER       reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    PUTS            reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    PRINT           reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    DEF             reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    CASE            reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    ID              reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    AT              reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    GLOBAL          reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    INT             reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    FLOAT           reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    STR             reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    TRUE            reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    FALSE           reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    COLON           reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    ELSE            reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    WHEN            reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    RCURLYBRACKET   reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)
    COMMA           reduce using rule 30 (array -> ID EQUALS LBRACKET int_lista RBRACKET .)


state 95

    (29) string_lista -> STR COMMA . string_lista
    (28) string_lista -> . STR
    (29) string_lista -> . STR COMMA string_lista

    STR             shift and go to state 72

    string_lista                   shift and go to state 112

state 96

    (32) int_lista -> INT COMMA . int_lista
    (31) int_lista -> . INT
    (32) int_lista -> . INT COMMA int_lista

    INT             shift and go to state 73

    int_lista                      shift and go to state 113

state 97

    (56) statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET . statements RCURLYBRACKET
    (60) statements -> . statement
    (61) statements -> . statements COMMA statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    statements                     shift and go to state 114
    statement                      shift and go to state 115
    expression                     shift and go to state 2
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 98

    (57) statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS . LCURLYBRACKET statements RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 116


state 99

    (59) parameters -> parameters COMMA . ID

    ID              shift and go to state 117


state 100

    (62) statement -> CASE expression case_when_list ELSE statement_list . END_LOWER
    (68) statement_list -> statement_list . statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    END_LOWER       shift and go to state 118
    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 2
    statement                      shift and go to state 119
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 101

    (67) statement_list -> statement .

    END_LOWER       reduce using rule 67 (statement_list -> statement .)
    PUTS            reduce using rule 67 (statement_list -> statement .)
    PRINT           reduce using rule 67 (statement_list -> statement .)
    DEF             reduce using rule 67 (statement_list -> statement .)
    CASE            reduce using rule 67 (statement_list -> statement .)
    ID              reduce using rule 67 (statement_list -> statement .)
    AT              reduce using rule 67 (statement_list -> statement .)
    GLOBAL          reduce using rule 67 (statement_list -> statement .)
    INT             reduce using rule 67 (statement_list -> statement .)
    FLOAT           reduce using rule 67 (statement_list -> statement .)
    STR             reduce using rule 67 (statement_list -> statement .)
    TRUE            reduce using rule 67 (statement_list -> statement .)
    FALSE           reduce using rule 67 (statement_list -> statement .)
    COLON           reduce using rule 67 (statement_list -> statement .)
    ELSE            reduce using rule 67 (statement_list -> statement .)
    WHEN            reduce using rule 67 (statement_list -> statement .)


state 102

    (66) case_when -> ELSE THEN statement_list .
    (68) statement_list -> statement_list . statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ELSE            reduce using rule 66 (case_when -> ELSE THEN statement_list .)
    WHEN            reduce using rule 66 (case_when -> ELSE THEN statement_list .)
    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    statement                      shift and go to state 119
    expression                     shift and go to state 2
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 103

    (65) case_when -> WHEN expression THEN . statement_list
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 2
    statement_list                 shift and go to state 120
    statement                      shift and go to state 101
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 104

    (6) expression_list -> expression_list COMMA expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    WHEN            reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    ELSE            reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    END_LOWER       reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    PUTS            reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    PRINT           reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    DEF             reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    CASE            reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    ID              reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    AT              reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    GLOBAL          reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    INT             reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    FLOAT           reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    STR             reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    TRUE            reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    FALSE           reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    COLON           reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    RCURLYBRACKET   reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    THEN            reduce using rule 6 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25

  ! PLUS            [ reduce using rule 6 (expression_list -> expression_list COMMA expression .) ]
  ! MINUS           [ reduce using rule 6 (expression_list -> expression_list COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 6 (expression_list -> expression_list COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression_list -> expression_list COMMA expression .) ]


state 105

    (10) expression -> ID EQUALS Rational LPARENTHESIS INT COMMA . INT RPARENTHESIS

    INT             shift and go to state 121


state 106

    (18) set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .

    $end            reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    END_LOWER       reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    PUTS            reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    PRINT           reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    DEF             reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    CASE            reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    ID              reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    AT              reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    GLOBAL          reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    INT             reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    FLOAT           reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    STR             reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    TRUE            reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    FALSE           reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    COLON           reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    ELSE            reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    WHEN            reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)
    COMMA           reduce using rule 18 (set_elementos -> ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET .)


state 107

    (22) varios_set_elementos -> INT COMMA . varios_set_elementos
    (19) varios_set_elementos -> . INT
    (20) varios_set_elementos -> . STR
    (21) varios_set_elementos -> . FLOAT
    (22) varios_set_elementos -> . INT COMMA varios_set_elementos
    (23) varios_set_elementos -> . FLOAT COMMA varios_set_elementos
    (24) varios_set_elementos -> . STR COMMA varios_set_elementos

    INT             shift and go to state 87
    STR             shift and go to state 88
    FLOAT           shift and go to state 89

    varios_set_elementos           shift and go to state 122

state 108

    (24) varios_set_elementos -> STR COMMA . varios_set_elementos
    (19) varios_set_elementos -> . INT
    (20) varios_set_elementos -> . STR
    (21) varios_set_elementos -> . FLOAT
    (22) varios_set_elementos -> . INT COMMA varios_set_elementos
    (23) varios_set_elementos -> . FLOAT COMMA varios_set_elementos
    (24) varios_set_elementos -> . STR COMMA varios_set_elementos

    INT             shift and go to state 87
    STR             shift and go to state 88
    FLOAT           shift and go to state 89

    varios_set_elementos           shift and go to state 123

state 109

    (23) varios_set_elementos -> FLOAT COMMA . varios_set_elementos
    (19) varios_set_elementos -> . INT
    (20) varios_set_elementos -> . STR
    (21) varios_set_elementos -> . FLOAT
    (22) varios_set_elementos -> . INT COMMA varios_set_elementos
    (23) varios_set_elementos -> . FLOAT COMMA varios_set_elementos
    (24) varios_set_elementos -> . STR COMMA varios_set_elementos

    INT             shift and go to state 87
    STR             shift and go to state 88
    FLOAT           shift and go to state 89

    varios_set_elementos           shift and go to state 124

state 110

    (37) varios_pares_hash -> ID COLON expression .
    (39) varios_pares_hash -> ID COLON expression . COMMA varios_pares_hash
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

    RCURLYBRACKET   reduce using rule 37 (varios_pares_hash -> ID COLON expression .)
    COMMA           shift and go to state 125
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25


state 111

    (38) varios_pares_hash -> STR HASHAS expression .
    (40) varios_pares_hash -> STR HASHAS expression . COMMA varios_pares_hash
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression

    RCURLYBRACKET   reduce using rule 38 (varios_pares_hash -> STR HASHAS expression .)
    COMMA           shift and go to state 126
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    MULTIPLY        shift and go to state 24
    DIVIDE          shift and go to state 25


state 112

    (29) string_lista -> STR COMMA string_lista .

    RBRACKET        reduce using rule 29 (string_lista -> STR COMMA string_lista .)


state 113

    (32) int_lista -> INT COMMA int_lista .

    RBRACKET        reduce using rule 32 (int_lista -> INT COMMA int_lista .)


state 114

    (56) statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements . RCURLYBRACKET
    (61) statements -> statements . COMMA statement

    RCURLYBRACKET   shift and go to state 127
    COMMA           shift and go to state 128


state 115

    (60) statements -> statement .

    RCURLYBRACKET   reduce using rule 60 (statements -> statement .)
    COMMA           reduce using rule 60 (statements -> statement .)


state 116

    (57) statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET . statements RCURLYBRACKET
    (60) statements -> . statement
    (61) statements -> . statements COMMA statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    statements                     shift and go to state 129
    statement                      shift and go to state 115
    expression                     shift and go to state 2
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 117

    (59) parameters -> parameters COMMA ID .

    RPARENTHESIS    reduce using rule 59 (parameters -> parameters COMMA ID .)
    COMMA           reduce using rule 59 (parameters -> parameters COMMA ID .)


state 118

    (62) statement -> CASE expression case_when_list ELSE statement_list END_LOWER .

    $end            reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    END_LOWER       reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    PUTS            reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    PRINT           reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    DEF             reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    CASE            reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    ID              reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    AT              reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    GLOBAL          reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    INT             reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    FLOAT           reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    STR             reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    TRUE            reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    FALSE           reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    COLON           reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    ELSE            reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    WHEN            reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    RCURLYBRACKET   reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)
    COMMA           reduce using rule 62 (statement -> CASE expression case_when_list ELSE statement_list END_LOWER .)


state 119

    (68) statement_list -> statement_list statement .

    END_LOWER       reduce using rule 68 (statement_list -> statement_list statement .)
    PUTS            reduce using rule 68 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 68 (statement_list -> statement_list statement .)
    DEF             reduce using rule 68 (statement_list -> statement_list statement .)
    CASE            reduce using rule 68 (statement_list -> statement_list statement .)
    ID              reduce using rule 68 (statement_list -> statement_list statement .)
    AT              reduce using rule 68 (statement_list -> statement_list statement .)
    GLOBAL          reduce using rule 68 (statement_list -> statement_list statement .)
    INT             reduce using rule 68 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 68 (statement_list -> statement_list statement .)
    STR             reduce using rule 68 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 68 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 68 (statement_list -> statement_list statement .)
    COLON           reduce using rule 68 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 68 (statement_list -> statement_list statement .)
    WHEN            reduce using rule 68 (statement_list -> statement_list statement .)


state 120

    (65) case_when -> WHEN expression THEN statement_list .
    (68) statement_list -> statement_list . statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    ELSE            reduce using rule 65 (case_when -> WHEN expression THEN statement_list .)
    WHEN            reduce using rule 65 (case_when -> WHEN expression THEN statement_list .)
    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    expression                     shift and go to state 2
    statement                      shift and go to state 119
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 121

    (10) expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT . RPARENTHESIS

    RPARENTHESIS    shift and go to state 130


state 122

    (22) varios_set_elementos -> INT COMMA varios_set_elementos .

    RCURLYBRACKET   reduce using rule 22 (varios_set_elementos -> INT COMMA varios_set_elementos .)


state 123

    (24) varios_set_elementos -> STR COMMA varios_set_elementos .

    RCURLYBRACKET   reduce using rule 24 (varios_set_elementos -> STR COMMA varios_set_elementos .)


state 124

    (23) varios_set_elementos -> FLOAT COMMA varios_set_elementos .

    RCURLYBRACKET   reduce using rule 23 (varios_set_elementos -> FLOAT COMMA varios_set_elementos .)


state 125

    (39) varios_pares_hash -> ID COLON expression COMMA . varios_pares_hash
    (37) varios_pares_hash -> . ID COLON expression
    (38) varios_pares_hash -> . STR HASHAS expression
    (39) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (40) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    ID              shift and go to state 65
    STR             shift and go to state 68

    varios_pares_hash              shift and go to state 131

state 126

    (40) varios_pares_hash -> STR HASHAS expression COMMA . varios_pares_hash
    (37) varios_pares_hash -> . ID COLON expression
    (38) varios_pares_hash -> . STR HASHAS expression
    (39) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (40) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    ID              shift and go to state 65
    STR             shift and go to state 68

    varios_pares_hash              shift and go to state 132

state 127

    (56) statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .

    $end            reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    END_LOWER       reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    PUTS            reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    PRINT           reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    DEF             reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    CASE            reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    ID              reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    AT              reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    GLOBAL          reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    INT             reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    FLOAT           reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    STR             reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    TRUE            reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    FALSE           reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    COLON           reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    ELSE            reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    WHEN            reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    COMMA           reduce using rule 56 (statement -> DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)


state 128

    (61) statements -> statements COMMA . statement
    (1) statement -> . expression
    (15) statement -> . set_vacio
    (16) statement -> . set_elementos
    (25) statement -> . array
    (33) statement -> . hash_vacio
    (34) statement -> . hash_elementos
    (48) statement -> . PUTS STR
    (49) statement -> . PRINT STR
    (50) statement -> . PUTS INT
    (51) statement -> . PRINT INT
    (52) statement -> . PUTS FLOAT
    (53) statement -> . PRINT FLOAT
    (54) statement -> . PUTS ID
    (55) statement -> . PRINT ID
    (56) statement -> . DEF ID LPARENTHESIS RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (57) statement -> . DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET
    (62) statement -> . CASE expression case_when_list ELSE statement_list END_LOWER
    (2) expression -> . variable_list EQUALS expression_list
    (7) expression -> . ID EQUALS expression
    (8) expression -> . AT ID EQUALS expression
    (9) expression -> . GLOBAL ID EQUALS expression
    (10) expression -> . ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (41) expression -> . INT
    (42) expression -> . FLOAT
    (43) expression -> . STR
    (44) expression -> . TRUE
    (45) expression -> . FALSE
    (46) expression -> . COLON ID
    (47) expression -> . ID
    (17) set_vacio -> . ID EQUALS SET LCURLYBRACKET RCURLYBRACKET
    (18) set_elementos -> . ID EQUALS SET LCURLYBRACKET varios_set_elementos RCURLYBRACKET
    (26) array -> . ID EQUALS LBRACKET RBRACKET
    (27) array -> . ID EQUALS LBRACKET string_lista RBRACKET
    (30) array -> . ID EQUALS LBRACKET int_lista RBRACKET
    (35) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (36) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (3) variable_list -> . ID
    (4) variable_list -> . variable_list COMMA ID

    PUTS            shift and go to state 8
    PRINT           shift and go to state 10
    DEF             shift and go to state 14
    CASE            shift and go to state 15
    ID              shift and go to state 13
    AT              shift and go to state 17
    GLOBAL          shift and go to state 18
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STR             shift and go to state 9
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    COLON           shift and go to state 21

    statement                      shift and go to state 133
    expression                     shift and go to state 2
    set_vacio                      shift and go to state 3
    set_elementos                  shift and go to state 4
    array                          shift and go to state 5
    hash_vacio                     shift and go to state 6
    hash_elementos                 shift and go to state 7
    variable_list                  shift and go to state 16

state 129

    (57) statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements . RCURLYBRACKET
    (61) statements -> statements . COMMA statement

    RCURLYBRACKET   shift and go to state 134
    COMMA           shift and go to state 128


state 130

    (10) expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .

    PLUS            reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    MINUS           reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    MULTIPLY        reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    DIVIDE          reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    $end            reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    WHEN            reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    ELSE            reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    END_LOWER       reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    PUTS            reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    PRINT           reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    DEF             reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    CASE            reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    ID              reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    AT              reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    GLOBAL          reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    INT             reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    FLOAT           reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    STR             reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    TRUE            reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    FALSE           reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    COLON           reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    RCURLYBRACKET   reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    COMMA           reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)
    THEN            reduce using rule 10 (expression -> ID EQUALS Rational LPARENTHESIS INT COMMA INT RPARENTHESIS .)


state 131

    (39) varios_pares_hash -> ID COLON expression COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 39 (varios_pares_hash -> ID COLON expression COMMA varios_pares_hash .)


state 132

    (40) varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 40 (varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash .)


state 133

    (61) statements -> statements COMMA statement .

    RCURLYBRACKET   reduce using rule 61 (statements -> statements COMMA statement .)
    COMMA           reduce using rule 61 (statements -> statements COMMA statement .)


state 134

    (57) statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .

    $end            reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    END_LOWER       reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    PUTS            reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    PRINT           reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    DEF             reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    CASE            reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    ID              reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    AT              reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    GLOBAL          reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    INT             reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    FLOAT           reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    STR             reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    TRUE            reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    FALSE           reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    COLON           reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    ELSE            reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    WHEN            reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)
    COMMA           reduce using rule 57 (statement -> DEF ID LPARENTHESIS parameters RPARENTHESIS LCURLYBRACKET statements RCURLYBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUALS in state 13 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 43 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 44 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 45 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 47 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 47 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: reduce/reduce conflict in state 13 resolved using rule (variable_list -> ID)
WARNING: rejected rule (expression -> ID) in state 13
WARNING: reduce/reduce conflict in state 37 resolved using rule (variable_list -> ID)
WARNING: rejected rule (expression -> ID) in state 37
