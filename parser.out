Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    ARRAY
    AT
    BEGIN
    BITWISE_AND
    BITWISE_NOT
    BITWISE_OR
    BITWISE_XOR
    CLASS
    COMPLEX
    CONSTANT
    DEDENT
    DEFINED
    DIVIDE
    DOT
    EACH
    ELSEIF
    END_UPPER
    ENSURE
    EXPONENT
    FALSE
    FILE
    FOR
    GLOBAL
    HASH
    IN
    INDENT
    LINE
    MINUS
    MODULE
    MODULO
    MULTIPLY
    NEXT
    NIL
    NOT
    OP_NOT
    OR
    PLUS
    RATIONAL
    REDO
    RESCUE
    RETRY
    SELF
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SUPER
    SYMBOL
    TRUE
    UNDEF
    UNLESS
    UNTIL
    WHILE
    YIELD

Grammar

Rule 0     S' -> statement
Rule 1     statement -> set_vacio
Rule 2     statement -> set_numero
Rule 3     statement -> set_str
Rule 4     statement -> array_vacio
Rule 5     statement -> array_numero
Rule 6     statement -> array_str
Rule 7     array_vacio -> ID EQUALS LBRACKET RBRACKET
Rule 8     array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET
Rule 9     array_str -> ID EQUALS LBRACKET varios_str RBRACKET
Rule 10    set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 11    set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
Rule 12    set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
Rule 13    statement -> hash_vacio
Rule 14    statement -> hash_elementos
Rule 15    hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 16    hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
Rule 17    varios_pares_hash -> ID COLON valor
Rule 18    varios_pares_hash -> STR HASHAS valor
Rule 19    varios_pares_hash -> ID COLON valor COMMA varios_pares_hash
Rule 20    varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash
Rule 21    statement -> IF comparaciones statement END_LOWER
Rule 22    statement -> LOOP DO statement BREAK IF comparacion
Rule 23    statement -> CASE valor when_clauses ELSE statement_list END_LOWER
Rule 24    statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER
Rule 25    when_clauses -> when_clause
Rule 26    when_clauses -> when_clauses when_clause
Rule 27    when_clause -> WHEN valor THEN statement_list
Rule 28    when_clause -> WHEN valor PUTS valor
Rule 29    statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
Rule 30    statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
Rule 31    statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
Rule 32    varios_str -> STR
Rule 33    varios_str -> STR COMMA STR
Rule 34    statement -> ID EQUALS valor
Rule 35    valor -> numero
Rule 36    valor -> STR
Rule 37    valor -> ID
Rule 38    argumentos -> ID
Rule 39    argumentos -> ID COMMA argumentos
Rule 40    statement_list -> statement_list statement
Rule 41    statement_list -> statement
Rule 42    comparador -> EQUAL
Rule 43    comparador -> NOT_EQUAL
Rule 44    comparador -> GREATER_THAN
Rule 45    comparador -> LESS_THAN
Rule 46    comparador -> GREATER_THAN_EQUAL
Rule 47    comparador -> LESS_THAN_EQUAL
Rule 48    comparacion_num -> numero comparador numero
Rule 49    comparacion_variables -> ID EQUAL ID
Rule 50    comparacion_variables -> ID NOT_EQUAL ID
Rule 51    comparacion -> comparacion_num
Rule 52    comparacion -> comparacion_variables
Rule 53    comparaciones -> comparacion
Rule 54    comparaciones -> comparacion conector comparacion
Rule 55    conector -> OP_AND
Rule 56    conector -> OP_OR
Rule 57    numero -> INT
Rule 58    numero -> FLOAT
Rule 59    varios_numeros -> numero
Rule 60    varios_numeros -> numero COMMA varios_numeros

Terminals, with rules where they appear

ALIAS                : 
AND                  : 
ARRAY                : 
AT                   : 
BEGIN                : 
BITWISE_AND          : 
BITWISE_NOT          : 
BITWISE_OR           : 
BITWISE_XOR          : 
BREAK                : 22
CASE                 : 23 24
CLASS                : 
COLON                : 17 19
COMMA                : 19 20 33 39 60
COMPLEX              : 
CONSTANT             : 
DEDENT               : 
DEF                  : 29 30 31
DEFINED              : 
DIVIDE               : 
DO                   : 22
DOT                  : 
EACH                 : 
ELSE                 : 23 24
ELSEIF               : 
END_LOWER            : 21 23 24 29 30 31
END_UPPER            : 
ENSURE               : 
EQUAL                : 42 49
EQUALS               : 7 8 9 10 11 12 15 16 34
EXPONENT             : 
FALSE                : 
FILE                 : 
FLOAT                : 58
FOR                  : 
GLOBAL               : 
GREATER_THAN         : 44
GREATER_THAN_EQUAL   : 46
HASH                 : 
HASHAS               : 18 20
ID                   : 7 8 9 10 11 12 15 16 17 19 29 30 31 34 37 38 39 49 49 50 50
IF                   : 21 22
IN                   : 
INDENT               : 
INT                  : 57
LBRACKET             : 7 8 9
LCURLYBRACKET        : 10 11 12 15 16
LESS_THAN            : 45
LESS_THAN_EQUAL      : 47
LINE                 : 
LOOP                 : 22
LPARENTHESIS         : 29 30 31
MINUS                : 
MODULE               : 
MODULO               : 
MULTIPLY             : 
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 43 50
OP_AND               : 55
OP_NOT               : 
OP_OR                : 56
OR                   : 
PLUS                 : 
PUTS                 : 24 28
RATIONAL             : 
RBRACKET             : 7 8 9
RCURLYBRACKET        : 10 11 12 15 16
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 31
RPARENTHESIS         : 29 30 31
SELF                 : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
STR                  : 18 20 32 33 33 36
SUPER                : 
SYMBOL               : 
THEN                 : 27
TRUE                 : 
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 27 28
WHILE                : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

argumentos           : 30 31 39
array_numero         : 5
array_str            : 6
array_vacio          : 4
comparacion          : 22 53 54 54
comparacion_num      : 51
comparacion_variables : 52
comparaciones        : 21
comparador           : 48
conector             : 54
hash_elementos       : 14
hash_vacio           : 13
numero               : 35 48 48 59 60
set_numero           : 2
set_str              : 3
set_vacio            : 1
statement            : 21 22 29 30 31 40 41 0
statement_list       : 23 27 40
valor                : 17 18 19 20 23 24 24 27 28 28 31 34
varios_numeros       : 8 11 60
varios_pares_hash    : 16 19 20
varios_str           : 9 12
when_clause          : 25 26
when_clauses         : 23 24 26

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement                      shift and go to state 1
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 1

    (0) S' -> statement .



state 2

    (1) statement -> set_vacio .

    $end            reduce using rule 1 (statement -> set_vacio .)
    END_LOWER       reduce using rule 1 (statement -> set_vacio .)
    BREAK           reduce using rule 1 (statement -> set_vacio .)
    IF              reduce using rule 1 (statement -> set_vacio .)
    LOOP            reduce using rule 1 (statement -> set_vacio .)
    CASE            reduce using rule 1 (statement -> set_vacio .)
    DEF             reduce using rule 1 (statement -> set_vacio .)
    ID              reduce using rule 1 (statement -> set_vacio .)
    ELSE            reduce using rule 1 (statement -> set_vacio .)
    WHEN            reduce using rule 1 (statement -> set_vacio .)
    RETURN          reduce using rule 1 (statement -> set_vacio .)


state 3

    (2) statement -> set_numero .

    $end            reduce using rule 2 (statement -> set_numero .)
    END_LOWER       reduce using rule 2 (statement -> set_numero .)
    BREAK           reduce using rule 2 (statement -> set_numero .)
    IF              reduce using rule 2 (statement -> set_numero .)
    LOOP            reduce using rule 2 (statement -> set_numero .)
    CASE            reduce using rule 2 (statement -> set_numero .)
    DEF             reduce using rule 2 (statement -> set_numero .)
    ID              reduce using rule 2 (statement -> set_numero .)
    ELSE            reduce using rule 2 (statement -> set_numero .)
    WHEN            reduce using rule 2 (statement -> set_numero .)
    RETURN          reduce using rule 2 (statement -> set_numero .)


state 4

    (3) statement -> set_str .

    $end            reduce using rule 3 (statement -> set_str .)
    END_LOWER       reduce using rule 3 (statement -> set_str .)
    BREAK           reduce using rule 3 (statement -> set_str .)
    IF              reduce using rule 3 (statement -> set_str .)
    LOOP            reduce using rule 3 (statement -> set_str .)
    CASE            reduce using rule 3 (statement -> set_str .)
    DEF             reduce using rule 3 (statement -> set_str .)
    ID              reduce using rule 3 (statement -> set_str .)
    ELSE            reduce using rule 3 (statement -> set_str .)
    WHEN            reduce using rule 3 (statement -> set_str .)
    RETURN          reduce using rule 3 (statement -> set_str .)


state 5

    (4) statement -> array_vacio .

    $end            reduce using rule 4 (statement -> array_vacio .)
    END_LOWER       reduce using rule 4 (statement -> array_vacio .)
    BREAK           reduce using rule 4 (statement -> array_vacio .)
    IF              reduce using rule 4 (statement -> array_vacio .)
    LOOP            reduce using rule 4 (statement -> array_vacio .)
    CASE            reduce using rule 4 (statement -> array_vacio .)
    DEF             reduce using rule 4 (statement -> array_vacio .)
    ID              reduce using rule 4 (statement -> array_vacio .)
    ELSE            reduce using rule 4 (statement -> array_vacio .)
    WHEN            reduce using rule 4 (statement -> array_vacio .)
    RETURN          reduce using rule 4 (statement -> array_vacio .)


state 6

    (5) statement -> array_numero .

    $end            reduce using rule 5 (statement -> array_numero .)
    END_LOWER       reduce using rule 5 (statement -> array_numero .)
    BREAK           reduce using rule 5 (statement -> array_numero .)
    IF              reduce using rule 5 (statement -> array_numero .)
    LOOP            reduce using rule 5 (statement -> array_numero .)
    CASE            reduce using rule 5 (statement -> array_numero .)
    DEF             reduce using rule 5 (statement -> array_numero .)
    ID              reduce using rule 5 (statement -> array_numero .)
    ELSE            reduce using rule 5 (statement -> array_numero .)
    WHEN            reduce using rule 5 (statement -> array_numero .)
    RETURN          reduce using rule 5 (statement -> array_numero .)


state 7

    (6) statement -> array_str .

    $end            reduce using rule 6 (statement -> array_str .)
    END_LOWER       reduce using rule 6 (statement -> array_str .)
    BREAK           reduce using rule 6 (statement -> array_str .)
    IF              reduce using rule 6 (statement -> array_str .)
    LOOP            reduce using rule 6 (statement -> array_str .)
    CASE            reduce using rule 6 (statement -> array_str .)
    DEF             reduce using rule 6 (statement -> array_str .)
    ID              reduce using rule 6 (statement -> array_str .)
    ELSE            reduce using rule 6 (statement -> array_str .)
    WHEN            reduce using rule 6 (statement -> array_str .)
    RETURN          reduce using rule 6 (statement -> array_str .)


state 8

    (13) statement -> hash_vacio .

    $end            reduce using rule 13 (statement -> hash_vacio .)
    END_LOWER       reduce using rule 13 (statement -> hash_vacio .)
    BREAK           reduce using rule 13 (statement -> hash_vacio .)
    IF              reduce using rule 13 (statement -> hash_vacio .)
    LOOP            reduce using rule 13 (statement -> hash_vacio .)
    CASE            reduce using rule 13 (statement -> hash_vacio .)
    DEF             reduce using rule 13 (statement -> hash_vacio .)
    ID              reduce using rule 13 (statement -> hash_vacio .)
    ELSE            reduce using rule 13 (statement -> hash_vacio .)
    WHEN            reduce using rule 13 (statement -> hash_vacio .)
    RETURN          reduce using rule 13 (statement -> hash_vacio .)


state 9

    (14) statement -> hash_elementos .

    $end            reduce using rule 14 (statement -> hash_elementos .)
    END_LOWER       reduce using rule 14 (statement -> hash_elementos .)
    BREAK           reduce using rule 14 (statement -> hash_elementos .)
    IF              reduce using rule 14 (statement -> hash_elementos .)
    LOOP            reduce using rule 14 (statement -> hash_elementos .)
    CASE            reduce using rule 14 (statement -> hash_elementos .)
    DEF             reduce using rule 14 (statement -> hash_elementos .)
    ID              reduce using rule 14 (statement -> hash_elementos .)
    ELSE            reduce using rule 14 (statement -> hash_elementos .)
    WHEN            reduce using rule 14 (statement -> hash_elementos .)
    RETURN          reduce using rule 14 (statement -> hash_elementos .)


state 10

    (21) statement -> IF . comparaciones statement END_LOWER
    (53) comparaciones -> . comparacion
    (54) comparaciones -> . comparacion conector comparacion
    (51) comparacion -> . comparacion_num
    (52) comparacion -> . comparacion_variables
    (48) comparacion_num -> . numero comparador numero
    (49) comparacion_variables -> . ID EQUAL ID
    (50) comparacion_variables -> . ID NOT_EQUAL ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    ID              shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    comparaciones                  shift and go to state 15
    comparacion                    shift and go to state 16
    comparacion_num                shift and go to state 17
    comparacion_variables          shift and go to state 18
    numero                         shift and go to state 19

state 11

    (22) statement -> LOOP . DO statement BREAK IF comparacion

    DO              shift and go to state 23


state 12

    (23) statement -> CASE . valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> CASE . valor when_clauses ELSE PUTS valor END_LOWER
    (35) valor -> . numero
    (36) valor -> . STR
    (37) valor -> . ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    STR             shift and go to state 26
    ID              shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 24
    numero                         shift and go to state 25

state 13

    (29) statement -> DEF . ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> DEF . ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> DEF . ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER

    ID              shift and go to state 28


state 14

    (34) statement -> ID . EQUALS valor
    (10) set_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> ID . EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> ID . EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> ID . EQUALS LBRACKET RBRACKET
    (8) array_numero -> ID . EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> ID . EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> ID . EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    EQUALS          shift and go to state 29


state 15

    (21) statement -> IF comparaciones . statement END_LOWER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement                      shift and go to state 30
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 16

    (53) comparaciones -> comparacion .
    (54) comparaciones -> comparacion . conector comparacion
    (55) conector -> . OP_AND
    (56) conector -> . OP_OR

    IF              reduce using rule 53 (comparaciones -> comparacion .)
    LOOP            reduce using rule 53 (comparaciones -> comparacion .)
    CASE            reduce using rule 53 (comparaciones -> comparacion .)
    DEF             reduce using rule 53 (comparaciones -> comparacion .)
    ID              reduce using rule 53 (comparaciones -> comparacion .)
    OP_AND          shift and go to state 32
    OP_OR           shift and go to state 33

    conector                       shift and go to state 31

state 17

    (51) comparacion -> comparacion_num .

    OP_AND          reduce using rule 51 (comparacion -> comparacion_num .)
    OP_OR           reduce using rule 51 (comparacion -> comparacion_num .)
    IF              reduce using rule 51 (comparacion -> comparacion_num .)
    LOOP            reduce using rule 51 (comparacion -> comparacion_num .)
    CASE            reduce using rule 51 (comparacion -> comparacion_num .)
    DEF             reduce using rule 51 (comparacion -> comparacion_num .)
    ID              reduce using rule 51 (comparacion -> comparacion_num .)
    $end            reduce using rule 51 (comparacion -> comparacion_num .)
    END_LOWER       reduce using rule 51 (comparacion -> comparacion_num .)
    BREAK           reduce using rule 51 (comparacion -> comparacion_num .)
    ELSE            reduce using rule 51 (comparacion -> comparacion_num .)
    WHEN            reduce using rule 51 (comparacion -> comparacion_num .)
    RETURN          reduce using rule 51 (comparacion -> comparacion_num .)


state 18

    (52) comparacion -> comparacion_variables .

    OP_AND          reduce using rule 52 (comparacion -> comparacion_variables .)
    OP_OR           reduce using rule 52 (comparacion -> comparacion_variables .)
    IF              reduce using rule 52 (comparacion -> comparacion_variables .)
    LOOP            reduce using rule 52 (comparacion -> comparacion_variables .)
    CASE            reduce using rule 52 (comparacion -> comparacion_variables .)
    DEF             reduce using rule 52 (comparacion -> comparacion_variables .)
    ID              reduce using rule 52 (comparacion -> comparacion_variables .)
    $end            reduce using rule 52 (comparacion -> comparacion_variables .)
    END_LOWER       reduce using rule 52 (comparacion -> comparacion_variables .)
    BREAK           reduce using rule 52 (comparacion -> comparacion_variables .)
    ELSE            reduce using rule 52 (comparacion -> comparacion_variables .)
    WHEN            reduce using rule 52 (comparacion -> comparacion_variables .)
    RETURN          reduce using rule 52 (comparacion -> comparacion_variables .)


state 19

    (48) comparacion_num -> numero . comparador numero
    (42) comparador -> . EQUAL
    (43) comparador -> . NOT_EQUAL
    (44) comparador -> . GREATER_THAN
    (45) comparador -> . LESS_THAN
    (46) comparador -> . GREATER_THAN_EQUAL
    (47) comparador -> . LESS_THAN_EQUAL

    EQUAL           shift and go to state 35
    NOT_EQUAL       shift and go to state 36
    GREATER_THAN    shift and go to state 37
    LESS_THAN       shift and go to state 38
    GREATER_THAN_EQUAL shift and go to state 39
    LESS_THAN_EQUAL shift and go to state 40

    comparador                     shift and go to state 34

state 20

    (49) comparacion_variables -> ID . EQUAL ID
    (50) comparacion_variables -> ID . NOT_EQUAL ID

    EQUAL           shift and go to state 41
    NOT_EQUAL       shift and go to state 42


state 21

    (57) numero -> INT .

    EQUAL           reduce using rule 57 (numero -> INT .)
    NOT_EQUAL       reduce using rule 57 (numero -> INT .)
    GREATER_THAN    reduce using rule 57 (numero -> INT .)
    LESS_THAN       reduce using rule 57 (numero -> INT .)
    GREATER_THAN_EQUAL reduce using rule 57 (numero -> INT .)
    LESS_THAN_EQUAL reduce using rule 57 (numero -> INT .)
    WHEN            reduce using rule 57 (numero -> INT .)
    $end            reduce using rule 57 (numero -> INT .)
    END_LOWER       reduce using rule 57 (numero -> INT .)
    BREAK           reduce using rule 57 (numero -> INT .)
    IF              reduce using rule 57 (numero -> INT .)
    LOOP            reduce using rule 57 (numero -> INT .)
    CASE            reduce using rule 57 (numero -> INT .)
    DEF             reduce using rule 57 (numero -> INT .)
    ID              reduce using rule 57 (numero -> INT .)
    ELSE            reduce using rule 57 (numero -> INT .)
    RETURN          reduce using rule 57 (numero -> INT .)
    OP_AND          reduce using rule 57 (numero -> INT .)
    OP_OR           reduce using rule 57 (numero -> INT .)
    THEN            reduce using rule 57 (numero -> INT .)
    PUTS            reduce using rule 57 (numero -> INT .)
    COMMA           reduce using rule 57 (numero -> INT .)
    RCURLYBRACKET   reduce using rule 57 (numero -> INT .)
    RBRACKET        reduce using rule 57 (numero -> INT .)


state 22

    (58) numero -> FLOAT .

    EQUAL           reduce using rule 58 (numero -> FLOAT .)
    NOT_EQUAL       reduce using rule 58 (numero -> FLOAT .)
    GREATER_THAN    reduce using rule 58 (numero -> FLOAT .)
    LESS_THAN       reduce using rule 58 (numero -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 58 (numero -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 58 (numero -> FLOAT .)
    WHEN            reduce using rule 58 (numero -> FLOAT .)
    $end            reduce using rule 58 (numero -> FLOAT .)
    END_LOWER       reduce using rule 58 (numero -> FLOAT .)
    BREAK           reduce using rule 58 (numero -> FLOAT .)
    IF              reduce using rule 58 (numero -> FLOAT .)
    LOOP            reduce using rule 58 (numero -> FLOAT .)
    CASE            reduce using rule 58 (numero -> FLOAT .)
    DEF             reduce using rule 58 (numero -> FLOAT .)
    ID              reduce using rule 58 (numero -> FLOAT .)
    ELSE            reduce using rule 58 (numero -> FLOAT .)
    RETURN          reduce using rule 58 (numero -> FLOAT .)
    OP_AND          reduce using rule 58 (numero -> FLOAT .)
    OP_OR           reduce using rule 58 (numero -> FLOAT .)
    THEN            reduce using rule 58 (numero -> FLOAT .)
    PUTS            reduce using rule 58 (numero -> FLOAT .)
    COMMA           reduce using rule 58 (numero -> FLOAT .)
    RCURLYBRACKET   reduce using rule 58 (numero -> FLOAT .)
    RBRACKET        reduce using rule 58 (numero -> FLOAT .)


state 23

    (22) statement -> LOOP DO . statement BREAK IF comparacion
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement                      shift and go to state 43
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 24

    (23) statement -> CASE valor . when_clauses ELSE statement_list END_LOWER
    (24) statement -> CASE valor . when_clauses ELSE PUTS valor END_LOWER
    (25) when_clauses -> . when_clause
    (26) when_clauses -> . when_clauses when_clause
    (27) when_clause -> . WHEN valor THEN statement_list
    (28) when_clause -> . WHEN valor PUTS valor

    WHEN            shift and go to state 46

    when_clauses                   shift and go to state 44
    when_clause                    shift and go to state 45

state 25

    (35) valor -> numero .

    WHEN            reduce using rule 35 (valor -> numero .)
    $end            reduce using rule 35 (valor -> numero .)
    END_LOWER       reduce using rule 35 (valor -> numero .)
    BREAK           reduce using rule 35 (valor -> numero .)
    IF              reduce using rule 35 (valor -> numero .)
    LOOP            reduce using rule 35 (valor -> numero .)
    CASE            reduce using rule 35 (valor -> numero .)
    DEF             reduce using rule 35 (valor -> numero .)
    ID              reduce using rule 35 (valor -> numero .)
    ELSE            reduce using rule 35 (valor -> numero .)
    RETURN          reduce using rule 35 (valor -> numero .)
    THEN            reduce using rule 35 (valor -> numero .)
    PUTS            reduce using rule 35 (valor -> numero .)
    COMMA           reduce using rule 35 (valor -> numero .)
    RCURLYBRACKET   reduce using rule 35 (valor -> numero .)


state 26

    (36) valor -> STR .

    WHEN            reduce using rule 36 (valor -> STR .)
    $end            reduce using rule 36 (valor -> STR .)
    END_LOWER       reduce using rule 36 (valor -> STR .)
    BREAK           reduce using rule 36 (valor -> STR .)
    IF              reduce using rule 36 (valor -> STR .)
    LOOP            reduce using rule 36 (valor -> STR .)
    CASE            reduce using rule 36 (valor -> STR .)
    DEF             reduce using rule 36 (valor -> STR .)
    ID              reduce using rule 36 (valor -> STR .)
    ELSE            reduce using rule 36 (valor -> STR .)
    RETURN          reduce using rule 36 (valor -> STR .)
    THEN            reduce using rule 36 (valor -> STR .)
    PUTS            reduce using rule 36 (valor -> STR .)
    COMMA           reduce using rule 36 (valor -> STR .)
    RCURLYBRACKET   reduce using rule 36 (valor -> STR .)


state 27

    (37) valor -> ID .

    WHEN            reduce using rule 37 (valor -> ID .)
    $end            reduce using rule 37 (valor -> ID .)
    END_LOWER       reduce using rule 37 (valor -> ID .)
    BREAK           reduce using rule 37 (valor -> ID .)
    IF              reduce using rule 37 (valor -> ID .)
    LOOP            reduce using rule 37 (valor -> ID .)
    CASE            reduce using rule 37 (valor -> ID .)
    DEF             reduce using rule 37 (valor -> ID .)
    ID              reduce using rule 37 (valor -> ID .)
    ELSE            reduce using rule 37 (valor -> ID .)
    RETURN          reduce using rule 37 (valor -> ID .)
    THEN            reduce using rule 37 (valor -> ID .)
    PUTS            reduce using rule 37 (valor -> ID .)
    COMMA           reduce using rule 37 (valor -> ID .)
    RCURLYBRACKET   reduce using rule 37 (valor -> ID .)


state 28

    (29) statement -> DEF ID . LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> DEF ID . LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> DEF ID . LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER

    LPARENTHESIS    shift and go to state 47


state 29

    (34) statement -> ID EQUALS . valor
    (10) set_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> ID EQUALS . LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> ID EQUALS . LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> ID EQUALS . LBRACKET RBRACKET
    (8) array_numero -> ID EQUALS . LBRACKET varios_numeros RBRACKET
    (9) array_str -> ID EQUALS . LBRACKET varios_str RBRACKET
    (15) hash_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> ID EQUALS . LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (35) valor -> . numero
    (36) valor -> . STR
    (37) valor -> . ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    LCURLYBRACKET   shift and go to state 49
    LBRACKET        shift and go to state 50
    STR             shift and go to state 26
    ID              shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 48
    numero                         shift and go to state 25

state 30

    (21) statement -> IF comparaciones statement . END_LOWER

    END_LOWER       shift and go to state 51


state 31

    (54) comparaciones -> comparacion conector . comparacion
    (51) comparacion -> . comparacion_num
    (52) comparacion -> . comparacion_variables
    (48) comparacion_num -> . numero comparador numero
    (49) comparacion_variables -> . ID EQUAL ID
    (50) comparacion_variables -> . ID NOT_EQUAL ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    ID              shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    comparacion                    shift and go to state 52
    comparacion_num                shift and go to state 17
    comparacion_variables          shift and go to state 18
    numero                         shift and go to state 19

state 32

    (55) conector -> OP_AND .

    ID              reduce using rule 55 (conector -> OP_AND .)
    INT             reduce using rule 55 (conector -> OP_AND .)
    FLOAT           reduce using rule 55 (conector -> OP_AND .)


state 33

    (56) conector -> OP_OR .

    ID              reduce using rule 56 (conector -> OP_OR .)
    INT             reduce using rule 56 (conector -> OP_OR .)
    FLOAT           reduce using rule 56 (conector -> OP_OR .)


state 34

    (48) comparacion_num -> numero comparador . numero
    (57) numero -> . INT
    (58) numero -> . FLOAT

    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    numero                         shift and go to state 53

state 35

    (42) comparador -> EQUAL .

    INT             reduce using rule 42 (comparador -> EQUAL .)
    FLOAT           reduce using rule 42 (comparador -> EQUAL .)


state 36

    (43) comparador -> NOT_EQUAL .

    INT             reduce using rule 43 (comparador -> NOT_EQUAL .)
    FLOAT           reduce using rule 43 (comparador -> NOT_EQUAL .)


state 37

    (44) comparador -> GREATER_THAN .

    INT             reduce using rule 44 (comparador -> GREATER_THAN .)
    FLOAT           reduce using rule 44 (comparador -> GREATER_THAN .)


state 38

    (45) comparador -> LESS_THAN .

    INT             reduce using rule 45 (comparador -> LESS_THAN .)
    FLOAT           reduce using rule 45 (comparador -> LESS_THAN .)


state 39

    (46) comparador -> GREATER_THAN_EQUAL .

    INT             reduce using rule 46 (comparador -> GREATER_THAN_EQUAL .)
    FLOAT           reduce using rule 46 (comparador -> GREATER_THAN_EQUAL .)


state 40

    (47) comparador -> LESS_THAN_EQUAL .

    INT             reduce using rule 47 (comparador -> LESS_THAN_EQUAL .)
    FLOAT           reduce using rule 47 (comparador -> LESS_THAN_EQUAL .)


state 41

    (49) comparacion_variables -> ID EQUAL . ID

    ID              shift and go to state 54


state 42

    (50) comparacion_variables -> ID NOT_EQUAL . ID

    ID              shift and go to state 55


state 43

    (22) statement -> LOOP DO statement . BREAK IF comparacion

    BREAK           shift and go to state 56


state 44

    (23) statement -> CASE valor when_clauses . ELSE statement_list END_LOWER
    (24) statement -> CASE valor when_clauses . ELSE PUTS valor END_LOWER
    (26) when_clauses -> when_clauses . when_clause
    (27) when_clause -> . WHEN valor THEN statement_list
    (28) when_clause -> . WHEN valor PUTS valor

    ELSE            shift and go to state 57
    WHEN            shift and go to state 46

    when_clause                    shift and go to state 58

state 45

    (25) when_clauses -> when_clause .

    ELSE            reduce using rule 25 (when_clauses -> when_clause .)
    WHEN            reduce using rule 25 (when_clauses -> when_clause .)


state 46

    (27) when_clause -> WHEN . valor THEN statement_list
    (28) when_clause -> WHEN . valor PUTS valor
    (35) valor -> . numero
    (36) valor -> . STR
    (37) valor -> . ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    STR             shift and go to state 26
    ID              shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 59
    numero                         shift and go to state 25

state 47

    (29) statement -> DEF ID LPARENTHESIS . RPARENTHESIS statement END_LOWER
    (30) statement -> DEF ID LPARENTHESIS . argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> DEF ID LPARENTHESIS . argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (38) argumentos -> . ID
    (39) argumentos -> . ID COMMA argumentos

    RPARENTHESIS    shift and go to state 61
    ID              shift and go to state 60

    argumentos                     shift and go to state 62

state 48

    (34) statement -> ID EQUALS valor .

    $end            reduce using rule 34 (statement -> ID EQUALS valor .)
    END_LOWER       reduce using rule 34 (statement -> ID EQUALS valor .)
    BREAK           reduce using rule 34 (statement -> ID EQUALS valor .)
    IF              reduce using rule 34 (statement -> ID EQUALS valor .)
    LOOP            reduce using rule 34 (statement -> ID EQUALS valor .)
    CASE            reduce using rule 34 (statement -> ID EQUALS valor .)
    DEF             reduce using rule 34 (statement -> ID EQUALS valor .)
    ID              reduce using rule 34 (statement -> ID EQUALS valor .)
    ELSE            reduce using rule 34 (statement -> ID EQUALS valor .)
    WHEN            reduce using rule 34 (statement -> ID EQUALS valor .)
    RETURN          reduce using rule 34 (statement -> ID EQUALS valor .)


state 49

    (10) set_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (11) set_numero -> ID EQUALS LCURLYBRACKET . varios_numeros RCURLYBRACKET
    (12) set_str -> ID EQUALS LCURLYBRACKET . varios_str RCURLYBRACKET
    (15) hash_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (16) hash_elementos -> ID EQUALS LCURLYBRACKET . varios_pares_hash RCURLYBRACKET
    (59) varios_numeros -> . numero
    (60) varios_numeros -> . numero COMMA varios_numeros
    (32) varios_str -> . STR
    (33) varios_str -> . STR COMMA STR
    (17) varios_pares_hash -> . ID COLON valor
    (18) varios_pares_hash -> . STR HASHAS valor
    (19) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (20) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash
    (57) numero -> . INT
    (58) numero -> . FLOAT

    RCURLYBRACKET   shift and go to state 64
    STR             shift and go to state 69
    ID              shift and go to state 63
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    varios_numeros                 shift and go to state 65
    varios_str                     shift and go to state 66
    varios_pares_hash              shift and go to state 67
    numero                         shift and go to state 68

state 50

    (7) array_vacio -> ID EQUALS LBRACKET . RBRACKET
    (8) array_numero -> ID EQUALS LBRACKET . varios_numeros RBRACKET
    (9) array_str -> ID EQUALS LBRACKET . varios_str RBRACKET
    (59) varios_numeros -> . numero
    (60) varios_numeros -> . numero COMMA varios_numeros
    (32) varios_str -> . STR
    (33) varios_str -> . STR COMMA STR
    (57) numero -> . INT
    (58) numero -> . FLOAT

    RBRACKET        shift and go to state 70
    STR             shift and go to state 73
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    varios_numeros                 shift and go to state 71
    varios_str                     shift and go to state 72
    numero                         shift and go to state 68

state 51

    (21) statement -> IF comparaciones statement END_LOWER .

    $end            reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    END_LOWER       reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    BREAK           reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    IF              reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    LOOP            reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    CASE            reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    DEF             reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    ID              reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    ELSE            reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    WHEN            reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)
    RETURN          reduce using rule 21 (statement -> IF comparaciones statement END_LOWER .)


state 52

    (54) comparaciones -> comparacion conector comparacion .

    IF              reduce using rule 54 (comparaciones -> comparacion conector comparacion .)
    LOOP            reduce using rule 54 (comparaciones -> comparacion conector comparacion .)
    CASE            reduce using rule 54 (comparaciones -> comparacion conector comparacion .)
    DEF             reduce using rule 54 (comparaciones -> comparacion conector comparacion .)
    ID              reduce using rule 54 (comparaciones -> comparacion conector comparacion .)


state 53

    (48) comparacion_num -> numero comparador numero .

    OP_AND          reduce using rule 48 (comparacion_num -> numero comparador numero .)
    OP_OR           reduce using rule 48 (comparacion_num -> numero comparador numero .)
    IF              reduce using rule 48 (comparacion_num -> numero comparador numero .)
    LOOP            reduce using rule 48 (comparacion_num -> numero comparador numero .)
    CASE            reduce using rule 48 (comparacion_num -> numero comparador numero .)
    DEF             reduce using rule 48 (comparacion_num -> numero comparador numero .)
    ID              reduce using rule 48 (comparacion_num -> numero comparador numero .)
    $end            reduce using rule 48 (comparacion_num -> numero comparador numero .)
    END_LOWER       reduce using rule 48 (comparacion_num -> numero comparador numero .)
    BREAK           reduce using rule 48 (comparacion_num -> numero comparador numero .)
    ELSE            reduce using rule 48 (comparacion_num -> numero comparador numero .)
    WHEN            reduce using rule 48 (comparacion_num -> numero comparador numero .)
    RETURN          reduce using rule 48 (comparacion_num -> numero comparador numero .)


state 54

    (49) comparacion_variables -> ID EQUAL ID .

    OP_AND          reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    OP_OR           reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    IF              reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    LOOP            reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    CASE            reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    DEF             reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    ID              reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    $end            reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    END_LOWER       reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    BREAK           reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    ELSE            reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    WHEN            reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)
    RETURN          reduce using rule 49 (comparacion_variables -> ID EQUAL ID .)


state 55

    (50) comparacion_variables -> ID NOT_EQUAL ID .

    OP_AND          reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    OP_OR           reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    IF              reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    LOOP            reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    CASE            reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    DEF             reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    ID              reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    $end            reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    END_LOWER       reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    BREAK           reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    ELSE            reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    WHEN            reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)
    RETURN          reduce using rule 50 (comparacion_variables -> ID NOT_EQUAL ID .)


state 56

    (22) statement -> LOOP DO statement BREAK . IF comparacion

    IF              shift and go to state 74


state 57

    (23) statement -> CASE valor when_clauses ELSE . statement_list END_LOWER
    (24) statement -> CASE valor when_clauses ELSE . PUTS valor END_LOWER
    (40) statement_list -> . statement_list statement
    (41) statement_list -> . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    PUTS            shift and go to state 76
    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement_list                 shift and go to state 75
    statement                      shift and go to state 77
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 58

    (26) when_clauses -> when_clauses when_clause .

    ELSE            reduce using rule 26 (when_clauses -> when_clauses when_clause .)
    WHEN            reduce using rule 26 (when_clauses -> when_clauses when_clause .)


state 59

    (27) when_clause -> WHEN valor . THEN statement_list
    (28) when_clause -> WHEN valor . PUTS valor

    THEN            shift and go to state 78
    PUTS            shift and go to state 79


state 60

    (38) argumentos -> ID .
    (39) argumentos -> ID . COMMA argumentos

    RPARENTHESIS    reduce using rule 38 (argumentos -> ID .)
    COMMA           shift and go to state 80


state 61

    (29) statement -> DEF ID LPARENTHESIS RPARENTHESIS . statement END_LOWER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement                      shift and go to state 81
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 62

    (30) statement -> DEF ID LPARENTHESIS argumentos . RPARENTHESIS statement END_LOWER
    (31) statement -> DEF ID LPARENTHESIS argumentos . RPARENTHESIS statement RETURN valor END_LOWER

    RPARENTHESIS    shift and go to state 82


state 63

    (17) varios_pares_hash -> ID . COLON valor
    (19) varios_pares_hash -> ID . COLON valor COMMA varios_pares_hash

    COLON           shift and go to state 83


state 64

    (10) set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .
    (15) hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .

  ! reduce/reduce conflict for $end resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for BREAK resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for LOOP resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for DEF resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for WHEN resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    $end            reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    END_LOWER       reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    BREAK           reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    IF              reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    LOOP            reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    CASE            reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    DEF             reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    ID              reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    ELSE            reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    WHEN            reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    RETURN          reduce using rule 10 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)

  ! $end            [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! END_LOWER       [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! BREAK           [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! IF              [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! LOOP            [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! CASE            [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! DEF             [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! ID              [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! ELSE            [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! WHEN            [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! RETURN          [ reduce using rule 15 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]


state 65

    (11) set_numero -> ID EQUALS LCURLYBRACKET varios_numeros . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 84


state 66

    (12) set_str -> ID EQUALS LCURLYBRACKET varios_str . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 85


state 67

    (16) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 86


state 68

    (59) varios_numeros -> numero .
    (60) varios_numeros -> numero . COMMA varios_numeros

    RCURLYBRACKET   reduce using rule 59 (varios_numeros -> numero .)
    RBRACKET        reduce using rule 59 (varios_numeros -> numero .)
    COMMA           shift and go to state 87


state 69

    (32) varios_str -> STR .
    (33) varios_str -> STR . COMMA STR
    (18) varios_pares_hash -> STR . HASHAS valor
    (20) varios_pares_hash -> STR . HASHAS valor COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 32 (varios_str -> STR .)
    COMMA           shift and go to state 88
    HASHAS          shift and go to state 89


state 70

    (7) array_vacio -> ID EQUALS LBRACKET RBRACKET .

    $end            reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    END_LOWER       reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    BREAK           reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    IF              reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    LOOP            reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    CASE            reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    DEF             reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    ID              reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    ELSE            reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    WHEN            reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    RETURN          reduce using rule 7 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)


state 71

    (8) array_numero -> ID EQUALS LBRACKET varios_numeros . RBRACKET

    RBRACKET        shift and go to state 90


state 72

    (9) array_str -> ID EQUALS LBRACKET varios_str . RBRACKET

    RBRACKET        shift and go to state 91


state 73

    (32) varios_str -> STR .
    (33) varios_str -> STR . COMMA STR

    RBRACKET        reduce using rule 32 (varios_str -> STR .)
    COMMA           shift and go to state 88


state 74

    (22) statement -> LOOP DO statement BREAK IF . comparacion
    (51) comparacion -> . comparacion_num
    (52) comparacion -> . comparacion_variables
    (48) comparacion_num -> . numero comparador numero
    (49) comparacion_variables -> . ID EQUAL ID
    (50) comparacion_variables -> . ID NOT_EQUAL ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    ID              shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    comparacion                    shift and go to state 92
    comparacion_num                shift and go to state 17
    comparacion_variables          shift and go to state 18
    numero                         shift and go to state 19

state 75

    (23) statement -> CASE valor when_clauses ELSE statement_list . END_LOWER
    (40) statement_list -> statement_list . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    END_LOWER       shift and go to state 93
    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement                      shift and go to state 94
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 76

    (24) statement -> CASE valor when_clauses ELSE PUTS . valor END_LOWER
    (35) valor -> . numero
    (36) valor -> . STR
    (37) valor -> . ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    STR             shift and go to state 26
    ID              shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 95
    numero                         shift and go to state 25

state 77

    (41) statement_list -> statement .

    END_LOWER       reduce using rule 41 (statement_list -> statement .)
    IF              reduce using rule 41 (statement_list -> statement .)
    LOOP            reduce using rule 41 (statement_list -> statement .)
    CASE            reduce using rule 41 (statement_list -> statement .)
    DEF             reduce using rule 41 (statement_list -> statement .)
    ID              reduce using rule 41 (statement_list -> statement .)
    ELSE            reduce using rule 41 (statement_list -> statement .)
    WHEN            reduce using rule 41 (statement_list -> statement .)


state 78

    (27) when_clause -> WHEN valor THEN . statement_list
    (40) statement_list -> . statement_list statement
    (41) statement_list -> . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement_list                 shift and go to state 96
    statement                      shift and go to state 77
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 79

    (28) when_clause -> WHEN valor PUTS . valor
    (35) valor -> . numero
    (36) valor -> . STR
    (37) valor -> . ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    STR             shift and go to state 26
    ID              shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 97
    numero                         shift and go to state 25

state 80

    (39) argumentos -> ID COMMA . argumentos
    (38) argumentos -> . ID
    (39) argumentos -> . ID COMMA argumentos

    ID              shift and go to state 60

    argumentos                     shift and go to state 98

state 81

    (29) statement -> DEF ID LPARENTHESIS RPARENTHESIS statement . END_LOWER

    END_LOWER       shift and go to state 99


state 82

    (30) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS . statement END_LOWER
    (31) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS . statement RETURN valor END_LOWER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement                      shift and go to state 100
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 83

    (17) varios_pares_hash -> ID COLON . valor
    (19) varios_pares_hash -> ID COLON . valor COMMA varios_pares_hash
    (35) valor -> . numero
    (36) valor -> . STR
    (37) valor -> . ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    STR             shift and go to state 26
    ID              shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 101
    numero                         shift and go to state 25

state 84

    (11) set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .

    $end            reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    END_LOWER       reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    BREAK           reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    IF              reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    LOOP            reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    CASE            reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    DEF             reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    ID              reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    ELSE            reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    WHEN            reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)
    RETURN          reduce using rule 11 (set_numero -> ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET .)


state 85

    (12) set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .

    $end            reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    END_LOWER       reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    BREAK           reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    IF              reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    LOOP            reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    CASE            reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    DEF             reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    ID              reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    ELSE            reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    WHEN            reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)
    RETURN          reduce using rule 12 (set_str -> ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET .)


state 86

    (16) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .

    $end            reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    END_LOWER       reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    BREAK           reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    IF              reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    LOOP            reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    CASE            reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    DEF             reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    ID              reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    ELSE            reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    WHEN            reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    RETURN          reduce using rule 16 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)


state 87

    (60) varios_numeros -> numero COMMA . varios_numeros
    (59) varios_numeros -> . numero
    (60) varios_numeros -> . numero COMMA varios_numeros
    (57) numero -> . INT
    (58) numero -> . FLOAT

    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    numero                         shift and go to state 68
    varios_numeros                 shift and go to state 102

state 88

    (33) varios_str -> STR COMMA . STR

    STR             shift and go to state 103


state 89

    (18) varios_pares_hash -> STR HASHAS . valor
    (20) varios_pares_hash -> STR HASHAS . valor COMMA varios_pares_hash
    (35) valor -> . numero
    (36) valor -> . STR
    (37) valor -> . ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    STR             shift and go to state 26
    ID              shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 104
    numero                         shift and go to state 25

state 90

    (8) array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .

    $end            reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    END_LOWER       reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    BREAK           reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    IF              reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    LOOP            reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    CASE            reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    DEF             reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    ID              reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    ELSE            reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    WHEN            reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    RETURN          reduce using rule 8 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)


state 91

    (9) array_str -> ID EQUALS LBRACKET varios_str RBRACKET .

    $end            reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    END_LOWER       reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    BREAK           reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    IF              reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    LOOP            reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    CASE            reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    DEF             reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    ID              reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    ELSE            reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    WHEN            reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    RETURN          reduce using rule 9 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)


state 92

    (22) statement -> LOOP DO statement BREAK IF comparacion .

    $end            reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    END_LOWER       reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    BREAK           reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    IF              reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    LOOP            reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    CASE            reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    DEF             reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    ID              reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    ELSE            reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    WHEN            reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)
    RETURN          reduce using rule 22 (statement -> LOOP DO statement BREAK IF comparacion .)


state 93

    (23) statement -> CASE valor when_clauses ELSE statement_list END_LOWER .

    $end            reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    END_LOWER       reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    BREAK           reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    IF              reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    LOOP            reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    CASE            reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    DEF             reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    ID              reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    ELSE            reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    WHEN            reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    RETURN          reduce using rule 23 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)


state 94

    (40) statement_list -> statement_list statement .

    END_LOWER       reduce using rule 40 (statement_list -> statement_list statement .)
    IF              reduce using rule 40 (statement_list -> statement_list statement .)
    LOOP            reduce using rule 40 (statement_list -> statement_list statement .)
    CASE            reduce using rule 40 (statement_list -> statement_list statement .)
    DEF             reduce using rule 40 (statement_list -> statement_list statement .)
    ID              reduce using rule 40 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 40 (statement_list -> statement_list statement .)
    WHEN            reduce using rule 40 (statement_list -> statement_list statement .)


state 95

    (24) statement -> CASE valor when_clauses ELSE PUTS valor . END_LOWER

    END_LOWER       shift and go to state 105


state 96

    (27) when_clause -> WHEN valor THEN statement_list .
    (40) statement_list -> statement_list . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (3) statement -> . set_str
    (4) statement -> . array_vacio
    (5) statement -> . array_numero
    (6) statement -> . array_str
    (13) statement -> . hash_vacio
    (14) statement -> . hash_elementos
    (21) statement -> . IF comparaciones statement END_LOWER
    (22) statement -> . LOOP DO statement BREAK IF comparacion
    (23) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (24) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (29) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (30) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . ID EQUALS valor
    (10) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (11) set_numero -> . ID EQUALS LCURLYBRACKET varios_numeros RCURLYBRACKET
    (12) set_str -> . ID EQUALS LCURLYBRACKET varios_str RCURLYBRACKET
    (7) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (8) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (9) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (15) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (16) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    ELSE            reduce using rule 27 (when_clause -> WHEN valor THEN statement_list .)
    WHEN            reduce using rule 27 (when_clause -> WHEN valor THEN statement_list .)
    IF              shift and go to state 10
    LOOP            shift and go to state 11
    CASE            shift and go to state 12
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement                      shift and go to state 94
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    set_str                        shift and go to state 4
    array_vacio                    shift and go to state 5
    array_numero                   shift and go to state 6
    array_str                      shift and go to state 7
    hash_vacio                     shift and go to state 8
    hash_elementos                 shift and go to state 9

state 97

    (28) when_clause -> WHEN valor PUTS valor .

    ELSE            reduce using rule 28 (when_clause -> WHEN valor PUTS valor .)
    WHEN            reduce using rule 28 (when_clause -> WHEN valor PUTS valor .)


state 98

    (39) argumentos -> ID COMMA argumentos .

    RPARENTHESIS    reduce using rule 39 (argumentos -> ID COMMA argumentos .)


state 99

    (29) statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .

    $end            reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    END_LOWER       reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    BREAK           reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    IF              reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    LOOP            reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    CASE            reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    DEF             reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    ID              reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    ELSE            reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    WHEN            reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    RETURN          reduce using rule 29 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)


state 100

    (30) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement . END_LOWER
    (31) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement . RETURN valor END_LOWER

    END_LOWER       shift and go to state 106
    RETURN          shift and go to state 107


state 101

    (17) varios_pares_hash -> ID COLON valor .
    (19) varios_pares_hash -> ID COLON valor . COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 17 (varios_pares_hash -> ID COLON valor .)
    COMMA           shift and go to state 108


state 102

    (60) varios_numeros -> numero COMMA varios_numeros .

    RCURLYBRACKET   reduce using rule 60 (varios_numeros -> numero COMMA varios_numeros .)
    RBRACKET        reduce using rule 60 (varios_numeros -> numero COMMA varios_numeros .)


state 103

    (33) varios_str -> STR COMMA STR .

    RCURLYBRACKET   reduce using rule 33 (varios_str -> STR COMMA STR .)
    RBRACKET        reduce using rule 33 (varios_str -> STR COMMA STR .)


state 104

    (18) varios_pares_hash -> STR HASHAS valor .
    (20) varios_pares_hash -> STR HASHAS valor . COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 18 (varios_pares_hash -> STR HASHAS valor .)
    COMMA           shift and go to state 109


state 105

    (24) statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .

    $end            reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    END_LOWER       reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    BREAK           reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    IF              reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    LOOP            reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    CASE            reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    DEF             reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    ID              reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    ELSE            reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    WHEN            reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    RETURN          reduce using rule 24 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)


state 106

    (30) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .

    $end            reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    END_LOWER       reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    BREAK           reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    IF              reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    LOOP            reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    CASE            reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    DEF             reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    ID              reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    ELSE            reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    WHEN            reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    RETURN          reduce using rule 30 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)


state 107

    (31) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN . valor END_LOWER
    (35) valor -> . numero
    (36) valor -> . STR
    (37) valor -> . ID
    (57) numero -> . INT
    (58) numero -> . FLOAT

    STR             shift and go to state 26
    ID              shift and go to state 27
    INT             shift and go to state 21
    FLOAT           shift and go to state 22

    valor                          shift and go to state 110
    numero                         shift and go to state 25

state 108

    (19) varios_pares_hash -> ID COLON valor COMMA . varios_pares_hash
    (17) varios_pares_hash -> . ID COLON valor
    (18) varios_pares_hash -> . STR HASHAS valor
    (19) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (20) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash

    ID              shift and go to state 63
    STR             shift and go to state 112

    varios_pares_hash              shift and go to state 111

state 109

    (20) varios_pares_hash -> STR HASHAS valor COMMA . varios_pares_hash
    (17) varios_pares_hash -> . ID COLON valor
    (18) varios_pares_hash -> . STR HASHAS valor
    (19) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (20) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash

    ID              shift and go to state 63
    STR             shift and go to state 112

    varios_pares_hash              shift and go to state 113

state 110

    (31) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor . END_LOWER

    END_LOWER       shift and go to state 114


state 111

    (19) varios_pares_hash -> ID COLON valor COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 19 (varios_pares_hash -> ID COLON valor COMMA varios_pares_hash .)


state 112

    (18) varios_pares_hash -> STR . HASHAS valor
    (20) varios_pares_hash -> STR . HASHAS valor COMMA varios_pares_hash

    HASHAS          shift and go to state 89


state 113

    (20) varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 20 (varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash .)


state 114

    (31) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .

    $end            reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    END_LOWER       reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    BREAK           reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    IF              reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    LOOP            reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    CASE            reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    DEF             reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    ID              reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    ELSE            reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    WHEN            reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    RETURN          reduce using rule 31 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 64 resolved using rule (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET)
WARNING: rejected rule (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET) in state 64
WARNING: Rule (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET) is never reduced
