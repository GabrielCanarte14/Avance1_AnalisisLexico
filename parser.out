Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    ARRAY
    AT
    BEGIN
    BITWISE_AND
    BITWISE_NOT
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CASE
    CLASS
    COLON
    COMPLEX
    CONSTANT
    DEF
    DEFINED
    DIVIDE
    DO
    DOT
    EACH
    ELSE
    ELSEIF
    END_UPPER
    ENSURE
    EXPONENT
    FALSE
    FILE
    FOR
    GLOBAL
    HASH
    HASHAS
    IN
    LCURLYBRACKET
    LINE
    LPARENTHESIS
    MINUS
    MODULE
    MODULO
    MULTIPLY
    NEXT
    NIL
    NOT
    OP_NOT
    OR
    PLUS
    PUTS
    RATIONAL
    RCURLYBRACKET
    REDO
    RESCUE
    RETRY
    RETURN
    RPARENTHESIS
    SELF
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SUPER
    SYMBOL
    THEN
    TRUE
    UNDEF
    UNLESS
    UNTIL
    WHEN
    WHILE
    YIELD

Grammar

Rule 0     S' -> array
Rule 1     array -> ID EQUALS LBRACKET RBRACKET
Rule 2     array -> ID EQUALS LBRACKET varios_numeros RBRACKET
Rule 3     array -> ID EQUALS LBRACKET varios_str RBRACKET
Rule 4     statement -> ID EQUALS valor
Rule 5     valor -> numero
Rule 6     valor -> STR
Rule 7     valor -> ID
Rule 8     statement -> IF comparaciones bloqueif END_LOWER
Rule 9     bloqueif -> INDENT statement DEDENT
Rule 10    statement_list -> statement_list statement
Rule 11    statement_list -> statement
Rule 12    comparador -> EQUAL
Rule 13    comparador -> NOT_EQUAL
Rule 14    comparador -> GREATER_THAN
Rule 15    comparador -> LESS_THAN
Rule 16    comparador -> GREATER_THAN_EQUAL
Rule 17    comparador -> LESS_THAN_EQUAL
Rule 18    comparacion_num -> numero comparador numero
Rule 19    comparacion_variables -> ID EQUAL ID
Rule 20    comparacion_variables -> ID NOT_EQUAL ID
Rule 21    comparacion -> comparacion_num
Rule 22    comparacion -> comparacion_variables
Rule 23    comparaciones -> comparacion
Rule 24    comparaciones -> comparacion conector comparacion
Rule 25    conector -> OP_AND
Rule 26    conector -> OP_OR
Rule 27    numero -> INT
Rule 28    numero -> FLOAT
Rule 29    varios_numeros -> numero
Rule 30    varios_numeros -> numero COMMA varios_numeros
Rule 31    varios_str -> STR
Rule 32    varios_str -> STR COMMA STR

Terminals, with rules where they appear

ALIAS                : 
AND                  : 
ARRAY                : 
AT                   : 
BEGIN                : 
BITWISE_AND          : 
BITWISE_NOT          : 
BITWISE_OR           : 
BITWISE_XOR          : 
BREAK                : 
CASE                 : 
CLASS                : 
COLON                : 
COMMA                : 30 32
COMPLEX              : 
CONSTANT             : 
DEDENT               : 9
DEF                  : 
DEFINED              : 
DIVIDE               : 
DO                   : 
DOT                  : 
EACH                 : 
ELSE                 : 
ELSEIF               : 
END_LOWER            : 8
END_UPPER            : 
ENSURE               : 
EQUAL                : 12 19
EQUALS               : 1 2 3 4
EXPONENT             : 
FALSE                : 
FILE                 : 
FLOAT                : 28
FOR                  : 
GLOBAL               : 
GREATER_THAN         : 14
GREATER_THAN_EQUAL   : 16
HASH                 : 
HASHAS               : 
ID                   : 1 2 3 4 7 19 19 20 20
IF                   : 8
IN                   : 
INDENT               : 9
INT                  : 27
LBRACKET             : 1 2 3
LCURLYBRACKET        : 
LESS_THAN            : 15
LESS_THAN_EQUAL      : 17
LINE                 : 
LPARENTHESIS         : 
MINUS                : 
MODULE               : 
MODULO               : 
MULTIPLY             : 
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 13 20
OP_AND               : 25
OP_NOT               : 
OP_OR                : 26
OR                   : 
PLUS                 : 
PUTS                 : 
RATIONAL             : 
RBRACKET             : 1 2 3
RCURLYBRACKET        : 
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPARENTHESIS         : 
SELF                 : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
STR                  : 6 31 32 32
SUPER                : 
SYMBOL               : 
THEN                 : 
TRUE                 : 
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 
WHILE                : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

array                : 0
bloqueif             : 8
comparacion          : 23 24 24
comparacion_num      : 21
comparacion_variables : 22
comparaciones        : 8
comparador           : 18
conector             : 24
numero               : 5 18 18 29 30
statement            : 9 10 11
statement_list       : 10
valor                : 4
varios_numeros       : 2 30
varios_str           : 3

Parsing method: LALR

state 0

    (0) S' -> . array
    (1) array -> . ID EQUALS LBRACKET RBRACKET
    (2) array -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (3) array -> . ID EQUALS LBRACKET varios_str RBRACKET

    ID              shift and go to state 2

    array                          shift and go to state 1

state 1

    (0) S' -> array .



state 2

    (1) array -> ID . EQUALS LBRACKET RBRACKET
    (2) array -> ID . EQUALS LBRACKET varios_numeros RBRACKET
    (3) array -> ID . EQUALS LBRACKET varios_str RBRACKET

    EQUALS          shift and go to state 3


state 3

    (1) array -> ID EQUALS . LBRACKET RBRACKET
    (2) array -> ID EQUALS . LBRACKET varios_numeros RBRACKET
    (3) array -> ID EQUALS . LBRACKET varios_str RBRACKET

    LBRACKET        shift and go to state 4


state 4

    (1) array -> ID EQUALS LBRACKET . RBRACKET
    (2) array -> ID EQUALS LBRACKET . varios_numeros RBRACKET
    (3) array -> ID EQUALS LBRACKET . varios_str RBRACKET
    (29) varios_numeros -> . numero
    (30) varios_numeros -> . numero COMMA varios_numeros
    (31) varios_str -> . STR
    (32) varios_str -> . STR COMMA STR
    (27) numero -> . INT
    (28) numero -> . FLOAT

    RBRACKET        shift and go to state 5
    STR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    varios_numeros                 shift and go to state 6
    varios_str                     shift and go to state 7
    numero                         shift and go to state 8

state 5

    (1) array -> ID EQUALS LBRACKET RBRACKET .

    $end            reduce using rule 1 (array -> ID EQUALS LBRACKET RBRACKET .)


state 6

    (2) array -> ID EQUALS LBRACKET varios_numeros . RBRACKET

    RBRACKET        shift and go to state 12


state 7

    (3) array -> ID EQUALS LBRACKET varios_str . RBRACKET

    RBRACKET        shift and go to state 13


state 8

    (29) varios_numeros -> numero .
    (30) varios_numeros -> numero . COMMA varios_numeros

    RBRACKET        reduce using rule 29 (varios_numeros -> numero .)
    COMMA           shift and go to state 14


state 9

    (31) varios_str -> STR .
    (32) varios_str -> STR . COMMA STR

    RBRACKET        reduce using rule 31 (varios_str -> STR .)
    COMMA           shift and go to state 15


state 10

    (27) numero -> INT .

    COMMA           reduce using rule 27 (numero -> INT .)
    RBRACKET        reduce using rule 27 (numero -> INT .)


state 11

    (28) numero -> FLOAT .

    COMMA           reduce using rule 28 (numero -> FLOAT .)
    RBRACKET        reduce using rule 28 (numero -> FLOAT .)


state 12

    (2) array -> ID EQUALS LBRACKET varios_numeros RBRACKET .

    $end            reduce using rule 2 (array -> ID EQUALS LBRACKET varios_numeros RBRACKET .)


state 13

    (3) array -> ID EQUALS LBRACKET varios_str RBRACKET .

    $end            reduce using rule 3 (array -> ID EQUALS LBRACKET varios_str RBRACKET .)


state 14

    (30) varios_numeros -> numero COMMA . varios_numeros
    (29) varios_numeros -> . numero
    (30) varios_numeros -> . numero COMMA varios_numeros
    (27) numero -> . INT
    (28) numero -> . FLOAT

    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    numero                         shift and go to state 8
    varios_numeros                 shift and go to state 16

state 15

    (32) varios_str -> STR COMMA . STR

    STR             shift and go to state 17


state 16

    (30) varios_numeros -> numero COMMA varios_numeros .

    RBRACKET        reduce using rule 30 (varios_numeros -> numero COMMA varios_numeros .)


state 17

    (32) varios_str -> STR COMMA STR .

    RBRACKET        reduce using rule 32 (varios_str -> STR COMMA STR .)

