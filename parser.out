Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    ARRAY
    AT
    BEGIN
    BITWISE_AND
    BITWISE_NOT
    BITWISE_OR
    BITWISE_XOR
    CLASS
    COMPLEX
    CONSTANT
    DEDENT
    DEFINED
    DOT
    EACH
    ELSEIF
    END_UPPER
    ENSURE
    FILE
    FOR
    GLOBAL
    HASH
    IN
    INDENT
    LINE
    MODULE
    NEXT
    NIL
    NOT
    OP_NOT
    OR
    RATIONAL
    REDO
    RESCUE
    RETRY
    SELF
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SUPER
    SYMBOL
    UNDEF
    UNLESS
    UNTIL
    WHILE
    YIELD

Grammar

Rule 0     S' -> statement
Rule 1     statement -> set_vacio
Rule 2     statement -> set_numero
Rule 3     set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 4     set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
Rule 5     varios_elementos -> STR
Rule 6     varios_elementos -> numero
Rule 7     varios_elementos -> STR COMMA varios_elementos
Rule 8     varios_elementos -> numero COMMA varios_elementos
Rule 9     statement -> array_vacio
Rule 10    statement -> array_numero
Rule 11    statement -> array_str
Rule 12    array_vacio -> ID EQUALS LBRACKET RBRACKET
Rule 13    array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET
Rule 14    array_str -> ID EQUALS LBRACKET varios_str RBRACKET
Rule 15    statement -> hash_vacio
Rule 16    statement -> hash_elementos
Rule 17    hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 18    hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
Rule 19    varios_pares_hash -> ID COLON valor
Rule 20    varios_pares_hash -> STR HASHAS valor
Rule 21    varios_pares_hash -> ID COLON valor COMMA varios_pares_hash
Rule 22    varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash
Rule 23    statement -> IF comparaciones statement END_LOWER
Rule 24    statement -> LOOP DO statement BREAK IF comparacion
Rule 25    statement -> CASE valor when_clauses ELSE statement_list END_LOWER
Rule 26    statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER
Rule 27    when_clauses -> when_clause
Rule 28    when_clauses -> when_clauses when_clause
Rule 29    when_clause -> WHEN valor THEN statement_list
Rule 30    when_clause -> WHEN valor PUTS valor
Rule 31    statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
Rule 32    statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
Rule 33    statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
Rule 34    statement -> PUTS valor
Rule 35    varios_str -> STR
Rule 36    varios_str -> STR COMMA STR
Rule 37    statement -> ID EQUALS valor
Rule 38    valor -> numero
Rule 39    valor -> STR
Rule 40    valor -> ID
Rule 41    argumentos -> ID
Rule 42    argumentos -> ID COMMA argumentos
Rule 43    statement_list -> statement_list statement
Rule 44    statement_list -> statement
Rule 45    comparador -> EQUAL
Rule 46    comparador -> NOT_EQUAL
Rule 47    comparador -> GREATER_THAN
Rule 48    comparador -> LESS_THAN
Rule 49    comparador -> GREATER_THAN_EQUAL
Rule 50    comparador -> LESS_THAN_EQUAL
Rule 51    comparacion_num -> numero comparador numero
Rule 52    comparacion_variables -> ID EQUAL ID
Rule 53    comparacion_variables -> ID NOT_EQUAL ID
Rule 54    comparacion_variables -> boolean
Rule 55    comparacion -> comparacion_num
Rule 56    comparacion -> comparacion_variables
Rule 57    comparaciones -> comparacion
Rule 58    comparaciones -> comparacion conector comparacion
Rule 59    conector -> OP_AND
Rule 60    conector -> OP_OR
Rule 61    numero -> INT
Rule 62    numero -> FLOAT
Rule 63    varios_numeros -> numero
Rule 64    varios_numeros -> numero COMMA varios_numeros
Rule 65    statement -> ID EQUALS expresion
Rule 66    operador_aritmetico -> PLUS
Rule 67    operador_aritmetico -> MINUS
Rule 68    operador_aritmetico -> MULTIPLY
Rule 69    operador_aritmetico -> DIVIDE
Rule 70    operador_aritmetico -> MODULO
Rule 71    operador_aritmetico -> EXPONENT
Rule 72    expresion -> numero operador_aritmetico numero
Rule 73    expresion -> ID operador_aritmetico numero
Rule 74    expresion -> ID operador_aritmetico ID
Rule 75    expresion -> numero operador_aritmetico ID
Rule 76    boolean -> TRUE
Rule 77    boolean -> FALSE

Terminals, with rules where they appear

ALIAS                : 
AND                  : 
ARRAY                : 
AT                   : 
BEGIN                : 
BITWISE_AND          : 
BITWISE_NOT          : 
BITWISE_OR           : 
BITWISE_XOR          : 
BREAK                : 24
CASE                 : 25 26
CLASS                : 
COLON                : 19 21
COMMA                : 7 8 21 22 36 42 64
COMPLEX              : 
CONSTANT             : 
DEDENT               : 
DEF                  : 31 32 33
DEFINED              : 
DIVIDE               : 69
DO                   : 24
DOT                  : 
EACH                 : 
ELSE                 : 25 26
ELSEIF               : 
END_LOWER            : 23 25 26 31 32 33
END_UPPER            : 
ENSURE               : 
EQUAL                : 45 52
EQUALS               : 3 4 12 13 14 17 18 37 65
EXPONENT             : 71
FALSE                : 77
FILE                 : 
FLOAT                : 62
FOR                  : 
GLOBAL               : 
GREATER_THAN         : 47
GREATER_THAN_EQUAL   : 49
HASH                 : 
HASHAS               : 20 22
ID                   : 3 4 12 13 14 17 18 19 21 31 32 33 37 40 41 42 52 52 53 53 65 73 74 74 75
IF                   : 23 24
IN                   : 
INDENT               : 
INT                  : 61
LBRACKET             : 12 13 14
LCURLYBRACKET        : 3 4 17 18
LESS_THAN            : 48
LESS_THAN_EQUAL      : 50
LINE                 : 
LOOP                 : 24
LPARENTHESIS         : 31 32 33
MINUS                : 67
MODULE               : 
MODULO               : 70
MULTIPLY             : 68
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 46 53
OP_AND               : 59
OP_NOT               : 
OP_OR                : 60
OR                   : 
PLUS                 : 66
PUTS                 : 26 30 34
RATIONAL             : 
RBRACKET             : 12 13 14
RCURLYBRACKET        : 3 4 17 18
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 33
RPARENTHESIS         : 31 32 33
SELF                 : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
STR                  : 5 7 20 22 35 36 36 39
SUPER                : 
SYMBOL               : 
THEN                 : 29
TRUE                 : 76
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 29 30
WHILE                : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

argumentos           : 32 33 42
array_numero         : 10
array_str            : 11
array_vacio          : 9
boolean              : 54
comparacion          : 24 57 58 58
comparacion_num      : 55
comparacion_variables : 56
comparaciones        : 23
comparador           : 51
conector             : 58
expresion            : 65
hash_elementos       : 16
hash_vacio           : 15
numero               : 6 8 38 51 51 63 64 72 72 73 75
operador_aritmetico  : 72 73 74 75
set_numero           : 2
set_vacio            : 1
statement            : 23 24 31 32 33 43 44 0
statement_list       : 25 29 43
valor                : 19 20 21 22 25 26 26 29 30 30 33 34 37
varios_elementos     : 4 7 8
varios_numeros       : 13 64
varios_pares_hash    : 18 21 22
varios_str           : 14
when_clause          : 27 28
when_clauses         : 25 26 28

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    PUTS            shift and go to state 12
    ID              shift and go to state 14

    statement                      shift and go to state 1
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 1

    (0) S' -> statement .



state 2

    (1) statement -> set_vacio .

    $end            reduce using rule 1 (statement -> set_vacio .)
    END_LOWER       reduce using rule 1 (statement -> set_vacio .)
    BREAK           reduce using rule 1 (statement -> set_vacio .)
    IF              reduce using rule 1 (statement -> set_vacio .)
    LOOP            reduce using rule 1 (statement -> set_vacio .)
    CASE            reduce using rule 1 (statement -> set_vacio .)
    DEF             reduce using rule 1 (statement -> set_vacio .)
    PUTS            reduce using rule 1 (statement -> set_vacio .)
    ID              reduce using rule 1 (statement -> set_vacio .)
    ELSE            reduce using rule 1 (statement -> set_vacio .)
    WHEN            reduce using rule 1 (statement -> set_vacio .)
    RETURN          reduce using rule 1 (statement -> set_vacio .)


state 3

    (2) statement -> set_numero .

    $end            reduce using rule 2 (statement -> set_numero .)
    END_LOWER       reduce using rule 2 (statement -> set_numero .)
    BREAK           reduce using rule 2 (statement -> set_numero .)
    IF              reduce using rule 2 (statement -> set_numero .)
    LOOP            reduce using rule 2 (statement -> set_numero .)
    CASE            reduce using rule 2 (statement -> set_numero .)
    DEF             reduce using rule 2 (statement -> set_numero .)
    PUTS            reduce using rule 2 (statement -> set_numero .)
    ID              reduce using rule 2 (statement -> set_numero .)
    ELSE            reduce using rule 2 (statement -> set_numero .)
    WHEN            reduce using rule 2 (statement -> set_numero .)
    RETURN          reduce using rule 2 (statement -> set_numero .)


state 4

    (9) statement -> array_vacio .

    $end            reduce using rule 9 (statement -> array_vacio .)
    END_LOWER       reduce using rule 9 (statement -> array_vacio .)
    BREAK           reduce using rule 9 (statement -> array_vacio .)
    IF              reduce using rule 9 (statement -> array_vacio .)
    LOOP            reduce using rule 9 (statement -> array_vacio .)
    CASE            reduce using rule 9 (statement -> array_vacio .)
    DEF             reduce using rule 9 (statement -> array_vacio .)
    PUTS            reduce using rule 9 (statement -> array_vacio .)
    ID              reduce using rule 9 (statement -> array_vacio .)
    ELSE            reduce using rule 9 (statement -> array_vacio .)
    WHEN            reduce using rule 9 (statement -> array_vacio .)
    RETURN          reduce using rule 9 (statement -> array_vacio .)


state 5

    (10) statement -> array_numero .

    $end            reduce using rule 10 (statement -> array_numero .)
    END_LOWER       reduce using rule 10 (statement -> array_numero .)
    BREAK           reduce using rule 10 (statement -> array_numero .)
    IF              reduce using rule 10 (statement -> array_numero .)
    LOOP            reduce using rule 10 (statement -> array_numero .)
    CASE            reduce using rule 10 (statement -> array_numero .)
    DEF             reduce using rule 10 (statement -> array_numero .)
    PUTS            reduce using rule 10 (statement -> array_numero .)
    ID              reduce using rule 10 (statement -> array_numero .)
    ELSE            reduce using rule 10 (statement -> array_numero .)
    WHEN            reduce using rule 10 (statement -> array_numero .)
    RETURN          reduce using rule 10 (statement -> array_numero .)


state 6

    (11) statement -> array_str .

    $end            reduce using rule 11 (statement -> array_str .)
    END_LOWER       reduce using rule 11 (statement -> array_str .)
    BREAK           reduce using rule 11 (statement -> array_str .)
    IF              reduce using rule 11 (statement -> array_str .)
    LOOP            reduce using rule 11 (statement -> array_str .)
    CASE            reduce using rule 11 (statement -> array_str .)
    DEF             reduce using rule 11 (statement -> array_str .)
    PUTS            reduce using rule 11 (statement -> array_str .)
    ID              reduce using rule 11 (statement -> array_str .)
    ELSE            reduce using rule 11 (statement -> array_str .)
    WHEN            reduce using rule 11 (statement -> array_str .)
    RETURN          reduce using rule 11 (statement -> array_str .)


state 7

    (15) statement -> hash_vacio .

    $end            reduce using rule 15 (statement -> hash_vacio .)
    END_LOWER       reduce using rule 15 (statement -> hash_vacio .)
    BREAK           reduce using rule 15 (statement -> hash_vacio .)
    IF              reduce using rule 15 (statement -> hash_vacio .)
    LOOP            reduce using rule 15 (statement -> hash_vacio .)
    CASE            reduce using rule 15 (statement -> hash_vacio .)
    DEF             reduce using rule 15 (statement -> hash_vacio .)
    PUTS            reduce using rule 15 (statement -> hash_vacio .)
    ID              reduce using rule 15 (statement -> hash_vacio .)
    ELSE            reduce using rule 15 (statement -> hash_vacio .)
    WHEN            reduce using rule 15 (statement -> hash_vacio .)
    RETURN          reduce using rule 15 (statement -> hash_vacio .)


state 8

    (16) statement -> hash_elementos .

    $end            reduce using rule 16 (statement -> hash_elementos .)
    END_LOWER       reduce using rule 16 (statement -> hash_elementos .)
    BREAK           reduce using rule 16 (statement -> hash_elementos .)
    IF              reduce using rule 16 (statement -> hash_elementos .)
    LOOP            reduce using rule 16 (statement -> hash_elementos .)
    CASE            reduce using rule 16 (statement -> hash_elementos .)
    DEF             reduce using rule 16 (statement -> hash_elementos .)
    PUTS            reduce using rule 16 (statement -> hash_elementos .)
    ID              reduce using rule 16 (statement -> hash_elementos .)
    ELSE            reduce using rule 16 (statement -> hash_elementos .)
    WHEN            reduce using rule 16 (statement -> hash_elementos .)
    RETURN          reduce using rule 16 (statement -> hash_elementos .)


state 9

    (23) statement -> IF . comparaciones statement END_LOWER
    (57) comparaciones -> . comparacion
    (58) comparaciones -> . comparacion conector comparacion
    (55) comparacion -> . comparacion_num
    (56) comparacion -> . comparacion_variables
    (51) comparacion_num -> . numero comparador numero
    (52) comparacion_variables -> . ID EQUAL ID
    (53) comparacion_variables -> . ID NOT_EQUAL ID
    (54) comparacion_variables -> . boolean
    (61) numero -> . INT
    (62) numero -> . FLOAT
    (76) boolean -> . TRUE
    (77) boolean -> . FALSE

    ID              shift and go to state 20
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    comparaciones                  shift and go to state 15
    comparacion                    shift and go to state 16
    comparacion_num                shift and go to state 17
    comparacion_variables          shift and go to state 18
    numero                         shift and go to state 19
    boolean                        shift and go to state 21

state 10

    (24) statement -> LOOP . DO statement BREAK IF comparacion

    DO              shift and go to state 26


state 11

    (25) statement -> CASE . valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> CASE . valor when_clauses ELSE PUTS valor END_LOWER
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 27
    numero                         shift and go to state 28

state 12

    (34) statement -> PUTS . valor
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 31
    numero                         shift and go to state 28

state 13

    (31) statement -> DEF . ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> DEF . ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> DEF . ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER

    ID              shift and go to state 32


state 14

    (37) statement -> ID . EQUALS valor
    (65) statement -> ID . EQUALS expresion
    (3) set_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> ID . EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> ID . EQUALS LBRACKET RBRACKET
    (13) array_numero -> ID . EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> ID . EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> ID . EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    EQUALS          shift and go to state 33


state 15

    (23) statement -> IF comparaciones . statement END_LOWER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    PUTS            shift and go to state 12
    ID              shift and go to state 14

    statement                      shift and go to state 34
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 16

    (57) comparaciones -> comparacion .
    (58) comparaciones -> comparacion . conector comparacion
    (59) conector -> . OP_AND
    (60) conector -> . OP_OR

    IF              reduce using rule 57 (comparaciones -> comparacion .)
    LOOP            reduce using rule 57 (comparaciones -> comparacion .)
    CASE            reduce using rule 57 (comparaciones -> comparacion .)
    DEF             reduce using rule 57 (comparaciones -> comparacion .)
    PUTS            reduce using rule 57 (comparaciones -> comparacion .)
    ID              reduce using rule 57 (comparaciones -> comparacion .)
    OP_AND          shift and go to state 36
    OP_OR           shift and go to state 37

    conector                       shift and go to state 35

state 17

    (55) comparacion -> comparacion_num .

    OP_AND          reduce using rule 55 (comparacion -> comparacion_num .)
    OP_OR           reduce using rule 55 (comparacion -> comparacion_num .)
    IF              reduce using rule 55 (comparacion -> comparacion_num .)
    LOOP            reduce using rule 55 (comparacion -> comparacion_num .)
    CASE            reduce using rule 55 (comparacion -> comparacion_num .)
    DEF             reduce using rule 55 (comparacion -> comparacion_num .)
    PUTS            reduce using rule 55 (comparacion -> comparacion_num .)
    ID              reduce using rule 55 (comparacion -> comparacion_num .)
    $end            reduce using rule 55 (comparacion -> comparacion_num .)
    END_LOWER       reduce using rule 55 (comparacion -> comparacion_num .)
    BREAK           reduce using rule 55 (comparacion -> comparacion_num .)
    ELSE            reduce using rule 55 (comparacion -> comparacion_num .)
    WHEN            reduce using rule 55 (comparacion -> comparacion_num .)
    RETURN          reduce using rule 55 (comparacion -> comparacion_num .)


state 18

    (56) comparacion -> comparacion_variables .

    OP_AND          reduce using rule 56 (comparacion -> comparacion_variables .)
    OP_OR           reduce using rule 56 (comparacion -> comparacion_variables .)
    IF              reduce using rule 56 (comparacion -> comparacion_variables .)
    LOOP            reduce using rule 56 (comparacion -> comparacion_variables .)
    CASE            reduce using rule 56 (comparacion -> comparacion_variables .)
    DEF             reduce using rule 56 (comparacion -> comparacion_variables .)
    PUTS            reduce using rule 56 (comparacion -> comparacion_variables .)
    ID              reduce using rule 56 (comparacion -> comparacion_variables .)
    $end            reduce using rule 56 (comparacion -> comparacion_variables .)
    END_LOWER       reduce using rule 56 (comparacion -> comparacion_variables .)
    BREAK           reduce using rule 56 (comparacion -> comparacion_variables .)
    ELSE            reduce using rule 56 (comparacion -> comparacion_variables .)
    WHEN            reduce using rule 56 (comparacion -> comparacion_variables .)
    RETURN          reduce using rule 56 (comparacion -> comparacion_variables .)


state 19

    (51) comparacion_num -> numero . comparador numero
    (45) comparador -> . EQUAL
    (46) comparador -> . NOT_EQUAL
    (47) comparador -> . GREATER_THAN
    (48) comparador -> . LESS_THAN
    (49) comparador -> . GREATER_THAN_EQUAL
    (50) comparador -> . LESS_THAN_EQUAL

    EQUAL           shift and go to state 39
    NOT_EQUAL       shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESS_THAN       shift and go to state 42
    GREATER_THAN_EQUAL shift and go to state 43
    LESS_THAN_EQUAL shift and go to state 44

    comparador                     shift and go to state 38

state 20

    (52) comparacion_variables -> ID . EQUAL ID
    (53) comparacion_variables -> ID . NOT_EQUAL ID

    EQUAL           shift and go to state 45
    NOT_EQUAL       shift and go to state 46


state 21

    (54) comparacion_variables -> boolean .

    OP_AND          reduce using rule 54 (comparacion_variables -> boolean .)
    OP_OR           reduce using rule 54 (comparacion_variables -> boolean .)
    IF              reduce using rule 54 (comparacion_variables -> boolean .)
    LOOP            reduce using rule 54 (comparacion_variables -> boolean .)
    CASE            reduce using rule 54 (comparacion_variables -> boolean .)
    DEF             reduce using rule 54 (comparacion_variables -> boolean .)
    PUTS            reduce using rule 54 (comparacion_variables -> boolean .)
    ID              reduce using rule 54 (comparacion_variables -> boolean .)
    $end            reduce using rule 54 (comparacion_variables -> boolean .)
    END_LOWER       reduce using rule 54 (comparacion_variables -> boolean .)
    BREAK           reduce using rule 54 (comparacion_variables -> boolean .)
    ELSE            reduce using rule 54 (comparacion_variables -> boolean .)
    WHEN            reduce using rule 54 (comparacion_variables -> boolean .)
    RETURN          reduce using rule 54 (comparacion_variables -> boolean .)


state 22

    (61) numero -> INT .

    EQUAL           reduce using rule 61 (numero -> INT .)
    NOT_EQUAL       reduce using rule 61 (numero -> INT .)
    GREATER_THAN    reduce using rule 61 (numero -> INT .)
    LESS_THAN       reduce using rule 61 (numero -> INT .)
    GREATER_THAN_EQUAL reduce using rule 61 (numero -> INT .)
    LESS_THAN_EQUAL reduce using rule 61 (numero -> INT .)
    WHEN            reduce using rule 61 (numero -> INT .)
    $end            reduce using rule 61 (numero -> INT .)
    END_LOWER       reduce using rule 61 (numero -> INT .)
    BREAK           reduce using rule 61 (numero -> INT .)
    IF              reduce using rule 61 (numero -> INT .)
    LOOP            reduce using rule 61 (numero -> INT .)
    CASE            reduce using rule 61 (numero -> INT .)
    DEF             reduce using rule 61 (numero -> INT .)
    PUTS            reduce using rule 61 (numero -> INT .)
    ID              reduce using rule 61 (numero -> INT .)
    ELSE            reduce using rule 61 (numero -> INT .)
    RETURN          reduce using rule 61 (numero -> INT .)
    PLUS            reduce using rule 61 (numero -> INT .)
    MINUS           reduce using rule 61 (numero -> INT .)
    MULTIPLY        reduce using rule 61 (numero -> INT .)
    DIVIDE          reduce using rule 61 (numero -> INT .)
    MODULO          reduce using rule 61 (numero -> INT .)
    EXPONENT        reduce using rule 61 (numero -> INT .)
    OP_AND          reduce using rule 61 (numero -> INT .)
    OP_OR           reduce using rule 61 (numero -> INT .)
    THEN            reduce using rule 61 (numero -> INT .)
    COMMA           reduce using rule 61 (numero -> INT .)
    RCURLYBRACKET   reduce using rule 61 (numero -> INT .)
    RBRACKET        reduce using rule 61 (numero -> INT .)


state 23

    (62) numero -> FLOAT .

    EQUAL           reduce using rule 62 (numero -> FLOAT .)
    NOT_EQUAL       reduce using rule 62 (numero -> FLOAT .)
    GREATER_THAN    reduce using rule 62 (numero -> FLOAT .)
    LESS_THAN       reduce using rule 62 (numero -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 62 (numero -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 62 (numero -> FLOAT .)
    WHEN            reduce using rule 62 (numero -> FLOAT .)
    $end            reduce using rule 62 (numero -> FLOAT .)
    END_LOWER       reduce using rule 62 (numero -> FLOAT .)
    BREAK           reduce using rule 62 (numero -> FLOAT .)
    IF              reduce using rule 62 (numero -> FLOAT .)
    LOOP            reduce using rule 62 (numero -> FLOAT .)
    CASE            reduce using rule 62 (numero -> FLOAT .)
    DEF             reduce using rule 62 (numero -> FLOAT .)
    PUTS            reduce using rule 62 (numero -> FLOAT .)
    ID              reduce using rule 62 (numero -> FLOAT .)
    ELSE            reduce using rule 62 (numero -> FLOAT .)
    RETURN          reduce using rule 62 (numero -> FLOAT .)
    PLUS            reduce using rule 62 (numero -> FLOAT .)
    MINUS           reduce using rule 62 (numero -> FLOAT .)
    MULTIPLY        reduce using rule 62 (numero -> FLOAT .)
    DIVIDE          reduce using rule 62 (numero -> FLOAT .)
    MODULO          reduce using rule 62 (numero -> FLOAT .)
    EXPONENT        reduce using rule 62 (numero -> FLOAT .)
    OP_AND          reduce using rule 62 (numero -> FLOAT .)
    OP_OR           reduce using rule 62 (numero -> FLOAT .)
    THEN            reduce using rule 62 (numero -> FLOAT .)
    COMMA           reduce using rule 62 (numero -> FLOAT .)
    RCURLYBRACKET   reduce using rule 62 (numero -> FLOAT .)
    RBRACKET        reduce using rule 62 (numero -> FLOAT .)


state 24

    (76) boolean -> TRUE .

    OP_AND          reduce using rule 76 (boolean -> TRUE .)
    OP_OR           reduce using rule 76 (boolean -> TRUE .)
    IF              reduce using rule 76 (boolean -> TRUE .)
    LOOP            reduce using rule 76 (boolean -> TRUE .)
    CASE            reduce using rule 76 (boolean -> TRUE .)
    DEF             reduce using rule 76 (boolean -> TRUE .)
    PUTS            reduce using rule 76 (boolean -> TRUE .)
    ID              reduce using rule 76 (boolean -> TRUE .)
    $end            reduce using rule 76 (boolean -> TRUE .)
    END_LOWER       reduce using rule 76 (boolean -> TRUE .)
    BREAK           reduce using rule 76 (boolean -> TRUE .)
    ELSE            reduce using rule 76 (boolean -> TRUE .)
    WHEN            reduce using rule 76 (boolean -> TRUE .)
    RETURN          reduce using rule 76 (boolean -> TRUE .)


state 25

    (77) boolean -> FALSE .

    OP_AND          reduce using rule 77 (boolean -> FALSE .)
    OP_OR           reduce using rule 77 (boolean -> FALSE .)
    IF              reduce using rule 77 (boolean -> FALSE .)
    LOOP            reduce using rule 77 (boolean -> FALSE .)
    CASE            reduce using rule 77 (boolean -> FALSE .)
    DEF             reduce using rule 77 (boolean -> FALSE .)
    PUTS            reduce using rule 77 (boolean -> FALSE .)
    ID              reduce using rule 77 (boolean -> FALSE .)
    $end            reduce using rule 77 (boolean -> FALSE .)
    END_LOWER       reduce using rule 77 (boolean -> FALSE .)
    BREAK           reduce using rule 77 (boolean -> FALSE .)
    ELSE            reduce using rule 77 (boolean -> FALSE .)
    WHEN            reduce using rule 77 (boolean -> FALSE .)
    RETURN          reduce using rule 77 (boolean -> FALSE .)


state 26

    (24) statement -> LOOP DO . statement BREAK IF comparacion
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    PUTS            shift and go to state 12
    ID              shift and go to state 14

    statement                      shift and go to state 47
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 27

    (25) statement -> CASE valor . when_clauses ELSE statement_list END_LOWER
    (26) statement -> CASE valor . when_clauses ELSE PUTS valor END_LOWER
    (27) when_clauses -> . when_clause
    (28) when_clauses -> . when_clauses when_clause
    (29) when_clause -> . WHEN valor THEN statement_list
    (30) when_clause -> . WHEN valor PUTS valor

    WHEN            shift and go to state 50

    when_clauses                   shift and go to state 48
    when_clause                    shift and go to state 49

state 28

    (38) valor -> numero .

    WHEN            reduce using rule 38 (valor -> numero .)
    $end            reduce using rule 38 (valor -> numero .)
    END_LOWER       reduce using rule 38 (valor -> numero .)
    BREAK           reduce using rule 38 (valor -> numero .)
    IF              reduce using rule 38 (valor -> numero .)
    LOOP            reduce using rule 38 (valor -> numero .)
    CASE            reduce using rule 38 (valor -> numero .)
    DEF             reduce using rule 38 (valor -> numero .)
    PUTS            reduce using rule 38 (valor -> numero .)
    ID              reduce using rule 38 (valor -> numero .)
    ELSE            reduce using rule 38 (valor -> numero .)
    RETURN          reduce using rule 38 (valor -> numero .)
    THEN            reduce using rule 38 (valor -> numero .)
    COMMA           reduce using rule 38 (valor -> numero .)
    RCURLYBRACKET   reduce using rule 38 (valor -> numero .)


state 29

    (39) valor -> STR .

    WHEN            reduce using rule 39 (valor -> STR .)
    $end            reduce using rule 39 (valor -> STR .)
    END_LOWER       reduce using rule 39 (valor -> STR .)
    BREAK           reduce using rule 39 (valor -> STR .)
    IF              reduce using rule 39 (valor -> STR .)
    LOOP            reduce using rule 39 (valor -> STR .)
    CASE            reduce using rule 39 (valor -> STR .)
    DEF             reduce using rule 39 (valor -> STR .)
    PUTS            reduce using rule 39 (valor -> STR .)
    ID              reduce using rule 39 (valor -> STR .)
    ELSE            reduce using rule 39 (valor -> STR .)
    RETURN          reduce using rule 39 (valor -> STR .)
    THEN            reduce using rule 39 (valor -> STR .)
    COMMA           reduce using rule 39 (valor -> STR .)
    RCURLYBRACKET   reduce using rule 39 (valor -> STR .)


state 30

    (40) valor -> ID .

    WHEN            reduce using rule 40 (valor -> ID .)
    $end            reduce using rule 40 (valor -> ID .)
    END_LOWER       reduce using rule 40 (valor -> ID .)
    BREAK           reduce using rule 40 (valor -> ID .)
    IF              reduce using rule 40 (valor -> ID .)
    LOOP            reduce using rule 40 (valor -> ID .)
    CASE            reduce using rule 40 (valor -> ID .)
    DEF             reduce using rule 40 (valor -> ID .)
    PUTS            reduce using rule 40 (valor -> ID .)
    ID              reduce using rule 40 (valor -> ID .)
    ELSE            reduce using rule 40 (valor -> ID .)
    RETURN          reduce using rule 40 (valor -> ID .)
    THEN            reduce using rule 40 (valor -> ID .)
    COMMA           reduce using rule 40 (valor -> ID .)
    RCURLYBRACKET   reduce using rule 40 (valor -> ID .)


state 31

    (34) statement -> PUTS valor .

    $end            reduce using rule 34 (statement -> PUTS valor .)
    END_LOWER       reduce using rule 34 (statement -> PUTS valor .)
    BREAK           reduce using rule 34 (statement -> PUTS valor .)
    IF              reduce using rule 34 (statement -> PUTS valor .)
    LOOP            reduce using rule 34 (statement -> PUTS valor .)
    CASE            reduce using rule 34 (statement -> PUTS valor .)
    DEF             reduce using rule 34 (statement -> PUTS valor .)
    PUTS            reduce using rule 34 (statement -> PUTS valor .)
    ID              reduce using rule 34 (statement -> PUTS valor .)
    ELSE            reduce using rule 34 (statement -> PUTS valor .)
    WHEN            reduce using rule 34 (statement -> PUTS valor .)
    RETURN          reduce using rule 34 (statement -> PUTS valor .)


state 32

    (31) statement -> DEF ID . LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> DEF ID . LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> DEF ID . LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER

    LPARENTHESIS    shift and go to state 51


state 33

    (37) statement -> ID EQUALS . valor
    (65) statement -> ID EQUALS . expresion
    (3) set_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> ID EQUALS . LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> ID EQUALS . LBRACKET RBRACKET
    (13) array_numero -> ID EQUALS . LBRACKET varios_numeros RBRACKET
    (14) array_str -> ID EQUALS . LBRACKET varios_str RBRACKET
    (17) hash_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> ID EQUALS . LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (72) expresion -> . numero operador_aritmetico numero
    (73) expresion -> . ID operador_aritmetico numero
    (74) expresion -> . ID operador_aritmetico ID
    (75) expresion -> . numero operador_aritmetico ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    LCURLYBRACKET   shift and go to state 55
    LBRACKET        shift and go to state 56
    STR             shift and go to state 29
    ID              shift and go to state 52
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 53
    expresion                      shift and go to state 54
    numero                         shift and go to state 57

state 34

    (23) statement -> IF comparaciones statement . END_LOWER

    END_LOWER       shift and go to state 58


state 35

    (58) comparaciones -> comparacion conector . comparacion
    (55) comparacion -> . comparacion_num
    (56) comparacion -> . comparacion_variables
    (51) comparacion_num -> . numero comparador numero
    (52) comparacion_variables -> . ID EQUAL ID
    (53) comparacion_variables -> . ID NOT_EQUAL ID
    (54) comparacion_variables -> . boolean
    (61) numero -> . INT
    (62) numero -> . FLOAT
    (76) boolean -> . TRUE
    (77) boolean -> . FALSE

    ID              shift and go to state 20
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    comparacion                    shift and go to state 59
    comparacion_num                shift and go to state 17
    comparacion_variables          shift and go to state 18
    numero                         shift and go to state 19
    boolean                        shift and go to state 21

state 36

    (59) conector -> OP_AND .

    ID              reduce using rule 59 (conector -> OP_AND .)
    INT             reduce using rule 59 (conector -> OP_AND .)
    FLOAT           reduce using rule 59 (conector -> OP_AND .)
    TRUE            reduce using rule 59 (conector -> OP_AND .)
    FALSE           reduce using rule 59 (conector -> OP_AND .)


state 37

    (60) conector -> OP_OR .

    ID              reduce using rule 60 (conector -> OP_OR .)
    INT             reduce using rule 60 (conector -> OP_OR .)
    FLOAT           reduce using rule 60 (conector -> OP_OR .)
    TRUE            reduce using rule 60 (conector -> OP_OR .)
    FALSE           reduce using rule 60 (conector -> OP_OR .)


state 38

    (51) comparacion_num -> numero comparador . numero
    (61) numero -> . INT
    (62) numero -> . FLOAT

    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    numero                         shift and go to state 60

state 39

    (45) comparador -> EQUAL .

    INT             reduce using rule 45 (comparador -> EQUAL .)
    FLOAT           reduce using rule 45 (comparador -> EQUAL .)


state 40

    (46) comparador -> NOT_EQUAL .

    INT             reduce using rule 46 (comparador -> NOT_EQUAL .)
    FLOAT           reduce using rule 46 (comparador -> NOT_EQUAL .)


state 41

    (47) comparador -> GREATER_THAN .

    INT             reduce using rule 47 (comparador -> GREATER_THAN .)
    FLOAT           reduce using rule 47 (comparador -> GREATER_THAN .)


state 42

    (48) comparador -> LESS_THAN .

    INT             reduce using rule 48 (comparador -> LESS_THAN .)
    FLOAT           reduce using rule 48 (comparador -> LESS_THAN .)


state 43

    (49) comparador -> GREATER_THAN_EQUAL .

    INT             reduce using rule 49 (comparador -> GREATER_THAN_EQUAL .)
    FLOAT           reduce using rule 49 (comparador -> GREATER_THAN_EQUAL .)


state 44

    (50) comparador -> LESS_THAN_EQUAL .

    INT             reduce using rule 50 (comparador -> LESS_THAN_EQUAL .)
    FLOAT           reduce using rule 50 (comparador -> LESS_THAN_EQUAL .)


state 45

    (52) comparacion_variables -> ID EQUAL . ID

    ID              shift and go to state 61


state 46

    (53) comparacion_variables -> ID NOT_EQUAL . ID

    ID              shift and go to state 62


state 47

    (24) statement -> LOOP DO statement . BREAK IF comparacion

    BREAK           shift and go to state 63


state 48

    (25) statement -> CASE valor when_clauses . ELSE statement_list END_LOWER
    (26) statement -> CASE valor when_clauses . ELSE PUTS valor END_LOWER
    (28) when_clauses -> when_clauses . when_clause
    (29) when_clause -> . WHEN valor THEN statement_list
    (30) when_clause -> . WHEN valor PUTS valor

    ELSE            shift and go to state 64
    WHEN            shift and go to state 50

    when_clause                    shift and go to state 65

state 49

    (27) when_clauses -> when_clause .

    ELSE            reduce using rule 27 (when_clauses -> when_clause .)
    WHEN            reduce using rule 27 (when_clauses -> when_clause .)


state 50

    (29) when_clause -> WHEN . valor THEN statement_list
    (30) when_clause -> WHEN . valor PUTS valor
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 66
    numero                         shift and go to state 28

state 51

    (31) statement -> DEF ID LPARENTHESIS . RPARENTHESIS statement END_LOWER
    (32) statement -> DEF ID LPARENTHESIS . argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> DEF ID LPARENTHESIS . argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (41) argumentos -> . ID
    (42) argumentos -> . ID COMMA argumentos

    RPARENTHESIS    shift and go to state 68
    ID              shift and go to state 67

    argumentos                     shift and go to state 69

state 52

    (40) valor -> ID .
    (73) expresion -> ID . operador_aritmetico numero
    (74) expresion -> ID . operador_aritmetico ID
    (66) operador_aritmetico -> . PLUS
    (67) operador_aritmetico -> . MINUS
    (68) operador_aritmetico -> . MULTIPLY
    (69) operador_aritmetico -> . DIVIDE
    (70) operador_aritmetico -> . MODULO
    (71) operador_aritmetico -> . EXPONENT

    $end            reduce using rule 40 (valor -> ID .)
    END_LOWER       reduce using rule 40 (valor -> ID .)
    BREAK           reduce using rule 40 (valor -> ID .)
    IF              reduce using rule 40 (valor -> ID .)
    LOOP            reduce using rule 40 (valor -> ID .)
    CASE            reduce using rule 40 (valor -> ID .)
    DEF             reduce using rule 40 (valor -> ID .)
    PUTS            reduce using rule 40 (valor -> ID .)
    ID              reduce using rule 40 (valor -> ID .)
    ELSE            reduce using rule 40 (valor -> ID .)
    WHEN            reduce using rule 40 (valor -> ID .)
    RETURN          reduce using rule 40 (valor -> ID .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    MULTIPLY        shift and go to state 73
    DIVIDE          shift and go to state 74
    MODULO          shift and go to state 75
    EXPONENT        shift and go to state 76

    operador_aritmetico            shift and go to state 70

state 53

    (37) statement -> ID EQUALS valor .

    $end            reduce using rule 37 (statement -> ID EQUALS valor .)
    END_LOWER       reduce using rule 37 (statement -> ID EQUALS valor .)
    BREAK           reduce using rule 37 (statement -> ID EQUALS valor .)
    IF              reduce using rule 37 (statement -> ID EQUALS valor .)
    LOOP            reduce using rule 37 (statement -> ID EQUALS valor .)
    CASE            reduce using rule 37 (statement -> ID EQUALS valor .)
    DEF             reduce using rule 37 (statement -> ID EQUALS valor .)
    PUTS            reduce using rule 37 (statement -> ID EQUALS valor .)
    ID              reduce using rule 37 (statement -> ID EQUALS valor .)
    ELSE            reduce using rule 37 (statement -> ID EQUALS valor .)
    WHEN            reduce using rule 37 (statement -> ID EQUALS valor .)
    RETURN          reduce using rule 37 (statement -> ID EQUALS valor .)


state 54

    (65) statement -> ID EQUALS expresion .

    $end            reduce using rule 65 (statement -> ID EQUALS expresion .)
    END_LOWER       reduce using rule 65 (statement -> ID EQUALS expresion .)
    BREAK           reduce using rule 65 (statement -> ID EQUALS expresion .)
    IF              reduce using rule 65 (statement -> ID EQUALS expresion .)
    LOOP            reduce using rule 65 (statement -> ID EQUALS expresion .)
    CASE            reduce using rule 65 (statement -> ID EQUALS expresion .)
    DEF             reduce using rule 65 (statement -> ID EQUALS expresion .)
    PUTS            reduce using rule 65 (statement -> ID EQUALS expresion .)
    ID              reduce using rule 65 (statement -> ID EQUALS expresion .)
    ELSE            reduce using rule 65 (statement -> ID EQUALS expresion .)
    WHEN            reduce using rule 65 (statement -> ID EQUALS expresion .)
    RETURN          reduce using rule 65 (statement -> ID EQUALS expresion .)


state 55

    (3) set_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (4) set_numero -> ID EQUALS LCURLYBRACKET . varios_elementos RCURLYBRACKET
    (17) hash_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (18) hash_elementos -> ID EQUALS LCURLYBRACKET . varios_pares_hash RCURLYBRACKET
    (5) varios_elementos -> . STR
    (6) varios_elementos -> . numero
    (7) varios_elementos -> . STR COMMA varios_elementos
    (8) varios_elementos -> . numero COMMA varios_elementos
    (19) varios_pares_hash -> . ID COLON valor
    (20) varios_pares_hash -> . STR HASHAS valor
    (21) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (22) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash
    (61) numero -> . INT
    (62) numero -> . FLOAT

    RCURLYBRACKET   shift and go to state 78
    STR             shift and go to state 81
    ID              shift and go to state 77
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    varios_elementos               shift and go to state 79
    varios_pares_hash              shift and go to state 80
    numero                         shift and go to state 82

state 56

    (12) array_vacio -> ID EQUALS LBRACKET . RBRACKET
    (13) array_numero -> ID EQUALS LBRACKET . varios_numeros RBRACKET
    (14) array_str -> ID EQUALS LBRACKET . varios_str RBRACKET
    (63) varios_numeros -> . numero
    (64) varios_numeros -> . numero COMMA varios_numeros
    (35) varios_str -> . STR
    (36) varios_str -> . STR COMMA STR
    (61) numero -> . INT
    (62) numero -> . FLOAT

    RBRACKET        shift and go to state 83
    STR             shift and go to state 87
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    varios_numeros                 shift and go to state 84
    varios_str                     shift and go to state 85
    numero                         shift and go to state 86

state 57

    (38) valor -> numero .
    (72) expresion -> numero . operador_aritmetico numero
    (75) expresion -> numero . operador_aritmetico ID
    (66) operador_aritmetico -> . PLUS
    (67) operador_aritmetico -> . MINUS
    (68) operador_aritmetico -> . MULTIPLY
    (69) operador_aritmetico -> . DIVIDE
    (70) operador_aritmetico -> . MODULO
    (71) operador_aritmetico -> . EXPONENT

    $end            reduce using rule 38 (valor -> numero .)
    END_LOWER       reduce using rule 38 (valor -> numero .)
    BREAK           reduce using rule 38 (valor -> numero .)
    IF              reduce using rule 38 (valor -> numero .)
    LOOP            reduce using rule 38 (valor -> numero .)
    CASE            reduce using rule 38 (valor -> numero .)
    DEF             reduce using rule 38 (valor -> numero .)
    PUTS            reduce using rule 38 (valor -> numero .)
    ID              reduce using rule 38 (valor -> numero .)
    ELSE            reduce using rule 38 (valor -> numero .)
    WHEN            reduce using rule 38 (valor -> numero .)
    RETURN          reduce using rule 38 (valor -> numero .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    MULTIPLY        shift and go to state 73
    DIVIDE          shift and go to state 74
    MODULO          shift and go to state 75
    EXPONENT        shift and go to state 76

    operador_aritmetico            shift and go to state 88

state 58

    (23) statement -> IF comparaciones statement END_LOWER .

    $end            reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    END_LOWER       reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    BREAK           reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    IF              reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    LOOP            reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    CASE            reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    DEF             reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    PUTS            reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    ID              reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    ELSE            reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    WHEN            reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)
    RETURN          reduce using rule 23 (statement -> IF comparaciones statement END_LOWER .)


state 59

    (58) comparaciones -> comparacion conector comparacion .

    IF              reduce using rule 58 (comparaciones -> comparacion conector comparacion .)
    LOOP            reduce using rule 58 (comparaciones -> comparacion conector comparacion .)
    CASE            reduce using rule 58 (comparaciones -> comparacion conector comparacion .)
    DEF             reduce using rule 58 (comparaciones -> comparacion conector comparacion .)
    PUTS            reduce using rule 58 (comparaciones -> comparacion conector comparacion .)
    ID              reduce using rule 58 (comparaciones -> comparacion conector comparacion .)


state 60

    (51) comparacion_num -> numero comparador numero .

    OP_AND          reduce using rule 51 (comparacion_num -> numero comparador numero .)
    OP_OR           reduce using rule 51 (comparacion_num -> numero comparador numero .)
    IF              reduce using rule 51 (comparacion_num -> numero comparador numero .)
    LOOP            reduce using rule 51 (comparacion_num -> numero comparador numero .)
    CASE            reduce using rule 51 (comparacion_num -> numero comparador numero .)
    DEF             reduce using rule 51 (comparacion_num -> numero comparador numero .)
    PUTS            reduce using rule 51 (comparacion_num -> numero comparador numero .)
    ID              reduce using rule 51 (comparacion_num -> numero comparador numero .)
    $end            reduce using rule 51 (comparacion_num -> numero comparador numero .)
    END_LOWER       reduce using rule 51 (comparacion_num -> numero comparador numero .)
    BREAK           reduce using rule 51 (comparacion_num -> numero comparador numero .)
    ELSE            reduce using rule 51 (comparacion_num -> numero comparador numero .)
    WHEN            reduce using rule 51 (comparacion_num -> numero comparador numero .)
    RETURN          reduce using rule 51 (comparacion_num -> numero comparador numero .)


state 61

    (52) comparacion_variables -> ID EQUAL ID .

    OP_AND          reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    OP_OR           reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    IF              reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    LOOP            reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    CASE            reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    DEF             reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    PUTS            reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    ID              reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    $end            reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    END_LOWER       reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    BREAK           reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    ELSE            reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    WHEN            reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)
    RETURN          reduce using rule 52 (comparacion_variables -> ID EQUAL ID .)


state 62

    (53) comparacion_variables -> ID NOT_EQUAL ID .

    OP_AND          reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    OP_OR           reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    IF              reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    LOOP            reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    CASE            reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    DEF             reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    PUTS            reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    ID              reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    $end            reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    END_LOWER       reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    BREAK           reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    ELSE            reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    WHEN            reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)
    RETURN          reduce using rule 53 (comparacion_variables -> ID NOT_EQUAL ID .)


state 63

    (24) statement -> LOOP DO statement BREAK . IF comparacion

    IF              shift and go to state 89


state 64

    (25) statement -> CASE valor when_clauses ELSE . statement_list END_LOWER
    (26) statement -> CASE valor when_clauses ELSE . PUTS valor END_LOWER
    (43) statement_list -> . statement_list statement
    (44) statement_list -> . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    PUTS            shift and go to state 91
    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    ID              shift and go to state 14

    statement_list                 shift and go to state 90
    statement                      shift and go to state 92
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 65

    (28) when_clauses -> when_clauses when_clause .

    ELSE            reduce using rule 28 (when_clauses -> when_clauses when_clause .)
    WHEN            reduce using rule 28 (when_clauses -> when_clauses when_clause .)


state 66

    (29) when_clause -> WHEN valor . THEN statement_list
    (30) when_clause -> WHEN valor . PUTS valor

    THEN            shift and go to state 93
    PUTS            shift and go to state 94


state 67

    (41) argumentos -> ID .
    (42) argumentos -> ID . COMMA argumentos

    RPARENTHESIS    reduce using rule 41 (argumentos -> ID .)
    COMMA           shift and go to state 95


state 68

    (31) statement -> DEF ID LPARENTHESIS RPARENTHESIS . statement END_LOWER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    PUTS            shift and go to state 12
    ID              shift and go to state 14

    statement                      shift and go to state 96
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 69

    (32) statement -> DEF ID LPARENTHESIS argumentos . RPARENTHESIS statement END_LOWER
    (33) statement -> DEF ID LPARENTHESIS argumentos . RPARENTHESIS statement RETURN valor END_LOWER

    RPARENTHESIS    shift and go to state 97


state 70

    (73) expresion -> ID operador_aritmetico . numero
    (74) expresion -> ID operador_aritmetico . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    ID              shift and go to state 98
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    numero                         shift and go to state 99

state 71

    (66) operador_aritmetico -> PLUS .

    ID              reduce using rule 66 (operador_aritmetico -> PLUS .)
    INT             reduce using rule 66 (operador_aritmetico -> PLUS .)
    FLOAT           reduce using rule 66 (operador_aritmetico -> PLUS .)


state 72

    (67) operador_aritmetico -> MINUS .

    ID              reduce using rule 67 (operador_aritmetico -> MINUS .)
    INT             reduce using rule 67 (operador_aritmetico -> MINUS .)
    FLOAT           reduce using rule 67 (operador_aritmetico -> MINUS .)


state 73

    (68) operador_aritmetico -> MULTIPLY .

    ID              reduce using rule 68 (operador_aritmetico -> MULTIPLY .)
    INT             reduce using rule 68 (operador_aritmetico -> MULTIPLY .)
    FLOAT           reduce using rule 68 (operador_aritmetico -> MULTIPLY .)


state 74

    (69) operador_aritmetico -> DIVIDE .

    ID              reduce using rule 69 (operador_aritmetico -> DIVIDE .)
    INT             reduce using rule 69 (operador_aritmetico -> DIVIDE .)
    FLOAT           reduce using rule 69 (operador_aritmetico -> DIVIDE .)


state 75

    (70) operador_aritmetico -> MODULO .

    ID              reduce using rule 70 (operador_aritmetico -> MODULO .)
    INT             reduce using rule 70 (operador_aritmetico -> MODULO .)
    FLOAT           reduce using rule 70 (operador_aritmetico -> MODULO .)


state 76

    (71) operador_aritmetico -> EXPONENT .

    ID              reduce using rule 71 (operador_aritmetico -> EXPONENT .)
    INT             reduce using rule 71 (operador_aritmetico -> EXPONENT .)
    FLOAT           reduce using rule 71 (operador_aritmetico -> EXPONENT .)


state 77

    (19) varios_pares_hash -> ID . COLON valor
    (21) varios_pares_hash -> ID . COLON valor COMMA varios_pares_hash

    COLON           shift and go to state 100


state 78

    (3) set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .
    (17) hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .

  ! reduce/reduce conflict for $end resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for BREAK resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for LOOP resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for DEF resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for PUTS resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for ELSE resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for WHEN resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    $end            reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    END_LOWER       reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    BREAK           reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    IF              reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    LOOP            reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    CASE            reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    DEF             reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    PUTS            reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    ID              reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    ELSE            reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    WHEN            reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)
    RETURN          reduce using rule 3 (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)

  ! $end            [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! END_LOWER       [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! BREAK           [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! IF              [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! LOOP            [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! CASE            [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! DEF             [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! PUTS            [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! ID              [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! ELSE            [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! WHEN            [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]
  ! RETURN          [ reduce using rule 17 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .) ]


state 79

    (4) set_numero -> ID EQUALS LCURLYBRACKET varios_elementos . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 101


state 80

    (18) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 102


state 81

    (5) varios_elementos -> STR .
    (7) varios_elementos -> STR . COMMA varios_elementos
    (20) varios_pares_hash -> STR . HASHAS valor
    (22) varios_pares_hash -> STR . HASHAS valor COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 5 (varios_elementos -> STR .)
    COMMA           shift and go to state 103
    HASHAS          shift and go to state 104


state 82

    (6) varios_elementos -> numero .
    (8) varios_elementos -> numero . COMMA varios_elementos

    RCURLYBRACKET   reduce using rule 6 (varios_elementos -> numero .)
    COMMA           shift and go to state 105


state 83

    (12) array_vacio -> ID EQUALS LBRACKET RBRACKET .

    $end            reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    END_LOWER       reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    BREAK           reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    IF              reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    LOOP            reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    CASE            reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    DEF             reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    PUTS            reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    ID              reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    ELSE            reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    WHEN            reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)
    RETURN          reduce using rule 12 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)


state 84

    (13) array_numero -> ID EQUALS LBRACKET varios_numeros . RBRACKET

    RBRACKET        shift and go to state 106


state 85

    (14) array_str -> ID EQUALS LBRACKET varios_str . RBRACKET

    RBRACKET        shift and go to state 107


state 86

    (63) varios_numeros -> numero .
    (64) varios_numeros -> numero . COMMA varios_numeros

    RBRACKET        reduce using rule 63 (varios_numeros -> numero .)
    COMMA           shift and go to state 108


state 87

    (35) varios_str -> STR .
    (36) varios_str -> STR . COMMA STR

    RBRACKET        reduce using rule 35 (varios_str -> STR .)
    COMMA           shift and go to state 109


state 88

    (72) expresion -> numero operador_aritmetico . numero
    (75) expresion -> numero operador_aritmetico . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    ID              shift and go to state 111
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    numero                         shift and go to state 110

state 89

    (24) statement -> LOOP DO statement BREAK IF . comparacion
    (55) comparacion -> . comparacion_num
    (56) comparacion -> . comparacion_variables
    (51) comparacion_num -> . numero comparador numero
    (52) comparacion_variables -> . ID EQUAL ID
    (53) comparacion_variables -> . ID NOT_EQUAL ID
    (54) comparacion_variables -> . boolean
    (61) numero -> . INT
    (62) numero -> . FLOAT
    (76) boolean -> . TRUE
    (77) boolean -> . FALSE

    ID              shift and go to state 20
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    comparacion                    shift and go to state 112
    comparacion_num                shift and go to state 17
    comparacion_variables          shift and go to state 18
    numero                         shift and go to state 19
    boolean                        shift and go to state 21

state 90

    (25) statement -> CASE valor when_clauses ELSE statement_list . END_LOWER
    (43) statement_list -> statement_list . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    END_LOWER       shift and go to state 113
    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    PUTS            shift and go to state 12
    ID              shift and go to state 14

    statement                      shift and go to state 114
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 91

    (26) statement -> CASE valor when_clauses ELSE PUTS . valor END_LOWER
    (34) statement -> PUTS . valor
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 115
    numero                         shift and go to state 28

state 92

    (44) statement_list -> statement .

    END_LOWER       reduce using rule 44 (statement_list -> statement .)
    IF              reduce using rule 44 (statement_list -> statement .)
    LOOP            reduce using rule 44 (statement_list -> statement .)
    CASE            reduce using rule 44 (statement_list -> statement .)
    DEF             reduce using rule 44 (statement_list -> statement .)
    PUTS            reduce using rule 44 (statement_list -> statement .)
    ID              reduce using rule 44 (statement_list -> statement .)
    ELSE            reduce using rule 44 (statement_list -> statement .)
    WHEN            reduce using rule 44 (statement_list -> statement .)


state 93

    (29) when_clause -> WHEN valor THEN . statement_list
    (43) statement_list -> . statement_list statement
    (44) statement_list -> . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    PUTS            shift and go to state 12
    ID              shift and go to state 14

    statement_list                 shift and go to state 116
    statement                      shift and go to state 92
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 94

    (30) when_clause -> WHEN valor PUTS . valor
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 117
    numero                         shift and go to state 28

state 95

    (42) argumentos -> ID COMMA . argumentos
    (41) argumentos -> . ID
    (42) argumentos -> . ID COMMA argumentos

    ID              shift and go to state 67

    argumentos                     shift and go to state 118

state 96

    (31) statement -> DEF ID LPARENTHESIS RPARENTHESIS statement . END_LOWER

    END_LOWER       shift and go to state 119


state 97

    (32) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS . statement END_LOWER
    (33) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS . statement RETURN valor END_LOWER
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    PUTS            shift and go to state 12
    ID              shift and go to state 14

    statement                      shift and go to state 120
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 98

    (74) expresion -> ID operador_aritmetico ID .

    $end            reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    END_LOWER       reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    BREAK           reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    IF              reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    LOOP            reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    CASE            reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    DEF             reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    PUTS            reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    ID              reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    ELSE            reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    WHEN            reduce using rule 74 (expresion -> ID operador_aritmetico ID .)
    RETURN          reduce using rule 74 (expresion -> ID operador_aritmetico ID .)


state 99

    (73) expresion -> ID operador_aritmetico numero .

    $end            reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    END_LOWER       reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    BREAK           reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    IF              reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    LOOP            reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    CASE            reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    DEF             reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    PUTS            reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    ID              reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    ELSE            reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    WHEN            reduce using rule 73 (expresion -> ID operador_aritmetico numero .)
    RETURN          reduce using rule 73 (expresion -> ID operador_aritmetico numero .)


state 100

    (19) varios_pares_hash -> ID COLON . valor
    (21) varios_pares_hash -> ID COLON . valor COMMA varios_pares_hash
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 121
    numero                         shift and go to state 28

state 101

    (4) set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .

    $end            reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    END_LOWER       reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    BREAK           reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    IF              reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    LOOP            reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    CASE            reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    DEF             reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    PUTS            reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    ID              reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    ELSE            reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    WHEN            reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)
    RETURN          reduce using rule 4 (set_numero -> ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET .)


state 102

    (18) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .

    $end            reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    END_LOWER       reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    BREAK           reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    IF              reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    LOOP            reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    CASE            reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    DEF             reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    PUTS            reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    ID              reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    ELSE            reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    WHEN            reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)
    RETURN          reduce using rule 18 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)


state 103

    (7) varios_elementos -> STR COMMA . varios_elementos
    (5) varios_elementos -> . STR
    (6) varios_elementos -> . numero
    (7) varios_elementos -> . STR COMMA varios_elementos
    (8) varios_elementos -> . numero COMMA varios_elementos
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 122
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    varios_elementos               shift and go to state 123
    numero                         shift and go to state 82

state 104

    (20) varios_pares_hash -> STR HASHAS . valor
    (22) varios_pares_hash -> STR HASHAS . valor COMMA varios_pares_hash
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 124
    numero                         shift and go to state 28

state 105

    (8) varios_elementos -> numero COMMA . varios_elementos
    (5) varios_elementos -> . STR
    (6) varios_elementos -> . numero
    (7) varios_elementos -> . STR COMMA varios_elementos
    (8) varios_elementos -> . numero COMMA varios_elementos
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 122
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    numero                         shift and go to state 82
    varios_elementos               shift and go to state 125

state 106

    (13) array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .

    $end            reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    END_LOWER       reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    BREAK           reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    IF              reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    LOOP            reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    CASE            reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    DEF             reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    PUTS            reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    ID              reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    ELSE            reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    WHEN            reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)
    RETURN          reduce using rule 13 (array_numero -> ID EQUALS LBRACKET varios_numeros RBRACKET .)


state 107

    (14) array_str -> ID EQUALS LBRACKET varios_str RBRACKET .

    $end            reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    END_LOWER       reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    BREAK           reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    IF              reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    LOOP            reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    CASE            reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    DEF             reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    PUTS            reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    ID              reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    ELSE            reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    WHEN            reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)
    RETURN          reduce using rule 14 (array_str -> ID EQUALS LBRACKET varios_str RBRACKET .)


state 108

    (64) varios_numeros -> numero COMMA . varios_numeros
    (63) varios_numeros -> . numero
    (64) varios_numeros -> . numero COMMA varios_numeros
    (61) numero -> . INT
    (62) numero -> . FLOAT

    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    numero                         shift and go to state 86
    varios_numeros                 shift and go to state 126

state 109

    (36) varios_str -> STR COMMA . STR

    STR             shift and go to state 127


state 110

    (72) expresion -> numero operador_aritmetico numero .

    $end            reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    END_LOWER       reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    BREAK           reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    IF              reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    LOOP            reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    CASE            reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    DEF             reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    PUTS            reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    ID              reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    ELSE            reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    WHEN            reduce using rule 72 (expresion -> numero operador_aritmetico numero .)
    RETURN          reduce using rule 72 (expresion -> numero operador_aritmetico numero .)


state 111

    (75) expresion -> numero operador_aritmetico ID .

    $end            reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    END_LOWER       reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    BREAK           reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    IF              reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    LOOP            reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    CASE            reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    DEF             reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    PUTS            reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    ID              reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    ELSE            reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    WHEN            reduce using rule 75 (expresion -> numero operador_aritmetico ID .)
    RETURN          reduce using rule 75 (expresion -> numero operador_aritmetico ID .)


state 112

    (24) statement -> LOOP DO statement BREAK IF comparacion .

    $end            reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    END_LOWER       reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    BREAK           reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    IF              reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    LOOP            reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    CASE            reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    DEF             reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    PUTS            reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    ID              reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    ELSE            reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    WHEN            reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)
    RETURN          reduce using rule 24 (statement -> LOOP DO statement BREAK IF comparacion .)


state 113

    (25) statement -> CASE valor when_clauses ELSE statement_list END_LOWER .

    $end            reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    END_LOWER       reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    BREAK           reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    IF              reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    LOOP            reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    CASE            reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    DEF             reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    PUTS            reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    ID              reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    ELSE            reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    WHEN            reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)
    RETURN          reduce using rule 25 (statement -> CASE valor when_clauses ELSE statement_list END_LOWER .)


state 114

    (43) statement_list -> statement_list statement .

    END_LOWER       reduce using rule 43 (statement_list -> statement_list statement .)
    IF              reduce using rule 43 (statement_list -> statement_list statement .)
    LOOP            reduce using rule 43 (statement_list -> statement_list statement .)
    CASE            reduce using rule 43 (statement_list -> statement_list statement .)
    DEF             reduce using rule 43 (statement_list -> statement_list statement .)
    PUTS            reduce using rule 43 (statement_list -> statement_list statement .)
    ID              reduce using rule 43 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 43 (statement_list -> statement_list statement .)
    WHEN            reduce using rule 43 (statement_list -> statement_list statement .)


state 115

    (26) statement -> CASE valor when_clauses ELSE PUTS valor . END_LOWER
    (34) statement -> PUTS valor .

  ! shift/reduce conflict for END_LOWER resolved as shift
    END_LOWER       shift and go to state 128
    IF              reduce using rule 34 (statement -> PUTS valor .)
    LOOP            reduce using rule 34 (statement -> PUTS valor .)
    CASE            reduce using rule 34 (statement -> PUTS valor .)
    DEF             reduce using rule 34 (statement -> PUTS valor .)
    PUTS            reduce using rule 34 (statement -> PUTS valor .)
    ID              reduce using rule 34 (statement -> PUTS valor .)

  ! END_LOWER       [ reduce using rule 34 (statement -> PUTS valor .) ]


state 116

    (29) when_clause -> WHEN valor THEN statement_list .
    (43) statement_list -> statement_list . statement
    (1) statement -> . set_vacio
    (2) statement -> . set_numero
    (9) statement -> . array_vacio
    (10) statement -> . array_numero
    (11) statement -> . array_str
    (15) statement -> . hash_vacio
    (16) statement -> . hash_elementos
    (23) statement -> . IF comparaciones statement END_LOWER
    (24) statement -> . LOOP DO statement BREAK IF comparacion
    (25) statement -> . CASE valor when_clauses ELSE statement_list END_LOWER
    (26) statement -> . CASE valor when_clauses ELSE PUTS valor END_LOWER
    (31) statement -> . DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER
    (32) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER
    (33) statement -> . DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER
    (34) statement -> . PUTS valor
    (37) statement -> . ID EQUALS valor
    (65) statement -> . ID EQUALS expresion
    (3) set_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (4) set_numero -> . ID EQUALS LCURLYBRACKET varios_elementos RCURLYBRACKET
    (12) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (13) array_numero -> . ID EQUALS LBRACKET varios_numeros RBRACKET
    (14) array_str -> . ID EQUALS LBRACKET varios_str RBRACKET
    (17) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (18) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    ELSE            reduce using rule 29 (when_clause -> WHEN valor THEN statement_list .)
    WHEN            reduce using rule 29 (when_clause -> WHEN valor THEN statement_list .)
    IF              shift and go to state 9
    LOOP            shift and go to state 10
    CASE            shift and go to state 11
    DEF             shift and go to state 13
    PUTS            shift and go to state 12
    ID              shift and go to state 14

    statement                      shift and go to state 114
    set_vacio                      shift and go to state 2
    set_numero                     shift and go to state 3
    array_vacio                    shift and go to state 4
    array_numero                   shift and go to state 5
    array_str                      shift and go to state 6
    hash_vacio                     shift and go to state 7
    hash_elementos                 shift and go to state 8

state 117

    (30) when_clause -> WHEN valor PUTS valor .

    ELSE            reduce using rule 30 (when_clause -> WHEN valor PUTS valor .)
    WHEN            reduce using rule 30 (when_clause -> WHEN valor PUTS valor .)


state 118

    (42) argumentos -> ID COMMA argumentos .

    RPARENTHESIS    reduce using rule 42 (argumentos -> ID COMMA argumentos .)


state 119

    (31) statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .

    $end            reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    END_LOWER       reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    BREAK           reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    IF              reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    LOOP            reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    CASE            reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    DEF             reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    PUTS            reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    ID              reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    ELSE            reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    WHEN            reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)
    RETURN          reduce using rule 31 (statement -> DEF ID LPARENTHESIS RPARENTHESIS statement END_LOWER .)


state 120

    (32) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement . END_LOWER
    (33) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement . RETURN valor END_LOWER

    END_LOWER       shift and go to state 129
    RETURN          shift and go to state 130


state 121

    (19) varios_pares_hash -> ID COLON valor .
    (21) varios_pares_hash -> ID COLON valor . COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 19 (varios_pares_hash -> ID COLON valor .)
    COMMA           shift and go to state 131


state 122

    (5) varios_elementos -> STR .
    (7) varios_elementos -> STR . COMMA varios_elementos

    RCURLYBRACKET   reduce using rule 5 (varios_elementos -> STR .)
    COMMA           shift and go to state 103


state 123

    (7) varios_elementos -> STR COMMA varios_elementos .

    RCURLYBRACKET   reduce using rule 7 (varios_elementos -> STR COMMA varios_elementos .)


state 124

    (20) varios_pares_hash -> STR HASHAS valor .
    (22) varios_pares_hash -> STR HASHAS valor . COMMA varios_pares_hash

    RCURLYBRACKET   reduce using rule 20 (varios_pares_hash -> STR HASHAS valor .)
    COMMA           shift and go to state 132


state 125

    (8) varios_elementos -> numero COMMA varios_elementos .

    RCURLYBRACKET   reduce using rule 8 (varios_elementos -> numero COMMA varios_elementos .)


state 126

    (64) varios_numeros -> numero COMMA varios_numeros .

    RBRACKET        reduce using rule 64 (varios_numeros -> numero COMMA varios_numeros .)


state 127

    (36) varios_str -> STR COMMA STR .

    RBRACKET        reduce using rule 36 (varios_str -> STR COMMA STR .)


state 128

    (26) statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .

    $end            reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    END_LOWER       reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    BREAK           reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    IF              reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    LOOP            reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    CASE            reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    DEF             reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    PUTS            reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    ID              reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    ELSE            reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    WHEN            reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)
    RETURN          reduce using rule 26 (statement -> CASE valor when_clauses ELSE PUTS valor END_LOWER .)


state 129

    (32) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .

    $end            reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    END_LOWER       reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    BREAK           reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    IF              reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    LOOP            reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    CASE            reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    DEF             reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    PUTS            reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    ID              reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    ELSE            reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    WHEN            reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)
    RETURN          reduce using rule 32 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement END_LOWER .)


state 130

    (33) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN . valor END_LOWER
    (38) valor -> . numero
    (39) valor -> . STR
    (40) valor -> . ID
    (61) numero -> . INT
    (62) numero -> . FLOAT

    STR             shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 22
    FLOAT           shift and go to state 23

    valor                          shift and go to state 133
    numero                         shift and go to state 28

state 131

    (21) varios_pares_hash -> ID COLON valor COMMA . varios_pares_hash
    (19) varios_pares_hash -> . ID COLON valor
    (20) varios_pares_hash -> . STR HASHAS valor
    (21) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (22) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash

    ID              shift and go to state 77
    STR             shift and go to state 135

    varios_pares_hash              shift and go to state 134

state 132

    (22) varios_pares_hash -> STR HASHAS valor COMMA . varios_pares_hash
    (19) varios_pares_hash -> . ID COLON valor
    (20) varios_pares_hash -> . STR HASHAS valor
    (21) varios_pares_hash -> . ID COLON valor COMMA varios_pares_hash
    (22) varios_pares_hash -> . STR HASHAS valor COMMA varios_pares_hash

    ID              shift and go to state 77
    STR             shift and go to state 135

    varios_pares_hash              shift and go to state 136

state 133

    (33) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor . END_LOWER

    END_LOWER       shift and go to state 137


state 134

    (21) varios_pares_hash -> ID COLON valor COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 21 (varios_pares_hash -> ID COLON valor COMMA varios_pares_hash .)


state 135

    (20) varios_pares_hash -> STR . HASHAS valor
    (22) varios_pares_hash -> STR . HASHAS valor COMMA varios_pares_hash

    HASHAS          shift and go to state 104


state 136

    (22) varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 22 (varios_pares_hash -> STR HASHAS valor COMMA varios_pares_hash .)


state 137

    (33) statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .

    $end            reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    END_LOWER       reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    BREAK           reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    IF              reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    LOOP            reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    CASE            reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    DEF             reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    PUTS            reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    ID              reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    ELSE            reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    WHEN            reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)
    RETURN          reduce using rule 33 (statement -> DEF ID LPARENTHESIS argumentos RPARENTHESIS statement RETURN valor END_LOWER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for END_LOWER in state 115 resolved as shift
WARNING: reduce/reduce conflict in state 78 resolved using rule (set_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET)
WARNING: rejected rule (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET) in state 78
WARNING: Rule (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET) is never reduced
