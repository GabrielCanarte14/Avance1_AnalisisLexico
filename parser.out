Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    ARRAY
    AT
    BEGIN
    BITWISE_AND
    BITWISE_NOT
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CASE
    CLASS
    COMPLEX
    CONSTANT
    DEDENT
    DEF
    DEFINED
    DO
    DOT
    EACH
    ELSE
    ELSEIF
    END_LOWER
    END_UPPER
    ENSURE
    EQUAL
    EXPONENT
    FALSE
    FILE
    FOR
    GLOBAL
    GREATER_THAN
    GREATER_THAN_EQUAL
    HASH
    IF
    IN
    INDENT
    LESS_THAN
    LESS_THAN_EQUAL
    LINE
    LOOP
    LPARENTHESIS
    MODULE
    MODULO
    NEXT
    NIL
    NOT
    NOT_EQUAL
    OP_AND
    OP_NOT
    OP_OR
    OR
    RATIONAL
    REDO
    RESCUE
    RETRY
    RETURN
    RPARENTHESIS
    SELF
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SUPER
    SYMBOL
    THEN
    TRUE
    UNDEF
    UNLESS
    UNTIL
    WHEN
    WHILE
    YIELD

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> ID EQUALS expression
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression MULTIPLY expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     statement -> array_vacio
Rule 8     array_vacio -> ID EQUALS LBRACKET RBRACKET
Rule 9     array_str -> ID EQUALS LBRACKET varios_str RBRACKET
Rule 10    varios_str -> STR
Rule 11    varios_str -> STR COMMA STR
Rule 12    statement -> hash_vacio
Rule 13    statement -> hash_elementos
Rule 14    hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 15    hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
Rule 16    varios_pares_hash -> ID COLON expression
Rule 17    varios_pares_hash -> STR HASHAS expression
Rule 18    varios_pares_hash -> ID COLON expression COMMA varios_pares_hash
Rule 19    varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash
Rule 20    expression -> INT
Rule 21    expression -> FLOAT
Rule 22    expression -> STR
Rule 23    expression -> ID
Rule 24    statement -> PUTS STR
Rule 25    statement -> PUTS INT
Rule 26    statement -> PUTS FLOAT

Terminals, with rules where they appear

ALIAS                : 
AND                  : 
ARRAY                : 
AT                   : 
BEGIN                : 
BITWISE_AND          : 
BITWISE_NOT          : 
BITWISE_OR           : 
BITWISE_XOR          : 
BREAK                : 
CASE                 : 
CLASS                : 
COLON                : 16 18
COMMA                : 11 18 19
COMPLEX              : 
CONSTANT             : 
DEDENT               : 
DEF                  : 
DEFINED              : 
DIVIDE               : 6
DO                   : 
DOT                  : 
EACH                 : 
ELSE                 : 
ELSEIF               : 
END_LOWER            : 
END_UPPER            : 
ENSURE               : 
EQUAL                : 
EQUALS               : 2 8 9 14 15
EXPONENT             : 
FALSE                : 
FILE                 : 
FLOAT                : 21 26
FOR                  : 
GLOBAL               : 
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
HASH                 : 
HASHAS               : 17 19
ID                   : 2 8 9 14 15 16 18 23
IF                   : 
IN                   : 
INDENT               : 
INT                  : 20 25
LBRACKET             : 8 9
LCURLYBRACKET        : 14 15
LESS_THAN            : 
LESS_THAN_EQUAL      : 
LINE                 : 
LOOP                 : 
LPARENTHESIS         : 
MINUS                : 4
MODULE               : 
MODULO               : 
MULTIPLY             : 5
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 
OP_AND               : 
OP_NOT               : 
OP_OR                : 
OR                   : 
PLUS                 : 3
PUTS                 : 24 25 26
RATIONAL             : 
RBRACKET             : 8 9
RCURLYBRACKET        : 14 15
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPARENTHESIS         : 
SELF                 : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
STR                  : 10 11 11 17 19 22 24
SUPER                : 
SYMBOL               : 
THEN                 : 
TRUE                 : 
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 
WHILE                : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

array_str            : 
array_vacio          : 7
expression           : 1 2 3 3 4 4 5 5 6 6 16 17 18 19
hash_elementos       : 13
hash_vacio           : 12
statement            : 0
varios_pares_hash    : 15 18 19
varios_str           : 9

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (7) statement -> . array_vacio
    (12) statement -> . hash_vacio
    (13) statement -> . hash_elementos
    (24) statement -> . PUTS STR
    (25) statement -> . PUTS INT
    (26) statement -> . PUTS FLOAT
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID
    (8) array_vacio -> . ID EQUALS LBRACKET RBRACKET
    (14) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (15) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    PUTS            shift and go to state 6
    ID              shift and go to state 10
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    array_vacio                    shift and go to state 3
    hash_vacio                     shift and go to state 4
    hash_elementos                 shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14


state 3

    (7) statement -> array_vacio .

    $end            reduce using rule 7 (statement -> array_vacio .)


state 4

    (12) statement -> hash_vacio .

    $end            reduce using rule 12 (statement -> hash_vacio .)


state 5

    (13) statement -> hash_elementos .

    $end            reduce using rule 13 (statement -> hash_elementos .)


state 6

    (24) statement -> PUTS . STR
    (25) statement -> PUTS . INT
    (26) statement -> PUTS . FLOAT

    STR             shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17


state 7

    (22) expression -> STR .

    PLUS            reduce using rule 22 (expression -> STR .)
    MINUS           reduce using rule 22 (expression -> STR .)
    MULTIPLY        reduce using rule 22 (expression -> STR .)
    DIVIDE          reduce using rule 22 (expression -> STR .)
    $end            reduce using rule 22 (expression -> STR .)
    COMMA           reduce using rule 22 (expression -> STR .)
    RCURLYBRACKET   reduce using rule 22 (expression -> STR .)


state 8

    (20) expression -> INT .

    PLUS            reduce using rule 20 (expression -> INT .)
    MINUS           reduce using rule 20 (expression -> INT .)
    MULTIPLY        reduce using rule 20 (expression -> INT .)
    DIVIDE          reduce using rule 20 (expression -> INT .)
    $end            reduce using rule 20 (expression -> INT .)
    COMMA           reduce using rule 20 (expression -> INT .)
    RCURLYBRACKET   reduce using rule 20 (expression -> INT .)


state 9

    (21) expression -> FLOAT .

    PLUS            reduce using rule 21 (expression -> FLOAT .)
    MINUS           reduce using rule 21 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 21 (expression -> FLOAT .)
    DIVIDE          reduce using rule 21 (expression -> FLOAT .)
    $end            reduce using rule 21 (expression -> FLOAT .)
    COMMA           reduce using rule 21 (expression -> FLOAT .)
    RCURLYBRACKET   reduce using rule 21 (expression -> FLOAT .)


state 10

    (2) expression -> ID . EQUALS expression
    (23) expression -> ID .
    (8) array_vacio -> ID . EQUALS LBRACKET RBRACKET
    (14) hash_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (15) hash_elementos -> ID . EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    EQUALS          shift and go to state 18
    PLUS            reduce using rule 23 (expression -> ID .)
    MINUS           reduce using rule 23 (expression -> ID .)
    MULTIPLY        reduce using rule 23 (expression -> ID .)
    DIVIDE          reduce using rule 23 (expression -> ID .)
    $end            reduce using rule 23 (expression -> ID .)


state 11

    (3) expression -> expression PLUS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID

    ID              shift and go to state 20
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    expression                     shift and go to state 19

state 12

    (4) expression -> expression MINUS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID

    ID              shift and go to state 20
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    expression                     shift and go to state 21

state 13

    (5) expression -> expression MULTIPLY . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID

    ID              shift and go to state 20
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    expression                     shift and go to state 22

state 14

    (6) expression -> expression DIVIDE . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID

    ID              shift and go to state 20
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    expression                     shift and go to state 23

state 15

    (24) statement -> PUTS STR .

    $end            reduce using rule 24 (statement -> PUTS STR .)


state 16

    (25) statement -> PUTS INT .

    $end            reduce using rule 25 (statement -> PUTS INT .)


state 17

    (26) statement -> PUTS FLOAT .

    $end            reduce using rule 26 (statement -> PUTS FLOAT .)


state 18

    (2) expression -> ID EQUALS . expression
    (8) array_vacio -> ID EQUALS . LBRACKET RBRACKET
    (14) hash_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (15) hash_elementos -> ID EQUALS . LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID

    LBRACKET        shift and go to state 25
    LCURLYBRACKET   shift and go to state 26
    ID              shift and go to state 20
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    expression                     shift and go to state 24

state 19

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 3 (expression -> expression PLUS expression .)
    RCURLYBRACKET   reduce using rule 3 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression PLUS expression .) ]


state 20

    (2) expression -> ID . EQUALS expression
    (23) expression -> ID .

    EQUALS          shift and go to state 27
    PLUS            reduce using rule 23 (expression -> ID .)
    MINUS           reduce using rule 23 (expression -> ID .)
    MULTIPLY        reduce using rule 23 (expression -> ID .)
    DIVIDE          reduce using rule 23 (expression -> ID .)
    $end            reduce using rule 23 (expression -> ID .)
    COMMA           reduce using rule 23 (expression -> ID .)
    RCURLYBRACKET   reduce using rule 23 (expression -> ID .)


state 21

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 4 (expression -> expression MINUS expression .)
    RCURLYBRACKET   reduce using rule 4 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MINUS expression .) ]


state 22

    (5) expression -> expression MULTIPLY expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 5 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 5 (expression -> expression MULTIPLY expression .)
    RCURLYBRACKET   reduce using rule 5 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]


state 23

    (6) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 6 (expression -> expression DIVIDE expression .)
    RCURLYBRACKET   reduce using rule 6 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]


state 24

    (2) expression -> ID EQUALS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 2 (expression -> ID EQUALS expression .)
    COMMA           reduce using rule 2 (expression -> ID EQUALS expression .)
    RCURLYBRACKET   reduce using rule 2 (expression -> ID EQUALS expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14

  ! PLUS            [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! MINUS           [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> ID EQUALS expression .) ]


state 25

    (8) array_vacio -> ID EQUALS LBRACKET . RBRACKET

    RBRACKET        shift and go to state 28


state 26

    (14) hash_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (15) hash_elementos -> ID EQUALS LCURLYBRACKET . varios_pares_hash RCURLYBRACKET
    (16) varios_pares_hash -> . ID COLON expression
    (17) varios_pares_hash -> . STR HASHAS expression
    (18) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (19) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    RCURLYBRACKET   shift and go to state 30
    ID              shift and go to state 29
    STR             shift and go to state 32

    varios_pares_hash              shift and go to state 31

state 27

    (2) expression -> ID EQUALS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID

    ID              shift and go to state 20
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    expression                     shift and go to state 24

state 28

    (8) array_vacio -> ID EQUALS LBRACKET RBRACKET .

    $end            reduce using rule 8 (array_vacio -> ID EQUALS LBRACKET RBRACKET .)


state 29

    (16) varios_pares_hash -> ID . COLON expression
    (18) varios_pares_hash -> ID . COLON expression COMMA varios_pares_hash

    COLON           shift and go to state 33


state 30

    (14) hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .

    $end            reduce using rule 14 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)


state 31

    (15) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 34


state 32

    (17) varios_pares_hash -> STR . HASHAS expression
    (19) varios_pares_hash -> STR . HASHAS expression COMMA varios_pares_hash

    HASHAS          shift and go to state 35


state 33

    (16) varios_pares_hash -> ID COLON . expression
    (18) varios_pares_hash -> ID COLON . expression COMMA varios_pares_hash
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID

    ID              shift and go to state 20
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    expression                     shift and go to state 36

state 34

    (15) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .

    $end            reduce using rule 15 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)


state 35

    (17) varios_pares_hash -> STR HASHAS . expression
    (19) varios_pares_hash -> STR HASHAS . expression COMMA varios_pares_hash
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (20) expression -> . INT
    (21) expression -> . FLOAT
    (22) expression -> . STR
    (23) expression -> . ID

    ID              shift and go to state 20
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 7

    expression                     shift and go to state 37

state 36

    (16) varios_pares_hash -> ID COLON expression .
    (18) varios_pares_hash -> ID COLON expression . COMMA varios_pares_hash
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

    RCURLYBRACKET   reduce using rule 16 (varios_pares_hash -> ID COLON expression .)
    COMMA           shift and go to state 38
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14


state 37

    (17) varios_pares_hash -> STR HASHAS expression .
    (19) varios_pares_hash -> STR HASHAS expression . COMMA varios_pares_hash
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

    RCURLYBRACKET   reduce using rule 17 (varios_pares_hash -> STR HASHAS expression .)
    COMMA           shift and go to state 39
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14


state 38

    (18) varios_pares_hash -> ID COLON expression COMMA . varios_pares_hash
    (16) varios_pares_hash -> . ID COLON expression
    (17) varios_pares_hash -> . STR HASHAS expression
    (18) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (19) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    ID              shift and go to state 29
    STR             shift and go to state 32

    varios_pares_hash              shift and go to state 40

state 39

    (19) varios_pares_hash -> STR HASHAS expression COMMA . varios_pares_hash
    (16) varios_pares_hash -> . ID COLON expression
    (17) varios_pares_hash -> . STR HASHAS expression
    (18) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (19) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    ID              shift and go to state 29
    STR             shift and go to state 32

    varios_pares_hash              shift and go to state 41

state 40

    (18) varios_pares_hash -> ID COLON expression COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 18 (varios_pares_hash -> ID COLON expression COMMA varios_pares_hash .)


state 41

    (19) varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 19 (varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 19 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 19 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 19 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 19 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 21 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 21 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 21 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 21 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 22 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 23 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 23 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 23 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 23 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 24 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 24 resolved as shift
