Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    ARRAY
    AT
    BEGIN
    BITWISE_AND
    BITWISE_NOT
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CASE
    CLASS
    COMPLEX
    CONSTANT
    DEDENT
    DEF
    DEFINED
    DO
    DOT
    EACH
    ELSE
    ELSEIF
    END_LOWER
    END_UPPER
    ENSURE
    EQUAL
    EXPONENT
    FALSE
    FILE
    FOR
    GLOBAL
    GREATER_THAN
    GREATER_THAN_EQUAL
    HASH
    IF
    IN
    INDENT
    LBRACKET
    LESS_THAN
    LESS_THAN_EQUAL
    LINE
    LOOP
    LPARENTHESIS
    MODULE
    MODULO
    NEXT
    NIL
    NOT
    NOT_EQUAL
    OP_AND
    OP_NOT
    OP_OR
    OR
    PUTS
    RATIONAL
    RBRACKET
    REDO
    RESCUE
    RETRY
    RETURN
    RPARENTHESIS
    SELF
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SUPER
    SYMBOL
    THEN
    TRUE
    UNDEF
    UNLESS
    UNTIL
    WHEN
    WHILE
    YIELD

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> ID EQUALS expression
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression MULTIPLY expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     statement -> hash_vacio
Rule 8     statement -> hash_elementos
Rule 9     hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET
Rule 10    hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET
Rule 11    varios_pares_hash -> ID COLON expression
Rule 12    varios_pares_hash -> STR HASHAS expression
Rule 13    varios_pares_hash -> ID COLON expression COMMA varios_pares_hash
Rule 14    varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash
Rule 15    expression -> INT
Rule 16    expression -> FLOAT
Rule 17    expression -> STR
Rule 18    expression -> ID

Terminals, with rules where they appear

ALIAS                : 
AND                  : 
ARRAY                : 
AT                   : 
BEGIN                : 
BITWISE_AND          : 
BITWISE_NOT          : 
BITWISE_OR           : 
BITWISE_XOR          : 
BREAK                : 
CASE                 : 
CLASS                : 
COLON                : 11 13
COMMA                : 13 14
COMPLEX              : 
CONSTANT             : 
DEDENT               : 
DEF                  : 
DEFINED              : 
DIVIDE               : 6
DO                   : 
DOT                  : 
EACH                 : 
ELSE                 : 
ELSEIF               : 
END_LOWER            : 
END_UPPER            : 
ENSURE               : 
EQUAL                : 
EQUALS               : 2 9 10
EXPONENT             : 
FALSE                : 
FILE                 : 
FLOAT                : 16
FOR                  : 
GLOBAL               : 
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
HASH                 : 
HASHAS               : 12 14
ID                   : 2 9 10 11 13 18
IF                   : 
IN                   : 
INDENT               : 
INT                  : 15
LBRACKET             : 
LCURLYBRACKET        : 9 10
LESS_THAN            : 
LESS_THAN_EQUAL      : 
LINE                 : 
LOOP                 : 
LPARENTHESIS         : 
MINUS                : 4
MODULE               : 
MODULO               : 
MULTIPLY             : 5
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 
OP_AND               : 
OP_NOT               : 
OP_OR                : 
OR                   : 
PLUS                 : 3
PUTS                 : 
RATIONAL             : 
RBRACKET             : 
RCURLYBRACKET        : 9 10
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPARENTHESIS         : 
SELF                 : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
STR                  : 12 14 17
SUPER                : 
SYMBOL               : 
THEN                 : 
TRUE                 : 
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 
WHILE                : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 11 12 13 14
hash_elementos       : 8
hash_vacio           : 7
statement            : 0
varios_pares_hash    : 10 13 14

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (7) statement -> . hash_vacio
    (8) statement -> . hash_elementos
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID
    (9) hash_vacio -> . ID EQUALS LCURLYBRACKET RCURLYBRACKET
    (10) hash_elementos -> . ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    ID              shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    hash_vacio                     shift and go to state 3
    hash_elementos                 shift and go to state 4

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12


state 3

    (7) statement -> hash_vacio .

    $end            reduce using rule 7 (statement -> hash_vacio .)


state 4

    (8) statement -> hash_elementos .

    $end            reduce using rule 8 (statement -> hash_elementos .)


state 5

    (2) expression -> ID . EQUALS expression
    (18) expression -> ID .
    (9) hash_vacio -> ID . EQUALS LCURLYBRACKET RCURLYBRACKET
    (10) hash_elementos -> ID . EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET

    EQUALS          shift and go to state 13
    PLUS            reduce using rule 18 (expression -> ID .)
    MINUS           reduce using rule 18 (expression -> ID .)
    MULTIPLY        reduce using rule 18 (expression -> ID .)
    DIVIDE          reduce using rule 18 (expression -> ID .)
    $end            reduce using rule 18 (expression -> ID .)


state 6

    (15) expression -> INT .

    PLUS            reduce using rule 15 (expression -> INT .)
    MINUS           reduce using rule 15 (expression -> INT .)
    MULTIPLY        reduce using rule 15 (expression -> INT .)
    DIVIDE          reduce using rule 15 (expression -> INT .)
    $end            reduce using rule 15 (expression -> INT .)
    COMMA           reduce using rule 15 (expression -> INT .)
    RCURLYBRACKET   reduce using rule 15 (expression -> INT .)


state 7

    (16) expression -> FLOAT .

    PLUS            reduce using rule 16 (expression -> FLOAT .)
    MINUS           reduce using rule 16 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 16 (expression -> FLOAT .)
    DIVIDE          reduce using rule 16 (expression -> FLOAT .)
    $end            reduce using rule 16 (expression -> FLOAT .)
    COMMA           reduce using rule 16 (expression -> FLOAT .)
    RCURLYBRACKET   reduce using rule 16 (expression -> FLOAT .)


state 8

    (17) expression -> STR .

    PLUS            reduce using rule 17 (expression -> STR .)
    MINUS           reduce using rule 17 (expression -> STR .)
    MULTIPLY        reduce using rule 17 (expression -> STR .)
    DIVIDE          reduce using rule 17 (expression -> STR .)
    $end            reduce using rule 17 (expression -> STR .)
    COMMA           reduce using rule 17 (expression -> STR .)
    RCURLYBRACKET   reduce using rule 17 (expression -> STR .)


state 9

    (3) expression -> expression PLUS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID

    ID              shift and go to state 15
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    expression                     shift and go to state 14

state 10

    (4) expression -> expression MINUS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID

    ID              shift and go to state 15
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    expression                     shift and go to state 16

state 11

    (5) expression -> expression MULTIPLY . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID

    ID              shift and go to state 15
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    expression                     shift and go to state 17

state 12

    (6) expression -> expression DIVIDE . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID

    ID              shift and go to state 15
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    expression                     shift and go to state 18

state 13

    (2) expression -> ID EQUALS . expression
    (9) hash_vacio -> ID EQUALS . LCURLYBRACKET RCURLYBRACKET
    (10) hash_elementos -> ID EQUALS . LCURLYBRACKET varios_pares_hash RCURLYBRACKET
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID

    LCURLYBRACKET   shift and go to state 20
    ID              shift and go to state 15
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    expression                     shift and go to state 19

state 14

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 3 (expression -> expression PLUS expression .)
    RCURLYBRACKET   reduce using rule 3 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! PLUS            [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression PLUS expression .) ]


state 15

    (2) expression -> ID . EQUALS expression
    (18) expression -> ID .

    EQUALS          shift and go to state 21
    PLUS            reduce using rule 18 (expression -> ID .)
    MINUS           reduce using rule 18 (expression -> ID .)
    MULTIPLY        reduce using rule 18 (expression -> ID .)
    DIVIDE          reduce using rule 18 (expression -> ID .)
    $end            reduce using rule 18 (expression -> ID .)
    COMMA           reduce using rule 18 (expression -> ID .)
    RCURLYBRACKET   reduce using rule 18 (expression -> ID .)


state 16

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 4 (expression -> expression MINUS expression .)
    RCURLYBRACKET   reduce using rule 4 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! PLUS            [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MINUS expression .) ]


state 17

    (5) expression -> expression MULTIPLY expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 5 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 5 (expression -> expression MULTIPLY expression .)
    RCURLYBRACKET   reduce using rule 5 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! PLUS            [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]


state 18

    (6) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 6 (expression -> expression DIVIDE expression .)
    RCURLYBRACKET   reduce using rule 6 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! PLUS            [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]


state 19

    (2) expression -> ID EQUALS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 2 (expression -> ID EQUALS expression .)
    COMMA           reduce using rule 2 (expression -> ID EQUALS expression .)
    RCURLYBRACKET   reduce using rule 2 (expression -> ID EQUALS expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! PLUS            [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! MINUS           [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> ID EQUALS expression .) ]


state 20

    (9) hash_vacio -> ID EQUALS LCURLYBRACKET . RCURLYBRACKET
    (10) hash_elementos -> ID EQUALS LCURLYBRACKET . varios_pares_hash RCURLYBRACKET
    (11) varios_pares_hash -> . ID COLON expression
    (12) varios_pares_hash -> . STR HASHAS expression
    (13) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (14) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    RCURLYBRACKET   shift and go to state 23
    ID              shift and go to state 22
    STR             shift and go to state 25

    varios_pares_hash              shift and go to state 24

state 21

    (2) expression -> ID EQUALS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID

    ID              shift and go to state 15
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    expression                     shift and go to state 19

state 22

    (11) varios_pares_hash -> ID . COLON expression
    (13) varios_pares_hash -> ID . COLON expression COMMA varios_pares_hash

    COLON           shift and go to state 26


state 23

    (9) hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .

    $end            reduce using rule 9 (hash_vacio -> ID EQUALS LCURLYBRACKET RCURLYBRACKET .)


state 24

    (10) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 27


state 25

    (12) varios_pares_hash -> STR . HASHAS expression
    (14) varios_pares_hash -> STR . HASHAS expression COMMA varios_pares_hash

    HASHAS          shift and go to state 28


state 26

    (11) varios_pares_hash -> ID COLON . expression
    (13) varios_pares_hash -> ID COLON . expression COMMA varios_pares_hash
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID

    ID              shift and go to state 15
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    expression                     shift and go to state 29

state 27

    (10) hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .

    $end            reduce using rule 10 (hash_elementos -> ID EQUALS LCURLYBRACKET varios_pares_hash RCURLYBRACKET .)


state 28

    (12) varios_pares_hash -> STR HASHAS . expression
    (14) varios_pares_hash -> STR HASHAS . expression COMMA varios_pares_hash
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (15) expression -> . INT
    (16) expression -> . FLOAT
    (17) expression -> . STR
    (18) expression -> . ID

    ID              shift and go to state 15
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STR             shift and go to state 8

    expression                     shift and go to state 30

state 29

    (11) varios_pares_hash -> ID COLON expression .
    (13) varios_pares_hash -> ID COLON expression . COMMA varios_pares_hash
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

    RCURLYBRACKET   reduce using rule 11 (varios_pares_hash -> ID COLON expression .)
    COMMA           shift and go to state 31
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12


state 30

    (12) varios_pares_hash -> STR HASHAS expression .
    (14) varios_pares_hash -> STR HASHAS expression . COMMA varios_pares_hash
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

    RCURLYBRACKET   reduce using rule 12 (varios_pares_hash -> STR HASHAS expression .)
    COMMA           shift and go to state 32
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12


state 31

    (13) varios_pares_hash -> ID COLON expression COMMA . varios_pares_hash
    (11) varios_pares_hash -> . ID COLON expression
    (12) varios_pares_hash -> . STR HASHAS expression
    (13) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (14) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    ID              shift and go to state 22
    STR             shift and go to state 25

    varios_pares_hash              shift and go to state 33

state 32

    (14) varios_pares_hash -> STR HASHAS expression COMMA . varios_pares_hash
    (11) varios_pares_hash -> . ID COLON expression
    (12) varios_pares_hash -> . STR HASHAS expression
    (13) varios_pares_hash -> . ID COLON expression COMMA varios_pares_hash
    (14) varios_pares_hash -> . STR HASHAS expression COMMA varios_pares_hash

    ID              shift and go to state 22
    STR             shift and go to state 25

    varios_pares_hash              shift and go to state 34

state 33

    (13) varios_pares_hash -> ID COLON expression COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 13 (varios_pares_hash -> ID COLON expression COMMA varios_pares_hash .)


state 34

    (14) varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash .

    RCURLYBRACKET   reduce using rule 14 (varios_pares_hash -> STR HASHAS expression COMMA varios_pares_hash .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 14 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 14 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 16 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 16 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 16 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 16 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 17 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 17 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 17 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 17 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 18 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 18 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 18 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 18 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 19 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 19 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 19 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 19 resolved as shift
