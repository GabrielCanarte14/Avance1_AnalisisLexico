Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    AND
    ARRAY
    AT
    BEGIN
    BITWISE_AND
    BITWISE_NOT
    BITWISE_OR
    BITWISE_XOR
    BREAK
    CASE
    CLASS
    COLON
    COMMA
    COMPLEX
    CONSTANT
    DEDENT
    DEF
    DEFINED
    DO
    DOT
    EACH
    ELSE
    ELSEIF
    END_LOWER
    END_UPPER
    ENSURE
    EQUAL
    EXPONENT
    FALSE
    FILE
    FOR
    GLOBAL
    GREATER_THAN
    GREATER_THAN_EQUAL
    HASH
    HASHAS
    IF
    IN
    INDENT
    LBRACKET
    LCURLYBRACKET
    LESS_THAN
    LESS_THAN_EQUAL
    LINE
    LOOP
    LPARENTHESIS
    MODULE
    MODULO
    NEXT
    NIL
    NOT
    NOT_EQUAL
    OP_AND
    OP_NOT
    OP_OR
    OR
    PUTS
    RATIONAL
    RBRACKET
    RCURLYBRACKET
    REDO
    RESCUE
    RETRY
    RETURN
    RPARENTHESIS
    SELF
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SUPER
    SYMBOL
    THEN
    TRUE
    UNDEF
    UNLESS
    UNTIL
    WHEN
    WHILE
    YIELD

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> ID EQUALS expression
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression MULTIPLY expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     expression -> INT
Rule 8     expression -> FLOAT
Rule 9     expression -> STR
Rule 10    expression -> ID

Terminals, with rules where they appear

ALIAS                : 
AND                  : 
ARRAY                : 
AT                   : 
BEGIN                : 
BITWISE_AND          : 
BITWISE_NOT          : 
BITWISE_OR           : 
BITWISE_XOR          : 
BREAK                : 
CASE                 : 
CLASS                : 
COLON                : 
COMMA                : 
COMPLEX              : 
CONSTANT             : 
DEDENT               : 
DEF                  : 
DEFINED              : 
DIVIDE               : 6
DO                   : 
DOT                  : 
EACH                 : 
ELSE                 : 
ELSEIF               : 
END_LOWER            : 
END_UPPER            : 
ENSURE               : 
EQUAL                : 
EQUALS               : 2
EXPONENT             : 
FALSE                : 
FILE                 : 
FLOAT                : 8
FOR                  : 
GLOBAL               : 
GREATER_THAN         : 
GREATER_THAN_EQUAL   : 
HASH                 : 
HASHAS               : 
ID                   : 2 10
IF                   : 
IN                   : 
INDENT               : 
INT                  : 7
LBRACKET             : 
LCURLYBRACKET        : 
LESS_THAN            : 
LESS_THAN_EQUAL      : 
LINE                 : 
LOOP                 : 
LPARENTHESIS         : 
MINUS                : 4
MODULE               : 
MODULO               : 
MULTIPLY             : 5
NEXT                 : 
NIL                  : 
NOT                  : 
NOT_EQUAL            : 
OP_AND               : 
OP_NOT               : 
OP_OR                : 
OR                   : 
PLUS                 : 3
PUTS                 : 
RATIONAL             : 
RBRACKET             : 
RCURLYBRACKET        : 
REDO                 : 
RESCUE               : 
RETRY                : 
RETURN               : 
RPARENTHESIS         : 
SELF                 : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
STR                  : 9
SUPER                : 
SYMBOL               : 
THEN                 : 
TRUE                 : 
UNDEF                : 
UNLESS               : 
UNTIL                : 
WHEN                 : 
WHILE                : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . STR
    (10) expression -> . ID

    ID              shift and go to state 3
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    STR             shift and go to state 6

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10


state 3

    (2) expression -> ID . EQUALS expression
    (10) expression -> ID .

    EQUALS          shift and go to state 11
    PLUS            reduce using rule 10 (expression -> ID .)
    MINUS           reduce using rule 10 (expression -> ID .)
    MULTIPLY        reduce using rule 10 (expression -> ID .)
    DIVIDE          reduce using rule 10 (expression -> ID .)
    $end            reduce using rule 10 (expression -> ID .)


state 4

    (7) expression -> INT .

    PLUS            reduce using rule 7 (expression -> INT .)
    MINUS           reduce using rule 7 (expression -> INT .)
    MULTIPLY        reduce using rule 7 (expression -> INT .)
    DIVIDE          reduce using rule 7 (expression -> INT .)
    $end            reduce using rule 7 (expression -> INT .)


state 5

    (8) expression -> FLOAT .

    PLUS            reduce using rule 8 (expression -> FLOAT .)
    MINUS           reduce using rule 8 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 8 (expression -> FLOAT .)
    DIVIDE          reduce using rule 8 (expression -> FLOAT .)
    $end            reduce using rule 8 (expression -> FLOAT .)


state 6

    (9) expression -> STR .

    PLUS            reduce using rule 9 (expression -> STR .)
    MINUS           reduce using rule 9 (expression -> STR .)
    MULTIPLY        reduce using rule 9 (expression -> STR .)
    DIVIDE          reduce using rule 9 (expression -> STR .)
    $end            reduce using rule 9 (expression -> STR .)


state 7

    (3) expression -> expression PLUS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . STR
    (10) expression -> . ID

    ID              shift and go to state 3
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    STR             shift and go to state 6

    expression                     shift and go to state 12

state 8

    (4) expression -> expression MINUS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . STR
    (10) expression -> . ID

    ID              shift and go to state 3
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    STR             shift and go to state 6

    expression                     shift and go to state 13

state 9

    (5) expression -> expression MULTIPLY . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . STR
    (10) expression -> . ID

    ID              shift and go to state 3
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    STR             shift and go to state 6

    expression                     shift and go to state 14

state 10

    (6) expression -> expression DIVIDE . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . STR
    (10) expression -> . ID

    ID              shift and go to state 3
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    STR             shift and go to state 6

    expression                     shift and go to state 15

state 11

    (2) expression -> ID EQUALS . expression
    (2) expression -> . ID EQUALS expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . STR
    (10) expression -> . ID

    ID              shift and go to state 3
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    STR             shift and go to state 6

    expression                     shift and go to state 16

state 12

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! PLUS            [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression PLUS expression .) ]


state 13

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! PLUS            [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MINUS expression .) ]


state 14

    (5) expression -> expression MULTIPLY expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 5 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! PLUS            [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]


state 15

    (6) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! PLUS            [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]


state 16

    (2) expression -> ID EQUALS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 2 (expression -> ID EQUALS expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10

  ! PLUS            [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! MINUS           [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 2 (expression -> ID EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> ID EQUALS expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 12 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 12 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 13 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 13 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 13 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 13 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 14 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 14 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 15 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 15 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 15 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 15 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 16 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 16 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 16 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 16 resolved as shift
